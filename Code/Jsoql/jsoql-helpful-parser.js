/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"Stmt":4,"EOF":5,"Quoted":6,"Quotation":7,"Boolean":8,"True":9,"False":10,"Identifier":11,"PlainIdentifier":12,"Property":13,"[":14,"Number":15,"]":16,".":17,"Operator":18,"AND":19,"OR":20,"=":21,"!=":22,"<":23,">":24,"<=":25,">=":26,"+":27,"-":28,"/":29,"*":30,"Expression":31,"(":32,")":33,"ExpressionList":34,"Object":35,"KeyValue":36,":":37,"KeyValueList":38,",":39,"{":40,"}":41,"Selectable":42,"AS":43,"SelectList":44,"TrailingDot":45,"FromTarget":46,"AliasedFromTarget":47,"FromTargets":48,"JOIN":49,"ON":50,"OVER":51,"OrderByExpression":52,"ASC":53,"DESC":54,"OrderByList":55,"OrderByClause":56,"ORDERBY":57,"WhereClause":58,"WHERE":59,"FinalDot":60,"FromClause":61,"FROM":62,"SelectClause":63,"SELECTTOP":64,"SELECT":65,"GroupByClause":66,"GROUPBY":67,"HAVING":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"Quotation",9:"True",10:"False",12:"PlainIdentifier",14:"[",15:"Number",16:"]",17:".",19:"AND",20:"OR",21:"=",22:"!=",23:"<",24:">",25:"<=",26:">=",27:"+",28:"-",29:"/",30:"*",32:"(",33:")",37:":",39:",",40:"{",41:"}",43:"AS",45:"TrailingDot",49:"JOIN",50:"ON",51:"OVER",53:"ASC",54:"DESC",57:"ORDERBY",59:"WHERE",60:"FinalDot",62:"FROM",64:"SELECTTOP",65:"SELECT",67:"GROUPBY",68:"HAVING"},
productions_: [0,[3,2],[6,1],[8,1],[8,1],[11,1],[13,1],[13,4],[13,3],[13,6],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[31,3],[31,4],[31,1],[31,1],[31,1],[31,1],[31,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[36,3],[38,1],[38,3],[35,3],[34,1],[34,3],[42,1],[42,3],[44,1],[44,3],[44,2],[44,2],[46,1],[46,1],[46,1],[47,3],[48,1],[48,1],[48,5],[48,5],[52,1],[52,2],[52,2],[55,3],[55,1],[56,2],[58,2],[58,1],[58,3],[58,3],[61,2],[63,3],[63,2],[63,1],[66,2],[66,4],[4,2],[4,3],[4,3],[4,4],[4,3],[4,4],[4,4],[4,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:this.$ = { Quoted: $$[$0].replace(/'/g, "")}
break;
case 3:this.$ = true
break;
case 4:this.$ = false
break;
case 6:this.$ = { Property: $$[$0]}
break;
case 7:this.$ = { Property: $$[$0-3], Index: $$[$0-1]}
break;
case 8:this.$ = { Property: $$[$0-2], Child: $$[$0]}
break;
case 9:this.$ = { Property: $$[$0-5], Index: $$[$0-3], Child: $$[$0]}
break;
case 22:this.$ = { Call: $$[$0-2], Args: []}
break;
case 23:this.$ = { Call: $$[$0-3], Args: $$[$0-1]}
break;
case 28:this.$ = parseFloat($$[$0])
break;
case 29:this.$ = {SubQuery: $$[$0-1]}
break;
case 30:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 31:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 32:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 33:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 34:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 35:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 36:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 37:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 38:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 39:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 40:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 41:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 54:this.$ = {Key: $$[$0-2], Value: $$[$0]}
break;
case 55:this.$ = [$$[$0]]
break;
case 56:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 57:this.$ = {KeyValues: $$[$0-1]}
break;
case 58:this.$ = [$$[$0]]
break;
case 59:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 60:this.$ = {Expression: $$[$0]}
break;
case 61:this.$ = { Expression: $$[$0-2], Alias: $$[$0]}
break;
case 62:this.$ = [$$[$0]]
break;
case 63:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 64:this.$ = $$[$0-1]
break;
case 65:this.$ = $$[$0-1]
break;
case 69:this.$ = {Target: $$[$0-2], Alias: $$[$0]}
break;
case 72:this.$ = { Left: $$[$0-4], Right: $$[$0-2], Expression: $$[$0]}
break;
case 73:this.$ = { Left: $$[$0-4], Over: $$[$0-2], Alias: $$[$0]}
break;
case 74: this.$ = {Expression: $$[$0], Asc: true}
break;
case 75:this.$ = {Expression: $$[$0-1], Asc: true}
break;
case 76:this.$ = {Expression: $$[$0-1], Asc: false}
break;
case 77:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 78:this.$ = [$$[$0]]
break;
case 79:this.$ = $$[$0]
break;
case 80:this.$ = $$[$0]
break;
case 81:this.$ = null
break;
case 82:this.$ = $$[$0-1]
break;
case 83:this.$ = $$[$0-1]
break;
case 84:this.$ = $$[$0]
break;
case 85:this.$ = { SelectList: $$[$0], Limit: $$[$0-1]}
break;
case 86:this.$ = { SelectList: $$[$0]}
break;
case 87:this.$ = { SelectList: []}
break;
case 88:this.$ = { Groupings: $$[$0]}
break;
case 89:this.$ = { Groupings: $$[$0-2], Having: $$[$0]}
break;
case 90:this.$ = {Select:$$[$0-1],From:$$[$0],Positions:{Select:_$[$0-1],From:_$[$0]}}
break;
case 91:this.$ = {Select:$$[$0-2],From:$$[$0-1],Where:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],Where:_$[$0]}}
break;
case 92:this.$ = {Select:$$[$0-2],From:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],OrderBy:_$[$0]}}
break;
case 93:this.$ = {Select:$$[$0-3],From:$$[$0-2],Where:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-3],From:_$[$0-2],Where:_$[$0-1],OrderBy:_$[$0]}}
break;
case 94:this.$ = {Select:$$[$0-2],From:$$[$0-1],GroupBy:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],GroupBy:_$[$0]}}
break;
case 95:this.$ = {Select:$$[$0-3],From:$$[$0-2],Where:$$[$0-1],GroupBy:$$[$0],Positions:{Select:_$[$0-3],From:_$[$0-2],Where:_$[$0-1],GroupBy:_$[$0]}}
break;
case 96:this.$ = {Select:$$[$0-3],From:$$[$0-2],GroupBy:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-3],FromWhere:_$[$0-2],GroupBy:_$[$0-1],OrderBy:_$[$0]}}
break;
case 97:this.$ = {Select:$$[$0-4],From:$$[$0-3],Where:$$[$0-2],GroupBy:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-4],From:_$[$0-3],Where:_$[$0-2],GroupBy:_$[$0-1],OrderBy:_$[$0]}}
break;
}
},
table: [{3:1,4:2,63:3,64:[1,4],65:[1,5]},{1:[3]},{5:[1,6]},{61:7,62:[1,8]},{15:[1,9]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:12,15:[1,18],31:13,32:[1,19],35:17,40:[1,24],42:11,44:10,62:[2,87]},{1:[2,1]},{5:[2,90],33:[2,90],56:26,57:[1,29],58:25,59:[1,28],66:27,67:[1,30]},{6:35,7:[1,21],11:37,12:[1,20],13:34,35:36,40:[1,24],46:32,47:33,48:31},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:12,15:[1,18],31:13,32:[1,19],35:17,40:[1,24],42:11,44:38},{39:[1,39],62:[2,86]},{39:[2,62],62:[2,62]},{19:[2,24],20:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[2,24],30:[2,24],39:[2,24],43:[2,24],45:[1,40],62:[2,24]},{19:[1,42],20:[1,43],21:[1,44],22:[1,45],23:[1,46],24:[1,47],25:[1,48],26:[1,49],27:[1,50],28:[1,51],29:[1,52],30:[1,53],39:[2,60],43:[1,41],62:[2,60]},{5:[2,6],14:[1,54],17:[1,55],19:[2,6],20:[2,6],21:[2,6],22:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],27:[2,6],28:[2,6],29:[2,6],30:[2,6],32:[1,56],33:[2,6],39:[2,6],41:[2,6],43:[2,6],45:[2,6],49:[2,6],51:[2,6],53:[2,6],54:[2,6],57:[2,6],59:[2,6],60:[2,6],62:[2,6],67:[2,6],68:[2,6]},{5:[2,25],19:[2,25],20:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],25:[2,25],26:[2,25],27:[2,25],28:[2,25],29:[2,25],30:[2,25],33:[2,25],39:[2,25],41:[2,25],43:[2,25],45:[2,25],49:[2,25],51:[2,25],53:[2,25],54:[2,25],57:[2,25],59:[2,25],60:[2,25],62:[2,25],67:[2,25],68:[2,25]},{5:[2,26],19:[2,26],20:[2,26],21:[2,26],22:[2,26],23:[2,26],24:[2,26],25:[2,26],26:[2,26],27:[2,26],28:[2,26],29:[2,26],30:[2,26],33:[2,26],39:[2,26],41:[2,26],43:[2,26],45:[2,26],49:[2,26],51:[2,26],53:[2,26],54:[2,26],57:[2,26],59:[2,26],60:[2,26],62:[2,26],67:[2,26],68:[2,26]},{5:[2,27],19:[2,27],20:[2,27],21:[2,27],22:[2,27],23:[2,27],24:[2,27],25:[2,27],26:[2,27],27:[2,27],28:[2,27],29:[2,27],30:[2,27],33:[2,27],39:[2,27],41:[2,27],43:[2,27],45:[2,27],49:[2,27],51:[2,27],53:[2,27],54:[2,27],57:[2,27],59:[2,27],60:[2,27],62:[2,27],67:[2,27],68:[2,27]},{5:[2,28],19:[2,28],20:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],25:[2,28],26:[2,28],27:[2,28],28:[2,28],29:[2,28],30:[2,28],33:[2,28],39:[2,28],41:[2,28],43:[2,28],45:[2,28],49:[2,28],51:[2,28],53:[2,28],54:[2,28],57:[2,28],59:[2,28],60:[2,28],62:[2,28],67:[2,28],68:[2,28]},{4:57,63:3,64:[1,4],65:[1,5]},{5:[2,5],14:[2,5],17:[2,5],19:[2,5],20:[2,5],21:[2,5],22:[2,5],23:[2,5],24:[2,5],25:[2,5],26:[2,5],27:[2,5],28:[2,5],29:[2,5],30:[2,5],32:[2,5],33:[2,5],37:[2,5],39:[2,5],41:[2,5],43:[2,5],45:[2,5],49:[2,5],50:[2,5],51:[2,5],53:[2,5],54:[2,5],57:[2,5],59:[2,5],60:[2,5],62:[2,5],67:[2,5],68:[2,5]},{5:[2,2],19:[2,2],20:[2,2],21:[2,2],22:[2,2],23:[2,2],24:[2,2],25:[2,2],26:[2,2],27:[2,2],28:[2,2],29:[2,2],30:[2,2],33:[2,2],39:[2,2],41:[2,2],43:[2,2],45:[2,2],49:[2,2],51:[2,2],53:[2,2],54:[2,2],57:[2,2],59:[2,2],60:[2,2],62:[2,2],67:[2,2],68:[2,2]},{5:[2,3],19:[2,3],20:[2,3],21:[2,3],22:[2,3],23:[2,3],24:[2,3],25:[2,3],26:[2,3],27:[2,3],28:[2,3],29:[2,3],30:[2,3],33:[2,3],39:[2,3],41:[2,3],43:[2,3],45:[2,3],49:[2,3],51:[2,3],53:[2,3],54:[2,3],57:[2,3],59:[2,3],60:[2,3],62:[2,3],67:[2,3],68:[2,3]},{5:[2,4],19:[2,4],20:[2,4],21:[2,4],22:[2,4],23:[2,4],24:[2,4],25:[2,4],26:[2,4],27:[2,4],28:[2,4],29:[2,4],30:[2,4],33:[2,4],39:[2,4],41:[2,4],43:[2,4],45:[2,4],49:[2,4],51:[2,4],53:[2,4],54:[2,4],57:[2,4],59:[2,4],60:[2,4],62:[2,4],67:[2,4],68:[2,4]},{11:60,12:[1,20],36:59,38:58},{5:[2,91],33:[2,91],56:61,57:[1,29],66:62,67:[1,30]},{5:[2,92],33:[2,92]},{5:[2,94],33:[2,94],56:63,57:[1,29]},{5:[2,81],6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],31:64,32:[1,19],33:[2,81],35:17,40:[1,24],57:[2,81],67:[2,81]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],31:68,32:[1,19],35:17,40:[1,24],52:67,55:66},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],31:70,32:[1,19],34:69,35:17,40:[1,24]},{5:[2,84],33:[2,84],49:[1,71],51:[1,72],57:[2,84],59:[2,84],67:[2,84]},{5:[2,70],33:[2,70],43:[1,73],49:[2,70],51:[2,70],57:[2,70],59:[2,70],67:[2,70]},{5:[2,71],33:[2,71],49:[2,71],51:[2,71],57:[2,71],59:[2,71],67:[2,71]},{5:[2,66],33:[2,66],43:[2,66],49:[2,66],51:[2,66],57:[2,66],59:[2,66],67:[2,66]},{5:[2,67],33:[2,67],43:[2,67],49:[2,67],51:[2,67],57:[2,67],59:[2,67],67:[2,67]},{5:[2,68],33:[2,68],43:[2,68],49:[2,68],51:[2,68],57:[2,68],59:[2,68],67:[2,68]},{5:[2,6],14:[1,54],17:[1,55],19:[2,6],20:[2,6],21:[2,6],22:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],27:[2,6],28:[2,6],29:[2,6],30:[2,6],33:[2,6],39:[2,6],41:[2,6],43:[2,6],45:[2,6],49:[2,6],51:[2,6],53:[2,6],54:[2,6],57:[2,6],59:[2,6],60:[2,6],62:[2,6],67:[2,6],68:[2,6]},{39:[1,39],62:[2,85]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],31:13,32:[1,19],35:17,39:[2,65],40:[1,24],42:74,62:[2,65]},{39:[2,64],62:[2,64]},{11:75,12:[1,20]},{5:[2,42],6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],19:[2,42],20:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],27:[2,42],28:[2,42],29:[2,42],30:[2,42],31:76,32:[1,19],33:[2,42],35:17,39:[2,42],40:[1,24],41:[2,42],43:[2,42],45:[2,42],49:[2,42],51:[2,42],53:[2,42],54:[2,42],57:[2,42],59:[2,42],60:[2,42],62:[2,42],67:[2,42],68:[2,42]},{5:[2,43],6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],19:[2,43],20:[2,43],21:[2,43],22:[2,43],23:[2,43],24:[2,43],25:[2,43],26:[2,43],27:[2,43],28:[2,43],29:[2,43],30:[2,43],31:77,32:[1,19],33:[2,43],35:17,39:[2,43],40:[1,24],41:[2,43],43:[2,43],45:[2,43],49:[2,43],51:[2,43],53:[2,43],54:[2,43],57:[2,43],59:[2,43],60:[2,43],62:[2,43],67:[2,43],68:[2,43]},{5:[2,44],6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],19:[2,44],20:[2,44],21:[2,44],22:[2,44],23:[2,44],24:[2,44],25:[2,44],26:[2,44],27:[2,44],28:[2,44],29:[2,44],30:[2,44],31:78,32:[1,19],33:[2,44],35:17,39:[2,44],40:[1,24],41:[2,44],43:[2,44],45:[2,44],49:[2,44],51:[2,44],53:[2,44],54:[2,44],57:[2,44],59:[2,44],60:[2,44],62:[2,44],67:[2,44],68:[2,44]},{5:[2,45],6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],19:[2,45],20:[2,45],21:[2,45],22:[2,45],23:[2,45],24:[2,45],25:[2,45],26:[2,45],27:[2,45],28:[2,45],29:[2,45],30:[2,45],31:79,32:[1,19],33:[2,45],35:17,39:[2,45],40:[1,24],41:[2,45],43:[2,45],45:[2,45],49:[2,45],51:[2,45],53:[2,45],54:[2,45],57:[2,45],59:[2,45],60:[2,45],62:[2,45],67:[2,45],68:[2,45]},{5:[2,46],6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],19:[2,46],20:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],27:[2,46],28:[2,46],29:[2,46],30:[2,46],31:80,32:[1,19],33:[2,46],35:17,39:[2,46],40:[1,24],41:[2,46],43:[2,46],45:[2,46],49:[2,46],51:[2,46],53:[2,46],54:[2,46],57:[2,46],59:[2,46],60:[2,46],62:[2,46],67:[2,46],68:[2,46]},{5:[2,47],6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],19:[2,47],20:[2,47],21:[2,47],22:[2,47],23:[2,47],24:[2,47],25:[2,47],26:[2,47],27:[2,47],28:[2,47],29:[2,47],30:[2,47],31:81,32:[1,19],33:[2,47],35:17,39:[2,47],40:[1,24],41:[2,47],43:[2,47],45:[2,47],49:[2,47],51:[2,47],53:[2,47],54:[2,47],57:[2,47],59:[2,47],60:[2,47],62:[2,47],67:[2,47],68:[2,47]},{5:[2,48],6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],19:[2,48],20:[2,48],21:[2,48],22:[2,48],23:[2,48],24:[2,48],25:[2,48],26:[2,48],27:[2,48],28:[2,48],29:[2,48],30:[2,48],31:82,32:[1,19],33:[2,48],35:17,39:[2,48],40:[1,24],41:[2,48],43:[2,48],45:[2,48],49:[2,48],51:[2,48],53:[2,48],54:[2,48],57:[2,48],59:[2,48],60:[2,48],62:[2,48],67:[2,48],68:[2,48]},{5:[2,49],6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],19:[2,49],20:[2,49],21:[2,49],22:[2,49],23:[2,49],24:[2,49],25:[2,49],26:[2,49],27:[2,49],28:[2,49],29:[2,49],30:[2,49],31:83,32:[1,19],33:[2,49],35:17,39:[2,49],40:[1,24],41:[2,49],43:[2,49],45:[2,49],49:[2,49],51:[2,49],53:[2,49],54:[2,49],57:[2,49],59:[2,49],60:[2,49],62:[2,49],67:[2,49],68:[2,49]},{5:[2,50],6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],19:[2,50],20:[2,50],21:[2,50],22:[2,50],23:[2,50],24:[2,50],25:[2,50],26:[2,50],27:[2,50],28:[2,50],29:[2,50],30:[2,50],31:84,32:[1,19],33:[2,50],35:17,39:[2,50],40:[1,24],41:[2,50],43:[2,50],45:[2,50],49:[2,50],51:[2,50],53:[2,50],54:[2,50],57:[2,50],59:[2,50],60:[2,50],62:[2,50],67:[2,50],68:[2,50]},{5:[2,51],6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],19:[2,51],20:[2,51],21:[2,51],22:[2,51],23:[2,51],24:[2,51],25:[2,51],26:[2,51],27:[2,51],28:[2,51],29:[2,51],30:[2,51],31:85,32:[1,19],33:[2,51],35:17,39:[2,51],40:[1,24],41:[2,51],43:[2,51],45:[2,51],49:[2,51],51:[2,51],53:[2,51],54:[2,51],57:[2,51],59:[2,51],60:[2,51],62:[2,51],67:[2,51],68:[2,51]},{5:[2,52],6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],19:[2,52],20:[2,52],21:[2,52],22:[2,52],23:[2,52],24:[2,52],25:[2,52],26:[2,52],27:[2,52],28:[2,52],29:[2,52],30:[2,52],31:86,32:[1,19],33:[2,52],35:17,39:[2,52],40:[1,24],41:[2,52],43:[2,52],45:[2,52],49:[2,52],51:[2,52],53:[2,52],54:[2,52],57:[2,52],59:[2,52],60:[2,52],62:[2,52],67:[2,52],68:[2,52]},{5:[2,53],6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],19:[2,53],20:[2,53],21:[2,53],22:[2,53],23:[2,53],24:[2,53],25:[2,53],26:[2,53],27:[2,53],28:[2,53],29:[2,53],30:[2,53],31:87,32:[1,19],33:[2,53],35:17,39:[2,53],40:[1,24],41:[2,53],43:[2,53],45:[2,53],49:[2,53],51:[2,53],53:[2,53],54:[2,53],57:[2,53],59:[2,53],60:[2,53],62:[2,53],67:[2,53],68:[2,53]},{15:[1,88]},{11:37,12:[1,20],13:89},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],31:70,32:[1,19],33:[1,90],34:91,35:17,40:[1,24]},{33:[1,92]},{39:[1,94],41:[1,93]},{39:[2,55],41:[2,55]},{37:[1,95]},{5:[2,93],33:[2,93]},{5:[2,95],33:[2,95],56:96,57:[1,29]},{5:[2,96],33:[2,96]},{5:[2,80],19:[1,42],20:[1,43],21:[1,44],22:[1,45],23:[1,46],24:[1,47],25:[1,48],26:[1,49],27:[1,50],28:[1,51],29:[1,52],30:[1,53],33:[2,80],45:[1,97],57:[2,80],60:[1,98],67:[2,80]},{5:[2,24],19:[2,24],20:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[2,24],30:[2,24],33:[2,24],39:[2,24],41:[2,24],43:[2,24],45:[2,24],49:[2,24],51:[2,24],53:[2,24],54:[2,24],57:[2,24],59:[2,24],60:[2,24],62:[2,24],67:[2,24],68:[2,24]},{5:[2,79],33:[2,79],39:[1,99]},{5:[2,78],33:[2,78],39:[2,78]},{5:[2,74],19:[1,42],20:[1,43],21:[1,44],22:[1,45],23:[1,46],24:[1,47],25:[1,48],26:[1,49],27:[1,50],28:[1,51],29:[1,52],30:[1,53],33:[2,74],39:[2,74],53:[1,100],54:[1,101]},{5:[2,88],33:[2,88],39:[1,103],57:[2,88],68:[1,102]},{5:[2,58],19:[1,42],20:[1,43],21:[1,44],22:[1,45],23:[1,46],24:[1,47],25:[1,48],26:[1,49],27:[1,50],28:[1,51],29:[1,52],30:[1,53],33:[2,58],39:[2,58],57:[2,58],68:[2,58]},{6:35,7:[1,21],11:37,12:[1,20],13:34,35:36,40:[1,24],46:105,47:104},{11:37,12:[1,20],13:106},{11:107,12:[1,20]},{39:[2,63],62:[2,63]},{39:[2,61],62:[2,61]},{5:[2,30],19:[2,30],20:[2,30],21:[1,44],22:[1,45],23:[1,46],24:[1,47],25:[1,48],26:[1,49],27:[1,50],28:[1,51],29:[1,52],30:[1,53],33:[2,30],39:[2,30],41:[2,30],43:[2,30],45:[2,30],49:[2,30],51:[2,30],53:[2,30],54:[2,30],57:[2,30],59:[2,30],60:[2,30],62:[2,30],67:[2,30],68:[2,30]},{5:[2,31],19:[2,31],20:[2,31],21:[1,44],22:[1,45],23:[1,46],24:[1,47],25:[1,48],26:[1,49],27:[1,50],28:[1,51],29:[1,52],30:[1,53],33:[2,31],39:[2,31],41:[2,31],43:[2,31],45:[2,31],49:[2,31],51:[2,31],53:[2,31],54:[2,31],57:[2,31],59:[2,31],60:[2,31],62:[2,31],67:[2,31],68:[2,31]},{5:[2,32],19:[2,32],20:[2,32],21:[2,32],22:[2,32],23:[2,32],24:[2,32],25:[2,32],26:[2,32],27:[1,50],28:[1,51],29:[1,52],30:[1,53],33:[2,32],39:[2,32],41:[2,32],43:[2,32],45:[2,32],49:[2,32],51:[2,32],53:[2,32],54:[2,32],57:[2,32],59:[2,32],60:[2,32],62:[2,32],67:[2,32],68:[2,32]},{5:[2,33],19:[2,33],20:[2,33],21:[2,33],22:[2,33],23:[2,33],24:[2,33],25:[2,33],26:[2,33],27:[1,50],28:[1,51],29:[1,52],30:[1,53],33:[2,33],39:[2,33],41:[2,33],43:[2,33],45:[2,33],49:[2,33],51:[2,33],53:[2,33],54:[2,33],57:[2,33],59:[2,33],60:[2,33],62:[2,33],67:[2,33],68:[2,33]},{5:[2,34],19:[2,34],20:[2,34],21:[2,34],22:[2,34],23:[2,34],24:[2,34],25:[2,34],26:[2,34],27:[1,50],28:[1,51],29:[1,52],30:[1,53],33:[2,34],39:[2,34],41:[2,34],43:[2,34],45:[2,34],49:[2,34],51:[2,34],53:[2,34],54:[2,34],57:[2,34],59:[2,34],60:[2,34],62:[2,34],67:[2,34],68:[2,34]},{5:[2,35],19:[2,35],20:[2,35],21:[2,35],22:[2,35],23:[2,35],24:[2,35],25:[2,35],26:[2,35],27:[1,50],28:[1,51],29:[1,52],30:[1,53],33:[2,35],39:[2,35],41:[2,35],43:[2,35],45:[2,35],49:[2,35],51:[2,35],53:[2,35],54:[2,35],57:[2,35],59:[2,35],60:[2,35],62:[2,35],67:[2,35],68:[2,35]},{5:[2,36],19:[2,36],20:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],25:[2,36],26:[2,36],27:[1,50],28:[1,51],29:[1,52],30:[1,53],33:[2,36],39:[2,36],41:[2,36],43:[2,36],45:[2,36],49:[2,36],51:[2,36],53:[2,36],54:[2,36],57:[2,36],59:[2,36],60:[2,36],62:[2,36],67:[2,36],68:[2,36]},{5:[2,37],19:[2,37],20:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],25:[2,37],26:[2,37],27:[1,50],28:[1,51],29:[1,52],30:[1,53],33:[2,37],39:[2,37],41:[2,37],43:[2,37],45:[2,37],49:[2,37],51:[2,37],53:[2,37],54:[2,37],57:[2,37],59:[2,37],60:[2,37],62:[2,37],67:[2,37],68:[2,37]},{5:[2,38],19:[2,38],20:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],25:[2,38],26:[2,38],27:[2,38],28:[2,38],29:[1,52],30:[1,53],33:[2,38],39:[2,38],41:[2,38],43:[2,38],45:[2,38],49:[2,38],51:[2,38],53:[2,38],54:[2,38],57:[2,38],59:[2,38],60:[2,38],62:[2,38],67:[2,38],68:[2,38]},{5:[2,39],19:[2,39],20:[2,39],21:[2,39],22:[2,39],23:[2,39],24:[2,39],25:[2,39],26:[2,39],27:[2,39],28:[2,39],29:[1,52],30:[1,53],33:[2,39],39:[2,39],41:[2,39],43:[2,39],45:[2,39],49:[2,39],51:[2,39],53:[2,39],54:[2,39],57:[2,39],59:[2,39],60:[2,39],62:[2,39],67:[2,39],68:[2,39]},{5:[2,40],19:[2,40],20:[2,40],21:[2,40],22:[2,40],23:[2,40],24:[2,40],25:[2,40],26:[2,40],27:[2,40],28:[2,40],29:[2,40],30:[2,40],33:[2,40],39:[2,40],41:[2,40],43:[2,40],45:[2,40],49:[2,40],51:[2,40],53:[2,40],54:[2,40],57:[2,40],59:[2,40],60:[2,40],62:[2,40],67:[2,40],68:[2,40]},{5:[2,41],19:[2,41],20:[2,41],21:[2,41],22:[2,41],23:[2,41],24:[2,41],25:[2,41],26:[2,41],27:[2,41],28:[2,41],29:[2,41],30:[2,41],33:[2,41],39:[2,41],41:[2,41],43:[2,41],45:[2,41],49:[2,41],51:[2,41],53:[2,41],54:[2,41],57:[2,41],59:[2,41],60:[2,41],62:[2,41],67:[2,41],68:[2,41]},{16:[1,108]},{5:[2,8],19:[2,8],20:[2,8],21:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],27:[2,8],28:[2,8],29:[2,8],30:[2,8],33:[2,8],39:[2,8],41:[2,8],43:[2,8],45:[2,8],49:[2,8],51:[2,8],53:[2,8],54:[2,8],57:[2,8],59:[2,8],60:[2,8],62:[2,8],67:[2,8],68:[2,8]},{5:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],27:[2,22],28:[2,22],29:[2,22],30:[2,22],33:[2,22],39:[2,22],41:[2,22],43:[2,22],45:[2,22],49:[2,22],51:[2,22],53:[2,22],54:[2,22],57:[2,22],59:[2,22],60:[2,22],62:[2,22],67:[2,22],68:[2,22]},{33:[1,109],39:[1,103]},{5:[2,29],19:[2,29],20:[2,29],21:[2,29],22:[2,29],23:[2,29],24:[2,29],25:[2,29],26:[2,29],27:[2,29],28:[2,29],29:[2,29],30:[2,29],33:[2,29],39:[2,29],41:[2,29],43:[2,29],45:[2,29],49:[2,29],51:[2,29],53:[2,29],54:[2,29],57:[2,29],59:[2,29],60:[2,29],62:[2,29],67:[2,29],68:[2,29]},{5:[2,57],19:[2,57],20:[2,57],21:[2,57],22:[2,57],23:[2,57],24:[2,57],25:[2,57],26:[2,57],27:[2,57],28:[2,57],29:[2,57],30:[2,57],33:[2,57],39:[2,57],41:[2,57],43:[2,57],45:[2,57],49:[2,57],51:[2,57],53:[2,57],54:[2,57],57:[2,57],59:[2,57],60:[2,57],62:[2,57],67:[2,57],68:[2,57]},{11:60,12:[1,20],36:110},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],31:111,32:[1,19],35:17,40:[1,24]},{5:[2,97],33:[2,97]},{5:[2,82],33:[2,82],57:[2,82],67:[2,82]},{5:[2,83],33:[2,83],57:[2,83],67:[2,83]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],31:68,32:[1,19],35:17,40:[1,24],52:112},{5:[2,75],33:[2,75],39:[2,75]},{5:[2,76],33:[2,76],39:[2,76]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],31:113,32:[1,19],35:17,40:[1,24]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],31:114,32:[1,19],35:17,40:[1,24]},{50:[1,115]},{43:[1,73]},{43:[1,116]},{5:[2,69],33:[2,69],49:[2,69],50:[2,69],51:[2,69],57:[2,69],59:[2,69],67:[2,69]},{5:[2,7],17:[1,117],19:[2,7],20:[2,7],21:[2,7],22:[2,7],23:[2,7],24:[2,7],25:[2,7],26:[2,7],27:[2,7],28:[2,7],29:[2,7],30:[2,7],33:[2,7],39:[2,7],41:[2,7],43:[2,7],45:[2,7],49:[2,7],51:[2,7],53:[2,7],54:[2,7],57:[2,7],59:[2,7],60:[2,7],62:[2,7],67:[2,7],68:[2,7]},{5:[2,23],19:[2,23],20:[2,23],21:[2,23],22:[2,23],23:[2,23],24:[2,23],25:[2,23],26:[2,23],27:[2,23],28:[2,23],29:[2,23],30:[2,23],33:[2,23],39:[2,23],41:[2,23],43:[2,23],45:[2,23],49:[2,23],51:[2,23],53:[2,23],54:[2,23],57:[2,23],59:[2,23],60:[2,23],62:[2,23],67:[2,23],68:[2,23]},{39:[2,56],41:[2,56]},{19:[1,42],20:[1,43],21:[1,44],22:[1,45],23:[1,46],24:[1,47],25:[1,48],26:[1,49],27:[1,50],28:[1,51],29:[1,52],30:[1,53],39:[2,54],41:[2,54]},{5:[2,77],33:[2,77],39:[2,77]},{5:[2,89],19:[1,42],20:[1,43],21:[1,44],22:[1,45],23:[1,46],24:[1,47],25:[1,48],26:[1,49],27:[1,50],28:[1,51],29:[1,52],30:[1,53],33:[2,89],57:[2,89]},{5:[2,59],19:[1,42],20:[1,43],21:[1,44],22:[1,45],23:[1,46],24:[1,47],25:[1,48],26:[1,49],27:[1,50],28:[1,51],29:[1,52],30:[1,53],33:[2,59],39:[2,59],57:[2,59],68:[2,59]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:65,15:[1,18],31:118,32:[1,19],35:17,40:[1,24]},{12:[1,119]},{11:37,12:[1,20],13:120},{5:[2,72],19:[1,42],20:[1,43],21:[1,44],22:[1,45],23:[1,46],24:[1,47],25:[1,48],26:[1,49],27:[1,50],28:[1,51],29:[1,52],30:[1,53],33:[2,72],49:[2,72],51:[2,72],57:[2,72],59:[2,72],67:[2,72]},{5:[2,73],33:[2,73],49:[2,73],51:[2,73],57:[2,73],59:[2,73],67:[2,73]},{5:[2,9],19:[2,9],20:[2,9],21:[2,9],22:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],27:[2,9],28:[2,9],29:[2,9],30:[2,9],33:[2,9],39:[2,9],41:[2,9],43:[2,9],45:[2,9],49:[2,9],51:[2,9],53:[2,9],54:[2,9],57:[2,9],59:[2,9],60:[2,9],62:[2,9],67:[2,9],68:[2,9]}],
defaultActions: {6:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 45
break;
case 1:return 60
break;
case 2:return 17
break;
case 3:return 32
break;
case 4:return 33
break;
case 5:return 14
break;
case 6:return 16
break;
case 7:return 39
break;
case 8:return 25
break;
case 9:return 23
break;
case 10:return 26
break;
case 11:return 24
break;
case 12:return 22
break;
case 13:return 21
break;
case 14:return 27
break;
case 15:return 40
break;
case 16:return 41
break;
case 17:return 37
break;
case 18:return 64
break;
case 19:return 65
break;
case 20:return 62
break;
case 21:return 59
break;
case 22:return 67
break;
case 23:return 68
break;
case 24:return 57
break;
case 25:return 53
break;
case 26:return 54
break;
case 27:return 43
break;
case 28:return 49
break;
case 29:return 50
break;
case 30:return 51
break;
case 31:return 19
break;
case 32:return 20
break;
case 33:return 9
break;
case 34:return 10
break;
case 35:return 15
break;
case 36:return 12
break;
case 37:return 7
break;
case 38:return 5
break;
case 39:/* ignore whitespace */
break;
case 40:return 'INVALID'
break;
}
},
rules: [/^(?:\.\s)/,/^(?:\.$)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:\+)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:SELECT TOP)/,/^(?:SELECT)/,/^(?:FROM)/,/^(?:WHERE)/,/^(?:GROUP BY)/,/^(?:HAVING)/,/^(?:ORDER BY)/,/^(?:ASC)/,/^(?:DESC)/,/^(?:AS)/,/^(?:JOIN)/,/^(?:ON)/,/^(?:OVER)/,/^(?:AND)/,/^(?:OR)/,/^(?:true)/,/^(?:false)/,/^(?:[0-9.-]+)/,/^(?:[@A-Za-z0-9_*]+)/,/^(?:'[^']+')/,/^(?:$)/,/^(?:\s+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}