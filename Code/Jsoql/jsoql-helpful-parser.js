/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"Stmt":4,"EOF":5,"Quoted":6,"Quotation":7,"Boolean":8,"True":9,"False":10,"Identifier":11,"PlainIdentifier":12,"Property":13,"[":14,"Number":15,"]":16,".":17,"Expression":18,"(":19,")":20,"ExpressionList":21,"Object":22,"AND":23,"OR":24,"=":25,"!=":26,">":27,">=":28,"<":29,"<=":30,"+":31,"KeyValue":32,":":33,"KeyValueList":34,",":35,"{":36,"}":37,"Selectable":38,"AS":39,"SelectList":40,"TrailingDot":41,"FromTarget":42,"AliasedFromTarget":43,"FromTargets":44,"JOIN":45,"ON":46,"OVER":47,"OrderByExpression":48,"ASC":49,"DESC":50,"OrderByList":51,"OrderByClause":52,"ORDERBY":53,"FromWhereClause":54,"FROM":55,"WHERE":56,"SelectClause":57,"SELECTTOP":58,"SELECT":59,"GroupByClause":60,"GROUPBY":61,"HAVING":62,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"Quotation",9:"True",10:"False",12:"PlainIdentifier",14:"[",15:"Number",16:"]",17:".",19:"(",20:")",23:"AND",24:"OR",25:"=",26:"!=",27:">",28:">=",29:"<",30:"<=",31:"+",33:":",35:",",36:"{",37:"}",39:"AS",41:"TrailingDot",45:"JOIN",46:"ON",47:"OVER",49:"ASC",50:"DESC",53:"ORDERBY",55:"FROM",56:"WHERE",58:"SELECTTOP",59:"SELECT",61:"GROUPBY",62:"HAVING"},
productions_: [0,[3,2],[6,1],[8,1],[8,1],[11,1],[13,1],[13,4],[13,3],[13,6],[18,3],[18,4],[18,1],[18,1],[18,1],[18,1],[18,1],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[32,3],[34,1],[34,3],[22,3],[21,1],[21,3],[38,1],[38,3],[40,1],[40,3],[40,2],[40,2],[42,1],[42,1],[42,1],[43,3],[44,1],[44,1],[44,5],[44,5],[48,1],[48,2],[48,2],[51,3],[51,1],[52,2],[54,2],[54,4],[57,3],[57,2],[57,1],[60,2],[60,4],[4,2],[4,3],[4,4],[4,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:this.$ = { Quoted: $$[$0].replace(/'/g, "")}
break;
case 3:this.$ = true
break;
case 4:this.$ = false
break;
case 6:this.$ = { Property: $$[$0]}
break;
case 7:this.$ = { Property: $$[$0-3], Index: $$[$0-1]}
break;
case 8:this.$ = { Property: $$[$0-2], Child: $$[$0]}
break;
case 9:this.$ = { Property: $$[$0-5], Index: $$[$0-3], Child: $$[$0]}
break;
case 10:this.$ = { Call: $$[$0-2], Args: []}
break;
case 11:this.$ = { Call: $$[$0-3], Args: $$[$0-1]}
break;
case 16:this.$ = parseFloat($$[$0])
break;
case 17:this.$ = {Operator: $$[$0-1].trim(), Args: [$$[$0-2],$$[$0]]}
break;
case 18:this.$ = {Operator: $$[$0-1].trim(), Args: [$$[$0-2],$$[$0]]}
break;
case 19:this.$ = {Operator: $$[$0-1].trim(), Args: [$$[$0-2],$$[$0]]}
break;
case 20:this.$ = {Operator: $$[$0-1].trim(), Args: [$$[$0-2],$$[$0]]}
break;
case 21:this.$ = {Operator: $$[$0-1].trim(), Args: [$$[$0-2],$$[$0]]}
break;
case 22:this.$ = {Operator: $$[$0-1].trim(), Args: [$$[$0-2],$$[$0]]}
break;
case 23:this.$ = {Operator: $$[$0-1].trim(), Args: [$$[$0-2],$$[$0]]}
break;
case 24:this.$ = {Operator: $$[$0-1].trim(), Args: [$$[$0-2],$$[$0]]}
break;
case 25:this.$ = {Operator: $$[$0-1].trim(), Args: [$$[$0-2],$$[$0]]}
break;
case 26:this.$ = {SubQuery: $$[$0-1]}
break;
case 27:this.$ = {Key: $$[$0-2], Value: $$[$0]}
break;
case 28:this.$ = [$$[$0]]
break;
case 29:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 30:this.$ = {KeyValues: $$[$0-1]}
break;
case 31:this.$ = [$$[$0]]
break;
case 32:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 33:this.$ = {Expression: $$[$0]}
break;
case 34:this.$ = { Expression: $$[$0-2], Alias: $$[$0]}
break;
case 35:this.$ = [$$[$0]]
break;
case 36:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 37:this.$ = $$[$0-1]
break;
case 38:this.$ = $$[$0-1]
break;
case 42:this.$ = {Target: $$[$0-2], Alias: $$[$0]}
break;
case 45:this.$ = { Left: $$[$0-4], Right: $$[$0-2], Expression: $$[$0]}
break;
case 46:this.$ = { Left: $$[$0-4], Over: $$[$0-2], Alias: $$[$0]}
break;
case 47: this.$ = {Expression: $$[$0], Asc: true}
break;
case 48:this.$ = {Expression: $$[$0-1], Asc: true}
break;
case 49:this.$ = {Expression: $$[$0-1], Asc: false}
break;
case 50:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 51:this.$ = [$$[$0]]
break;
case 52:this.$ = $$[$0]
break;
case 53:this.$ = {From: $$[$0] }
break;
case 54:this.$ = {From: $$[$0-2], Where: $$[$0]}
break;
case 55:this.$ = { SelectList: $$[$0], Limit: $$[$0-1]}
break;
case 56:this.$ = { SelectList: $$[$0]}
break;
case 57:this.$ = { SelectList: []}
break;
case 58:this.$ = { Groupings: $$[$0]}
break;
case 59:this.$ = { Groupings: $$[$0-2], Having: $$[$0]}
break;
case 60:this.$ = {Select:$$[$0-1],FromWhere:$$[$0],Positions:{Select:_$[$0-1],FromWhere:_$[$0]}}
break;
case 61:this.$ = {Select:$$[$0-2],FromWhere:$$[$0-1],GroupBy:$$[$0],Positions:{Select:_$[$0-2],FromWhere:_$[$0-1],GroupBy:_$[$0]}}
break;
case 62:this.$ = {Select:$$[$0-3],FromWhere:$$[$0-2],GroupBy:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-3],FromWhere:_$[$0-2],GroupBy:_$[$0-1],OrderBy:_$[$0]}}
break;
case 63:this.$ = {Select:$$[$0-2],FromWhere:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-2],FromWhere:_$[$0-1],OrderBy:_$[$0]}}
break;
}
},
table: [{3:1,4:2,57:3,58:[1,4],59:[1,5]},{1:[3]},{5:[1,6]},{54:7,55:[1,8]},{15:[1,9]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:12,15:[1,18],18:13,19:[1,19],22:17,36:[1,24],38:11,40:10,55:[2,57]},{1:[2,1]},{5:[2,60],20:[2,60],52:26,53:[1,28],60:25,61:[1,27]},{6:33,7:[1,21],11:35,12:[1,20],13:32,22:34,36:[1,24],42:30,43:31,44:29},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:12,15:[1,18],18:13,19:[1,19],22:17,36:[1,24],38:11,40:36},{35:[1,37],55:[2,56]},{35:[2,35],55:[2,35]},{23:[2,12],24:[2,12],25:[2,12],26:[2,12],27:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],35:[2,12],39:[2,12],41:[1,38],55:[2,12]},{23:[1,40],24:[1,41],25:[1,42],26:[1,43],27:[1,44],28:[1,45],29:[1,46],30:[1,47],31:[1,48],35:[2,33],39:[1,39],55:[2,33]},{5:[2,6],14:[1,49],17:[1,50],19:[1,51],20:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],27:[2,6],28:[2,6],29:[2,6],30:[2,6],31:[2,6],35:[2,6],37:[2,6],39:[2,6],41:[2,6],45:[2,6],47:[2,6],49:[2,6],50:[2,6],53:[2,6],55:[2,6],56:[2,6],61:[2,6],62:[2,6]},{5:[2,13],20:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[2,13],27:[2,13],28:[2,13],29:[2,13],30:[2,13],31:[2,13],35:[2,13],37:[2,13],39:[2,13],45:[2,13],47:[2,13],49:[2,13],50:[2,13],53:[2,13],55:[2,13],56:[2,13],61:[2,13],62:[2,13]},{5:[2,14],20:[2,14],23:[2,14],24:[2,14],25:[2,14],26:[2,14],27:[2,14],28:[2,14],29:[2,14],30:[2,14],31:[2,14],35:[2,14],37:[2,14],39:[2,14],45:[2,14],47:[2,14],49:[2,14],50:[2,14],53:[2,14],55:[2,14],56:[2,14],61:[2,14],62:[2,14]},{5:[2,15],20:[2,15],23:[2,15],24:[2,15],25:[2,15],26:[2,15],27:[2,15],28:[2,15],29:[2,15],30:[2,15],31:[2,15],35:[2,15],37:[2,15],39:[2,15],45:[2,15],47:[2,15],49:[2,15],50:[2,15],53:[2,15],55:[2,15],56:[2,15],61:[2,15],62:[2,15]},{5:[2,16],20:[2,16],23:[2,16],24:[2,16],25:[2,16],26:[2,16],27:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],35:[2,16],37:[2,16],39:[2,16],45:[2,16],47:[2,16],49:[2,16],50:[2,16],53:[2,16],55:[2,16],56:[2,16],61:[2,16],62:[2,16]},{4:52,57:3,58:[1,4],59:[1,5]},{5:[2,5],14:[2,5],17:[2,5],19:[2,5],20:[2,5],23:[2,5],24:[2,5],25:[2,5],26:[2,5],27:[2,5],28:[2,5],29:[2,5],30:[2,5],31:[2,5],33:[2,5],35:[2,5],37:[2,5],39:[2,5],41:[2,5],45:[2,5],46:[2,5],47:[2,5],49:[2,5],50:[2,5],53:[2,5],55:[2,5],56:[2,5],61:[2,5],62:[2,5]},{5:[2,2],20:[2,2],23:[2,2],24:[2,2],25:[2,2],26:[2,2],27:[2,2],28:[2,2],29:[2,2],30:[2,2],31:[2,2],35:[2,2],37:[2,2],39:[2,2],45:[2,2],47:[2,2],49:[2,2],50:[2,2],53:[2,2],55:[2,2],56:[2,2],61:[2,2],62:[2,2]},{5:[2,3],20:[2,3],23:[2,3],24:[2,3],25:[2,3],26:[2,3],27:[2,3],28:[2,3],29:[2,3],30:[2,3],31:[2,3],35:[2,3],37:[2,3],39:[2,3],45:[2,3],47:[2,3],49:[2,3],50:[2,3],53:[2,3],55:[2,3],56:[2,3],61:[2,3],62:[2,3]},{5:[2,4],20:[2,4],23:[2,4],24:[2,4],25:[2,4],26:[2,4],27:[2,4],28:[2,4],29:[2,4],30:[2,4],31:[2,4],35:[2,4],37:[2,4],39:[2,4],45:[2,4],47:[2,4],49:[2,4],50:[2,4],53:[2,4],55:[2,4],56:[2,4],61:[2,4],62:[2,4]},{11:55,12:[1,20],32:54,34:53},{5:[2,61],20:[2,61],52:56,53:[1,28]},{5:[2,63],20:[2,63]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:58,19:[1,19],21:57,22:17,36:[1,24]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:62,19:[1,19],22:17,36:[1,24],48:61,51:60},{5:[2,53],20:[2,53],45:[1,64],47:[1,65],53:[2,53],56:[1,63],61:[2,53]},{5:[2,43],20:[2,43],39:[1,66],45:[2,43],47:[2,43],53:[2,43],56:[2,43],61:[2,43]},{5:[2,44],20:[2,44],45:[2,44],47:[2,44],53:[2,44],56:[2,44],61:[2,44]},{5:[2,39],20:[2,39],39:[2,39],45:[2,39],47:[2,39],53:[2,39],56:[2,39],61:[2,39]},{5:[2,40],20:[2,40],39:[2,40],45:[2,40],47:[2,40],53:[2,40],56:[2,40],61:[2,40]},{5:[2,41],20:[2,41],39:[2,41],45:[2,41],47:[2,41],53:[2,41],56:[2,41],61:[2,41]},{5:[2,6],14:[1,49],17:[1,50],20:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],27:[2,6],28:[2,6],29:[2,6],30:[2,6],31:[2,6],35:[2,6],37:[2,6],39:[2,6],41:[2,6],45:[2,6],47:[2,6],49:[2,6],50:[2,6],53:[2,6],55:[2,6],56:[2,6],61:[2,6],62:[2,6]},{35:[1,37],55:[2,55]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:13,19:[1,19],22:17,35:[2,38],36:[1,24],38:67,55:[2,38]},{35:[2,37],55:[2,37]},{11:68,12:[1,20]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:69,19:[1,19],22:17,36:[1,24]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:70,19:[1,19],22:17,36:[1,24]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:71,19:[1,19],22:17,36:[1,24]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:72,19:[1,19],22:17,36:[1,24]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:73,19:[1,19],22:17,36:[1,24]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:74,19:[1,19],22:17,36:[1,24]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:75,19:[1,19],22:17,36:[1,24]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:76,19:[1,19],22:17,36:[1,24]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:77,19:[1,19],22:17,36:[1,24]},{15:[1,78]},{11:35,12:[1,20],13:79},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:58,19:[1,19],20:[1,80],21:81,22:17,36:[1,24]},{20:[1,82]},{35:[1,84],37:[1,83]},{35:[2,28],37:[2,28]},{33:[1,85]},{5:[2,62],20:[2,62]},{5:[2,58],20:[2,58],35:[1,87],53:[2,58],62:[1,86]},{5:[2,31],20:[2,31],23:[1,40],24:[1,41],25:[1,42],26:[1,43],27:[1,44],28:[1,45],29:[1,46],30:[1,47],31:[1,48],35:[2,31],53:[2,31],62:[2,31]},{5:[2,12],20:[2,12],23:[2,12],24:[2,12],25:[2,12],26:[2,12],27:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],35:[2,12],37:[2,12],39:[2,12],45:[2,12],47:[2,12],49:[2,12],50:[2,12],53:[2,12],55:[2,12],56:[2,12],61:[2,12],62:[2,12]},{5:[2,52],20:[2,52],35:[1,88]},{5:[2,51],20:[2,51],35:[2,51]},{5:[2,47],20:[2,47],23:[1,40],24:[1,41],25:[1,42],26:[1,43],27:[1,44],28:[1,45],29:[1,46],30:[1,47],31:[1,48],35:[2,47],49:[1,89],50:[1,90]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:91,19:[1,19],22:17,36:[1,24]},{6:33,7:[1,21],11:35,12:[1,20],13:32,22:34,36:[1,24],42:93,43:92},{11:35,12:[1,20],13:94},{11:95,12:[1,20]},{35:[2,36],55:[2,36]},{35:[2,34],55:[2,34]},{5:[2,17],20:[2,17],23:[2,17],24:[2,17],25:[1,42],26:[1,43],27:[1,44],28:[1,45],29:[1,46],30:[1,47],31:[1,48],35:[2,17],37:[2,17],39:[2,17],45:[2,17],47:[2,17],49:[2,17],50:[2,17],53:[2,17],55:[2,17],56:[2,17],61:[2,17],62:[2,17]},{5:[2,18],20:[2,18],23:[2,18],24:[2,18],25:[1,42],26:[1,43],27:[1,44],28:[1,45],29:[1,46],30:[1,47],31:[1,48],35:[2,18],37:[2,18],39:[2,18],45:[2,18],47:[2,18],49:[2,18],50:[2,18],53:[2,18],55:[2,18],56:[2,18],61:[2,18],62:[2,18]},{5:[2,19],20:[2,19],23:[2,19],24:[2,19],25:[2,19],26:[2,19],27:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[1,48],35:[2,19],37:[2,19],39:[2,19],45:[2,19],47:[2,19],49:[2,19],50:[2,19],53:[2,19],55:[2,19],56:[2,19],61:[2,19],62:[2,19]},{5:[2,20],20:[2,20],23:[2,20],24:[2,20],25:[2,20],26:[2,20],27:[2,20],28:[2,20],29:[2,20],30:[2,20],31:[1,48],35:[2,20],37:[2,20],39:[2,20],45:[2,20],47:[2,20],49:[2,20],50:[2,20],53:[2,20],55:[2,20],56:[2,20],61:[2,20],62:[2,20]},{5:[2,21],20:[2,21],23:[2,21],24:[2,21],25:[2,21],26:[2,21],27:[2,21],28:[2,21],29:[2,21],30:[2,21],31:[1,48],35:[2,21],37:[2,21],39:[2,21],45:[2,21],47:[2,21],49:[2,21],50:[2,21],53:[2,21],55:[2,21],56:[2,21],61:[2,21],62:[2,21]},{5:[2,22],20:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],27:[2,22],28:[2,22],29:[2,22],30:[2,22],31:[1,48],35:[2,22],37:[2,22],39:[2,22],45:[2,22],47:[2,22],49:[2,22],50:[2,22],53:[2,22],55:[2,22],56:[2,22],61:[2,22],62:[2,22]},{5:[2,23],20:[2,23],23:[2,23],24:[2,23],25:[2,23],26:[2,23],27:[2,23],28:[2,23],29:[2,23],30:[2,23],31:[1,48],35:[2,23],37:[2,23],39:[2,23],45:[2,23],47:[2,23],49:[2,23],50:[2,23],53:[2,23],55:[2,23],56:[2,23],61:[2,23],62:[2,23]},{5:[2,24],20:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[1,48],35:[2,24],37:[2,24],39:[2,24],45:[2,24],47:[2,24],49:[2,24],50:[2,24],53:[2,24],55:[2,24],56:[2,24],61:[2,24],62:[2,24]},{5:[2,25],20:[2,25],23:[2,25],24:[2,25],25:[2,25],26:[2,25],27:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[2,25],35:[2,25],37:[2,25],39:[2,25],45:[2,25],47:[2,25],49:[2,25],50:[2,25],53:[2,25],55:[2,25],56:[2,25],61:[2,25],62:[2,25]},{16:[1,96]},{5:[2,8],20:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],27:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],35:[2,8],37:[2,8],39:[2,8],41:[2,8],45:[2,8],47:[2,8],49:[2,8],50:[2,8],53:[2,8],55:[2,8],56:[2,8],61:[2,8],62:[2,8]},{5:[2,10],20:[2,10],23:[2,10],24:[2,10],25:[2,10],26:[2,10],27:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],35:[2,10],37:[2,10],39:[2,10],45:[2,10],47:[2,10],49:[2,10],50:[2,10],53:[2,10],55:[2,10],56:[2,10],61:[2,10],62:[2,10]},{20:[1,97],35:[1,87]},{5:[2,26],20:[2,26],23:[2,26],24:[2,26],25:[2,26],26:[2,26],27:[2,26],28:[2,26],29:[2,26],30:[2,26],31:[2,26],35:[2,26],37:[2,26],39:[2,26],45:[2,26],47:[2,26],49:[2,26],50:[2,26],53:[2,26],55:[2,26],56:[2,26],61:[2,26],62:[2,26]},{5:[2,30],20:[2,30],23:[2,30],24:[2,30],25:[2,30],26:[2,30],27:[2,30],28:[2,30],29:[2,30],30:[2,30],31:[2,30],35:[2,30],37:[2,30],39:[2,30],45:[2,30],47:[2,30],49:[2,30],50:[2,30],53:[2,30],55:[2,30],56:[2,30],61:[2,30],62:[2,30]},{11:55,12:[1,20],32:98},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:99,19:[1,19],22:17,36:[1,24]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:100,19:[1,19],22:17,36:[1,24]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:101,19:[1,19],22:17,36:[1,24]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:62,19:[1,19],22:17,36:[1,24],48:102},{5:[2,48],20:[2,48],35:[2,48]},{5:[2,49],20:[2,49],35:[2,49]},{5:[2,54],20:[2,54],23:[1,40],24:[1,41],25:[1,42],26:[1,43],27:[1,44],28:[1,45],29:[1,46],30:[1,47],31:[1,48],53:[2,54],61:[2,54]},{46:[1,103]},{39:[1,66]},{39:[1,104]},{5:[2,42],20:[2,42],45:[2,42],46:[2,42],47:[2,42],53:[2,42],56:[2,42],61:[2,42]},{5:[2,7],17:[1,105],20:[2,7],23:[2,7],24:[2,7],25:[2,7],26:[2,7],27:[2,7],28:[2,7],29:[2,7],30:[2,7],31:[2,7],35:[2,7],37:[2,7],39:[2,7],41:[2,7],45:[2,7],47:[2,7],49:[2,7],50:[2,7],53:[2,7],55:[2,7],56:[2,7],61:[2,7],62:[2,7]},{5:[2,11],20:[2,11],23:[2,11],24:[2,11],25:[2,11],26:[2,11],27:[2,11],28:[2,11],29:[2,11],30:[2,11],31:[2,11],35:[2,11],37:[2,11],39:[2,11],45:[2,11],47:[2,11],49:[2,11],50:[2,11],53:[2,11],55:[2,11],56:[2,11],61:[2,11],62:[2,11]},{35:[2,29],37:[2,29]},{23:[1,40],24:[1,41],25:[1,42],26:[1,43],27:[1,44],28:[1,45],29:[1,46],30:[1,47],31:[1,48],35:[2,27],37:[2,27]},{5:[2,59],20:[2,59],23:[1,40],24:[1,41],25:[1,42],26:[1,43],27:[1,44],28:[1,45],29:[1,46],30:[1,47],31:[1,48],53:[2,59]},{5:[2,32],20:[2,32],23:[1,40],24:[1,41],25:[1,42],26:[1,43],27:[1,44],28:[1,45],29:[1,46],30:[1,47],31:[1,48],35:[2,32],53:[2,32],62:[2,32]},{5:[2,50],20:[2,50],35:[2,50]},{6:15,7:[1,21],8:16,9:[1,22],10:[1,23],11:14,12:[1,20],13:59,15:[1,18],18:106,19:[1,19],22:17,36:[1,24]},{12:[1,107]},{11:35,12:[1,20],13:108},{5:[2,45],20:[2,45],23:[1,40],24:[1,41],25:[1,42],26:[1,43],27:[1,44],28:[1,45],29:[1,46],30:[1,47],31:[1,48],45:[2,45],47:[2,45],53:[2,45],56:[2,45],61:[2,45]},{5:[2,46],20:[2,46],45:[2,46],47:[2,46],53:[2,46],56:[2,46],61:[2,46]},{5:[2,9],20:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],27:[2,9],28:[2,9],29:[2,9],30:[2,9],31:[2,9],35:[2,9],37:[2,9],39:[2,9],41:[2,9],45:[2,9],47:[2,9],49:[2,9],50:[2,9],53:[2,9],55:[2,9],56:[2,9],61:[2,9],62:[2,9]}],
defaultActions: {6:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 41
break;
case 1:return 17
break;
case 2:return 19
break;
case 3:return 20
break;
case 4:return 14
break;
case 5:return 16
break;
case 6:return 35
break;
case 7:return 30
break;
case 8:return 29
break;
case 9:return 28
break;
case 10:return 27
break;
case 11:return 26
break;
case 12:return 25
break;
case 13:return 31
break;
case 14:return 36
break;
case 15:return 37
break;
case 16:return 33
break;
case 17:return 58
break;
case 18:return 59
break;
case 19:return 55
break;
case 20:return 56
break;
case 21:return 61
break;
case 22:return 62
break;
case 23:return 53
break;
case 24:return 49
break;
case 25:return 50
break;
case 26:return 39
break;
case 27:return 45
break;
case 28:return 46
break;
case 29:return 47
break;
case 30:return 23
break;
case 31:return 24
break;
case 32:return 9
break;
case 33:return 10
break;
case 34:return 15
break;
case 35:return 12
break;
case 36:return 7
break;
case 37:return 5
break;
case 38:/* ignore whitespace */
break;
case 39:return 'INVALID'
break;
}
},
rules: [/^(?:\.\s)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:\+)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:SELECT TOP)/,/^(?:SELECT)/,/^(?:FROM)/,/^(?:WHERE)/,/^(?:GROUP BY)/,/^(?:HAVING)/,/^(?:ORDER BY)/,/^(?:ASC)/,/^(?:DESC)/,/^(?:AS)/,/^(?:JOIN)/,/^(?:ON)/,/^(?:OVER)/,/^(?:AND)/,/^(?:OR)/,/^(?:true)/,/^(?:false)/,/^(?:[0-9.-]+)/,/^(?:[@A-Za-z0-9_*]+)/,/^(?:'[^']+')/,/^(?:$)/,/^(?:\s+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}