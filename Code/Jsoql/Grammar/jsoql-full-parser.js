/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"Stmt":4,"EOF":5,"Quoted":6,"Quotation":7,"DoubleQuotation":8,"Boolean":9,"True":10,"False":11,"Identifier":12,"PlainIdentifier":13,"Index":14,"Number":15,"Property":16,"*":17,"[":18,"]":19,".":20,"WhenThenList":21,"WHEN":22,"Expression":23,"THEN":24,"CaseExpression":25,"CASE":26,"END":27,"ELSE":28,"(":29,")":30,"ExpressionList":31,"Object":32,"IS":33,"Null":34,"Undefined":35,"NOT":36,"IN":37,"AND":38,"OR":39,"=":40,"!=":41,"<":42,">":43,"<=":44,">=":45,"+":46,"-":47,"/":48,"KeyValue":49,":":50,"KeyValueList":51,",":52,"{":53,"}":54,"Selectable":55,"AS":56,"SelectList":57,"FromTarget":58,"AliasedFromTarget":59,"FromTargets":60,"JOIN":61,"ON":62,"OVER":63,"OrderByExpression":64,"ASC":65,"DESC":66,"OrderByList":67,"OrderByClause":68,"ORDERBY":69,"WhereClause":70,"WHERE":71,"FromClause":72,"FROM":73,"SelectClause":74,"SELECTTOP":75,"SELECT":76,"GroupByClause":77,"GROUPBY":78,"HAVING":79,"UNION":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"Quotation",8:"DoubleQuotation",10:"True",11:"False",13:"PlainIdentifier",15:"Number",17:"*",18:"[",19:"]",20:".",22:"WHEN",24:"THEN",26:"CASE",27:"END",28:"ELSE",29:"(",30:")",33:"IS",34:"Null",35:"Undefined",36:"NOT",37:"IN",38:"AND",39:"OR",40:"=",41:"!=",42:"<",43:">",44:"<=",45:">=",46:"+",47:"-",48:"/",50:":",52:",",53:"{",54:"}",56:"AS",61:"JOIN",62:"ON",63:"OVER",65:"ASC",66:"DESC",69:"ORDERBY",71:"WHERE",73:"FROM",75:"SELECTTOP",76:"SELECT",78:"GROUPBY",79:"HAVING",80:"UNION"},
productions_: [0,[3,2],[6,1],[6,1],[9,1],[9,1],[12,1],[14,1],[14,1],[16,1],[16,1],[16,4],[16,3],[16,6],[21,4],[21,5],[25,4],[25,3],[25,6],[25,5],[23,3],[23,4],[23,2],[23,3],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,3],[23,3],[23,3],[23,2],[23,5],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[49,3],[49,3],[51,1],[51,3],[32,3],[31,1],[31,3],[55,1],[55,3],[55,3],[55,1],[57,1],[57,3],[58,1],[58,1],[58,1],[58,3],[59,3],[60,1],[60,1],[60,5],[60,5],[64,1],[64,2],[64,2],[67,3],[67,1],[68,2],[70,2],[72,2],[74,3],[74,2],[77,2],[77,4],[4,2],[4,3],[4,3],[4,4],[4,3],[4,4],[4,4],[4,5],[4,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:this.$ = { Quoted: $$[$0].replace(/'/g, "")}
break;
case 3:this.$ = { Quoted: $$[$0].replace(/"/g, "")}
break;
case 4:this.$ = true
break;
case 5:this.$ = false
break;
case 8:this.$ = $$[$0].Quoted
break;
case 9:this.$ = { Property : '*' }
break;
case 10:this.$ = { Property: $$[$0]}
break;
case 11:this.$ = { Property: $$[$0-3], Index: $$[$0-1]}
break;
case 12:this.$ = { Property: $$[$0-2], Child: $$[$0]}
break;
case 13:this.$ = { Property: $$[$0-5], Index: $$[$0-3], Child: $$[$0]}
break;
case 14:this.$ = [{ When: $$[$0-2], Then: $$[$0] }]
break;
case 15:this.$ = $$[$0-4].concat([{ When: $$[$0-2], Then: $$[$0] }])
break;
case 16:this.$ = {Case:$$[$0-2],Whens:$$[$0-1]}
break;
case 17:this.$ = {Case:null,Whens:$$[$0-1]}
break;
case 18:this.$ = {Case:$$[$0-4],Whens:$$[$0-3],Else:$$[$0-1]}
break;
case 19:this.$ = {Case:null,Whens:$$[$0-3],Else:$$[$0-1]}
break;
case 20:this.$ = { Call: $$[$0-2], Args: []}
break;
case 21:this.$ = { Call: $$[$0-3], Args: $$[$0-1]}
break;
case 22:this.$ = []
break;
case 23:this.$ = $$[$0-1]
break;
case 29:this.$ = parseFloat($$[$0])
break;
case 30:this.$ = {SubQuery: $$[$0-1]}
break;
case 31:this.$ = { Call: "IsNull", Args: [$$[$0-2]] }
break;
case 32:this.$ = { Call: "IsUndefined", Args: [$$[$0-2]] }
break;
case 33:this.$ = { Call: "Not", Args: [$$[$0]] }
break;
case 34:this.$ = { Call: "In", Args: [$$[$0-4], $$[$0-1]]}
break;
case 35:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 36:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 37:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 38:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 39:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 40:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 41:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 42:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 43:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 44:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 45:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 46:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 47:this.$ = -$$[$0]
break;
case 48:this.$ = {Key: $$[$0-2], Value: $$[$0]}
break;
case 49:this.$ = {Key: $$[$0-2].Quoted, Value: $$[$0]}
break;
case 50:this.$ = [$$[$0]]
break;
case 51:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 52:this.$ = {KeyValues: $$[$0-1]}
break;
case 53:this.$ = [$$[$0]]
break;
case 54:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 55:this.$ = {Expression: $$[$0]}
break;
case 56:this.$ = { Expression: $$[$0-2], Alias: $$[$0]}
break;
case 57:this.$ = { Expression: $$[$0-2], Alias: $$[$0].Quoted}
break;
case 58:this.$ = { Expression: $$[$0].Value, Alias: $$[$0].Key}
break;
case 59:this.$ = [$$[$0]]
break;
case 60:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 64:this.$ = { SubQuery: $$[$0-1] }
break;
case 65:this.$ = {Target: $$[$0-2], Alias: $$[$0]}
break;
case 68:this.$ = { Left: $$[$0-4], Right: $$[$0-2], Expression: $$[$0]}
break;
case 69:this.$ = { Left: $$[$0-4], Over: $$[$0-2], Alias: $$[$0]}
break;
case 70: this.$ = {Expression: $$[$0], Asc: true}
break;
case 71:this.$ = {Expression: $$[$0-1], Asc: true}
break;
case 72:this.$ = {Expression: $$[$0-1], Asc: false}
break;
case 73:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 74:this.$ = [$$[$0]]
break;
case 75:this.$ = $$[$0]
break;
case 76:this.$ = $$[$0]
break;
case 77:this.$ = $$[$0]
break;
case 78:this.$ = { SelectList: $$[$0], Limit: $$[$0-1]}
break;
case 79:this.$ = { SelectList: $$[$0]}
break;
case 80:this.$ = { Groupings: $$[$0]}
break;
case 81:this.$ = { Groupings: $$[$0-2], Having: $$[$0]}
break;
case 82:this.$ = {Select:$$[$0-1],From:$$[$0],Positions:{Select:_$[$0-1],From:_$[$0]}}
break;
case 83:this.$ = {Select:$$[$0-2],From:$$[$0-1],Where:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],Where:_$[$0]}}
break;
case 84:this.$ = {Select:$$[$0-2],From:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],OrderBy:_$[$0]}}
break;
case 85:this.$ = {Select:$$[$0-3],From:$$[$0-2],Where:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-3],From:_$[$0-2],Where:_$[$0-1],OrderBy:_$[$0]}}
break;
case 86:this.$ = {Select:$$[$0-2],From:$$[$0-1],GroupBy:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],GroupBy:_$[$0]}}
break;
case 87:this.$ = {Select:$$[$0-3],From:$$[$0-2],Where:$$[$0-1],GroupBy:$$[$0],Positions:{Select:_$[$0-3],From:_$[$0-2],Where:_$[$0-1],GroupBy:_$[$0]}}
break;
case 88:this.$ = {Select:$$[$0-3],From:$$[$0-2],GroupBy:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-3],FromWhere:_$[$0-2],GroupBy:_$[$0-1],OrderBy:_$[$0]}}
break;
case 89:this.$ = {Select:$$[$0-4],From:$$[$0-3],Where:$$[$0-2],GroupBy:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-4],From:_$[$0-3],Where:_$[$0-2],GroupBy:_$[$0-1],OrderBy:_$[$0]}}
break;
case 90:{ $$[$0-2].Union = $$[$0]; this.$ = $$[$0-2] }
break;
}
},
table: [{3:1,4:2,74:3,75:[1,4],76:[1,5]},{1:[3]},{5:[1,6],80:[1,7]},{72:8,73:[1,9]},{15:[1,10]},{6:18,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:15,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:13,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],49:14,53:[1,32],55:12,57:11},{1:[2,1]},{4:34,74:3,75:[1,4],76:[1,5]},{5:[2,82],30:[2,82],68:36,69:[1,39],70:35,71:[1,38],77:37,78:[1,40],80:[2,82]},{6:45,7:[1,28],8:[1,29],12:48,13:[1,26],16:44,17:[1,27],29:[1,47],32:46,53:[1,32],58:42,59:43,60:41},{6:18,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:15,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:13,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],49:14,53:[1,32],55:12,57:49},{52:[1,50],73:[2,79]},{52:[2,59],73:[2,59]},{17:[1,65],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64],52:[2,55],56:[1,51],73:[2,55]},{52:[2,58],73:[2,58]},{17:[2,10],18:[1,68],20:[1,69],29:[1,66],33:[2,10],37:[2,10],38:[2,10],39:[2,10],40:[2,10],41:[2,10],42:[2,10],43:[2,10],44:[2,10],45:[2,10],46:[2,10],47:[2,10],48:[2,10],50:[1,67],52:[2,10],56:[2,10],73:[2,10]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],19:[1,70],23:72,25:21,26:[1,33],29:[1,23],31:71,32:20,36:[1,24],47:[1,25],53:[1,32]},{5:[2,24],17:[2,24],19:[2,24],22:[2,24],24:[2,24],27:[2,24],28:[2,24],30:[2,24],33:[2,24],37:[2,24],38:[2,24],39:[2,24],40:[2,24],41:[2,24],42:[2,24],43:[2,24],44:[2,24],45:[2,24],46:[2,24],47:[2,24],48:[2,24],52:[2,24],54:[2,24],56:[2,24],61:[2,24],63:[2,24],65:[2,24],66:[2,24],69:[2,24],71:[2,24],73:[2,24],78:[2,24],79:[2,24],80:[2,24]},{17:[2,25],33:[2,25],37:[2,25],38:[2,25],39:[2,25],40:[2,25],41:[2,25],42:[2,25],43:[2,25],44:[2,25],45:[2,25],46:[2,25],47:[2,25],48:[2,25],50:[1,75],52:[2,25],56:[2,25],73:[2,25]},{5:[2,26],17:[2,26],19:[2,26],22:[2,26],24:[2,26],27:[2,26],28:[2,26],30:[2,26],33:[2,26],37:[2,26],38:[2,26],39:[2,26],40:[2,26],41:[2,26],42:[2,26],43:[2,26],44:[2,26],45:[2,26],46:[2,26],47:[2,26],48:[2,26],52:[2,26],54:[2,26],56:[2,26],61:[2,26],63:[2,26],65:[2,26],66:[2,26],69:[2,26],71:[2,26],73:[2,26],78:[2,26],79:[2,26],80:[2,26]},{5:[2,27],17:[2,27],19:[2,27],22:[2,27],24:[2,27],27:[2,27],28:[2,27],30:[2,27],33:[2,27],37:[2,27],38:[2,27],39:[2,27],40:[2,27],41:[2,27],42:[2,27],43:[2,27],44:[2,27],45:[2,27],46:[2,27],47:[2,27],48:[2,27],52:[2,27],54:[2,27],56:[2,27],61:[2,27],63:[2,27],65:[2,27],66:[2,27],69:[2,27],71:[2,27],73:[2,27],78:[2,27],79:[2,27],80:[2,27]},{5:[2,28],17:[2,28],19:[2,28],22:[2,28],24:[2,28],27:[2,28],28:[2,28],30:[2,28],33:[2,28],37:[2,28],38:[2,28],39:[2,28],40:[2,28],41:[2,28],42:[2,28],43:[2,28],44:[2,28],45:[2,28],46:[2,28],47:[2,28],48:[2,28],52:[2,28],54:[2,28],56:[2,28],61:[2,28],63:[2,28],65:[2,28],66:[2,28],69:[2,28],71:[2,28],73:[2,28],78:[2,28],79:[2,28],80:[2,28]},{5:[2,29],17:[2,29],19:[2,29],22:[2,29],24:[2,29],27:[2,29],28:[2,29],30:[2,29],33:[2,29],37:[2,29],38:[2,29],39:[2,29],40:[2,29],41:[2,29],42:[2,29],43:[2,29],44:[2,29],45:[2,29],46:[2,29],47:[2,29],48:[2,29],52:[2,29],54:[2,29],56:[2,29],61:[2,29],63:[2,29],65:[2,29],66:[2,29],69:[2,29],71:[2,29],73:[2,29],78:[2,29],79:[2,29],80:[2,29]},{4:76,74:3,75:[1,4],76:[1,5]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:77,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:78,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{5:[2,6],17:[2,6],18:[2,6],19:[2,6],20:[2,6],22:[2,6],24:[2,6],27:[2,6],28:[2,6],29:[2,6],30:[2,6],33:[2,6],37:[2,6],38:[2,6],39:[2,6],40:[2,6],41:[2,6],42:[2,6],43:[2,6],44:[2,6],45:[2,6],46:[2,6],47:[2,6],48:[2,6],50:[2,6],52:[2,6],54:[2,6],56:[2,6],61:[2,6],62:[2,6],63:[2,6],65:[2,6],66:[2,6],69:[2,6],71:[2,6],73:[2,6],78:[2,6],79:[2,6],80:[2,6]},{5:[2,9],17:[2,9],19:[2,9],22:[2,9],24:[2,9],27:[2,9],28:[2,9],30:[2,9],33:[2,9],37:[2,9],38:[2,9],39:[2,9],40:[2,9],41:[2,9],42:[2,9],43:[2,9],44:[2,9],45:[2,9],46:[2,9],47:[2,9],48:[2,9],52:[2,9],54:[2,9],56:[2,9],61:[2,9],63:[2,9],65:[2,9],66:[2,9],69:[2,9],71:[2,9],73:[2,9],78:[2,9],79:[2,9],80:[2,9]},{5:[2,2],17:[2,2],19:[2,2],22:[2,2],24:[2,2],27:[2,2],28:[2,2],30:[2,2],33:[2,2],37:[2,2],38:[2,2],39:[2,2],40:[2,2],41:[2,2],42:[2,2],43:[2,2],44:[2,2],45:[2,2],46:[2,2],47:[2,2],48:[2,2],50:[2,2],52:[2,2],54:[2,2],56:[2,2],61:[2,2],63:[2,2],65:[2,2],66:[2,2],69:[2,2],71:[2,2],73:[2,2],78:[2,2],79:[2,2],80:[2,2]},{5:[2,3],17:[2,3],19:[2,3],22:[2,3],24:[2,3],27:[2,3],28:[2,3],30:[2,3],33:[2,3],37:[2,3],38:[2,3],39:[2,3],40:[2,3],41:[2,3],42:[2,3],43:[2,3],44:[2,3],45:[2,3],46:[2,3],47:[2,3],48:[2,3],50:[2,3],52:[2,3],54:[2,3],56:[2,3],61:[2,3],63:[2,3],65:[2,3],66:[2,3],69:[2,3],71:[2,3],73:[2,3],78:[2,3],79:[2,3],80:[2,3]},{5:[2,4],17:[2,4],19:[2,4],22:[2,4],24:[2,4],27:[2,4],28:[2,4],30:[2,4],33:[2,4],37:[2,4],38:[2,4],39:[2,4],40:[2,4],41:[2,4],42:[2,4],43:[2,4],44:[2,4],45:[2,4],46:[2,4],47:[2,4],48:[2,4],52:[2,4],54:[2,4],56:[2,4],61:[2,4],63:[2,4],65:[2,4],66:[2,4],69:[2,4],71:[2,4],73:[2,4],78:[2,4],79:[2,4],80:[2,4]},{5:[2,5],17:[2,5],19:[2,5],22:[2,5],24:[2,5],27:[2,5],28:[2,5],30:[2,5],33:[2,5],37:[2,5],38:[2,5],39:[2,5],40:[2,5],41:[2,5],42:[2,5],43:[2,5],44:[2,5],45:[2,5],46:[2,5],47:[2,5],48:[2,5],52:[2,5],54:[2,5],56:[2,5],61:[2,5],63:[2,5],65:[2,5],66:[2,5],69:[2,5],71:[2,5],73:[2,5],78:[2,5],79:[2,5],80:[2,5]},{6:82,7:[1,28],8:[1,29],12:81,13:[1,26],49:80,51:79},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],21:84,22:[1,85],23:83,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{5:[2,90],30:[2,90],80:[2,90]},{5:[2,83],30:[2,83],68:86,69:[1,39],77:87,78:[1,40],80:[2,83]},{5:[2,84],30:[2,84],80:[2,84]},{5:[2,86],30:[2,86],68:88,69:[1,39],80:[2,86]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:89,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:92,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32],64:91,67:90},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:72,25:21,26:[1,33],29:[1,23],31:93,32:20,36:[1,24],47:[1,25],53:[1,32]},{5:[2,77],30:[2,77],61:[1,94],63:[1,95],69:[2,77],71:[2,77],78:[2,77],80:[2,77]},{5:[2,66],30:[2,66],56:[1,96],61:[2,66],63:[2,66],69:[2,66],71:[2,66],78:[2,66],80:[2,66]},{5:[2,67],30:[2,67],61:[2,67],63:[2,67],69:[2,67],71:[2,67],78:[2,67],80:[2,67]},{5:[2,61],30:[2,61],56:[2,61],61:[2,61],63:[2,61],69:[2,61],71:[2,61],78:[2,61],80:[2,61]},{5:[2,62],30:[2,62],56:[2,62],61:[2,62],63:[2,62],69:[2,62],71:[2,62],78:[2,62],80:[2,62]},{5:[2,63],30:[2,63],56:[2,63],61:[2,63],63:[2,63],69:[2,63],71:[2,63],78:[2,63],80:[2,63]},{4:97,74:3,75:[1,4],76:[1,5]},{5:[2,10],17:[2,10],18:[1,68],19:[2,10],20:[1,69],22:[2,10],24:[2,10],27:[2,10],28:[2,10],30:[2,10],33:[2,10],37:[2,10],38:[2,10],39:[2,10],40:[2,10],41:[2,10],42:[2,10],43:[2,10],44:[2,10],45:[2,10],46:[2,10],47:[2,10],48:[2,10],52:[2,10],54:[2,10],56:[2,10],61:[2,10],63:[2,10],65:[2,10],66:[2,10],69:[2,10],71:[2,10],73:[2,10],78:[2,10],79:[2,10],80:[2,10]},{52:[1,50],73:[2,78]},{6:18,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:15,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:13,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],49:14,53:[1,32],55:98},{6:100,7:[1,28],8:[1,29],12:99,13:[1,26]},{34:[1,101],35:[1,102]},{29:[1,103]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:104,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:105,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:106,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:107,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:108,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:109,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:110,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:111,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:112,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:113,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:114,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:115,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:72,25:21,26:[1,33],29:[1,23],30:[1,116],31:117,32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:118,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:121,7:[1,28],8:[1,29],14:119,15:[1,120]},{12:48,13:[1,26],16:122,17:[1,27]},{5:[2,22],17:[2,22],19:[2,22],22:[2,22],24:[2,22],27:[2,22],28:[2,22],30:[2,22],33:[2,22],37:[2,22],38:[2,22],39:[2,22],40:[2,22],41:[2,22],42:[2,22],43:[2,22],44:[2,22],45:[2,22],46:[2,22],47:[2,22],48:[2,22],52:[2,22],54:[2,22],56:[2,22],61:[2,22],63:[2,22],65:[2,22],66:[2,22],69:[2,22],71:[2,22],73:[2,22],78:[2,22],79:[2,22],80:[2,22]},{19:[1,123],52:[1,124]},{5:[2,53],17:[1,65],19:[2,53],30:[2,53],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64],52:[2,53],69:[2,53],79:[2,53],80:[2,53]},{5:[2,10],17:[2,10],18:[1,68],19:[2,10],20:[1,69],22:[2,10],24:[2,10],27:[2,10],28:[2,10],29:[1,66],30:[2,10],33:[2,10],37:[2,10],38:[2,10],39:[2,10],40:[2,10],41:[2,10],42:[2,10],43:[2,10],44:[2,10],45:[2,10],46:[2,10],47:[2,10],48:[2,10],52:[2,10],54:[2,10],56:[2,10],61:[2,10],63:[2,10],65:[2,10],66:[2,10],69:[2,10],71:[2,10],73:[2,10],78:[2,10],79:[2,10],80:[2,10]},{5:[2,25],17:[2,25],19:[2,25],22:[2,25],24:[2,25],27:[2,25],28:[2,25],30:[2,25],33:[2,25],37:[2,25],38:[2,25],39:[2,25],40:[2,25],41:[2,25],42:[2,25],43:[2,25],44:[2,25],45:[2,25],46:[2,25],47:[2,25],48:[2,25],52:[2,25],54:[2,25],56:[2,25],61:[2,25],63:[2,25],65:[2,25],66:[2,25],69:[2,25],71:[2,25],73:[2,25],78:[2,25],79:[2,25],80:[2,25]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:125,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{30:[1,126],80:[1,7]},{5:[2,33],17:[1,65],19:[2,33],22:[2,33],24:[2,33],27:[2,33],28:[2,33],30:[2,33],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64],52:[2,33],54:[2,33],56:[2,33],61:[2,33],63:[2,33],65:[2,33],66:[2,33],69:[2,33],71:[2,33],73:[2,33],78:[2,33],79:[2,33],80:[2,33]},{5:[2,47],17:[1,65],19:[2,47],22:[2,47],24:[2,47],27:[2,47],28:[2,47],30:[2,47],33:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[2,47],42:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[1,64],52:[2,47],54:[2,47],56:[2,47],61:[2,47],63:[2,47],65:[2,47],66:[2,47],69:[2,47],71:[2,47],73:[2,47],78:[2,47],79:[2,47],80:[2,47]},{52:[1,128],54:[1,127]},{52:[2,50],54:[2,50]},{50:[1,67]},{50:[1,75]},{17:[1,65],21:129,22:[1,85],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64]},{22:[1,132],27:[1,130],28:[1,131]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:133,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{5:[2,85],30:[2,85],80:[2,85]},{5:[2,87],30:[2,87],68:134,69:[1,39],80:[2,87]},{5:[2,88],30:[2,88],80:[2,88]},{5:[2,76],17:[1,65],30:[2,76],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64],69:[2,76],78:[2,76],80:[2,76]},{5:[2,75],30:[2,75],52:[1,135],80:[2,75]},{5:[2,74],30:[2,74],52:[2,74],80:[2,74]},{5:[2,70],17:[1,65],30:[2,70],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64],52:[2,70],65:[1,136],66:[1,137],80:[2,70]},{5:[2,80],30:[2,80],52:[1,124],69:[2,80],79:[1,138],80:[2,80]},{6:45,7:[1,28],8:[1,29],12:48,13:[1,26],16:44,17:[1,27],29:[1,47],32:46,53:[1,32],58:140,59:139},{12:48,13:[1,26],16:141,17:[1,27]},{12:142,13:[1,26]},{30:[1,143],80:[1,7]},{52:[2,60],73:[2,60]},{52:[2,56],73:[2,56]},{52:[2,57],73:[2,57]},{5:[2,31],17:[2,31],19:[2,31],22:[2,31],24:[2,31],27:[2,31],28:[2,31],30:[2,31],33:[2,31],37:[2,31],38:[2,31],39:[2,31],40:[2,31],41:[2,31],42:[2,31],43:[2,31],44:[2,31],45:[2,31],46:[2,31],47:[2,31],48:[2,31],52:[2,31],54:[2,31],56:[2,31],61:[2,31],63:[2,31],65:[2,31],66:[2,31],69:[2,31],71:[2,31],73:[2,31],78:[2,31],79:[2,31],80:[2,31]},{5:[2,32],17:[2,32],19:[2,32],22:[2,32],24:[2,32],27:[2,32],28:[2,32],30:[2,32],33:[2,32],37:[2,32],38:[2,32],39:[2,32],40:[2,32],41:[2,32],42:[2,32],43:[2,32],44:[2,32],45:[2,32],46:[2,32],47:[2,32],48:[2,32],52:[2,32],54:[2,32],56:[2,32],61:[2,32],63:[2,32],65:[2,32],66:[2,32],69:[2,32],71:[2,32],73:[2,32],78:[2,32],79:[2,32],80:[2,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:72,25:21,26:[1,33],29:[1,23],31:144,32:20,36:[1,24],47:[1,25],53:[1,32]},{5:[2,35],17:[1,65],19:[2,35],22:[2,35],24:[2,35],27:[2,35],28:[2,35],30:[2,35],33:[2,35],37:[2,35],38:[2,35],39:[2,35],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64],52:[2,35],54:[2,35],56:[2,35],61:[2,35],63:[2,35],65:[2,35],66:[2,35],69:[2,35],71:[2,35],73:[2,35],78:[2,35],79:[2,35],80:[2,35]},{5:[2,36],17:[1,65],19:[2,36],22:[2,36],24:[2,36],27:[2,36],28:[2,36],30:[2,36],33:[2,36],37:[2,36],38:[2,36],39:[2,36],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64],52:[2,36],54:[2,36],56:[2,36],61:[2,36],63:[2,36],65:[2,36],66:[2,36],69:[2,36],71:[2,36],73:[2,36],78:[2,36],79:[2,36],80:[2,36]},{5:[2,37],17:[1,65],19:[2,37],22:[2,37],24:[2,37],27:[2,37],28:[2,37],30:[2,37],33:[2,37],37:[2,37],38:[2,37],39:[2,37],40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[2,37],45:[2,37],46:[1,62],47:[1,63],48:[1,64],52:[2,37],54:[2,37],56:[2,37],61:[2,37],63:[2,37],65:[2,37],66:[2,37],69:[2,37],71:[2,37],73:[2,37],78:[2,37],79:[2,37],80:[2,37]},{5:[2,38],17:[1,65],19:[2,38],22:[2,38],24:[2,38],27:[2,38],28:[2,38],30:[2,38],33:[2,38],37:[2,38],38:[2,38],39:[2,38],40:[2,38],41:[2,38],42:[2,38],43:[2,38],44:[2,38],45:[2,38],46:[1,62],47:[1,63],48:[1,64],52:[2,38],54:[2,38],56:[2,38],61:[2,38],63:[2,38],65:[2,38],66:[2,38],69:[2,38],71:[2,38],73:[2,38],78:[2,38],79:[2,38],80:[2,38]},{5:[2,39],17:[1,65],19:[2,39],22:[2,39],24:[2,39],27:[2,39],28:[2,39],30:[2,39],33:[2,39],37:[2,39],38:[2,39],39:[2,39],40:[2,39],41:[2,39],42:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[1,62],47:[1,63],48:[1,64],52:[2,39],54:[2,39],56:[2,39],61:[2,39],63:[2,39],65:[2,39],66:[2,39],69:[2,39],71:[2,39],73:[2,39],78:[2,39],79:[2,39],80:[2,39]},{5:[2,40],17:[1,65],19:[2,40],22:[2,40],24:[2,40],27:[2,40],28:[2,40],30:[2,40],33:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[2,40],44:[2,40],45:[2,40],46:[1,62],47:[1,63],48:[1,64],52:[2,40],54:[2,40],56:[2,40],61:[2,40],63:[2,40],65:[2,40],66:[2,40],69:[2,40],71:[2,40],73:[2,40],78:[2,40],79:[2,40],80:[2,40]},{5:[2,41],17:[1,65],19:[2,41],22:[2,41],24:[2,41],27:[2,41],28:[2,41],30:[2,41],33:[2,41],37:[2,41],38:[2,41],39:[2,41],40:[2,41],41:[2,41],42:[2,41],43:[2,41],44:[2,41],45:[2,41],46:[1,62],47:[1,63],48:[1,64],52:[2,41],54:[2,41],56:[2,41],61:[2,41],63:[2,41],65:[2,41],66:[2,41],69:[2,41],71:[2,41],73:[2,41],78:[2,41],79:[2,41],80:[2,41]},{5:[2,42],17:[1,65],19:[2,42],22:[2,42],24:[2,42],27:[2,42],28:[2,42],30:[2,42],33:[2,42],37:[2,42],38:[2,42],39:[2,42],40:[2,42],41:[2,42],42:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[1,62],47:[1,63],48:[1,64],52:[2,42],54:[2,42],56:[2,42],61:[2,42],63:[2,42],65:[2,42],66:[2,42],69:[2,42],71:[2,42],73:[2,42],78:[2,42],79:[2,42],80:[2,42]},{5:[2,43],17:[1,65],19:[2,43],22:[2,43],24:[2,43],27:[2,43],28:[2,43],30:[2,43],33:[2,43],37:[2,43],38:[2,43],39:[2,43],40:[2,43],41:[2,43],42:[2,43],43:[2,43],44:[2,43],45:[2,43],46:[2,43],47:[2,43],48:[1,64],52:[2,43],54:[2,43],56:[2,43],61:[2,43],63:[2,43],65:[2,43],66:[2,43],69:[2,43],71:[2,43],73:[2,43],78:[2,43],79:[2,43],80:[2,43]},{5:[2,44],17:[1,65],19:[2,44],22:[2,44],24:[2,44],27:[2,44],28:[2,44],30:[2,44],33:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],42:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[1,64],52:[2,44],54:[2,44],56:[2,44],61:[2,44],63:[2,44],65:[2,44],66:[2,44],69:[2,44],71:[2,44],73:[2,44],78:[2,44],79:[2,44],80:[2,44]},{5:[2,45],17:[2,45],19:[2,45],22:[2,45],24:[2,45],27:[2,45],28:[2,45],30:[2,45],33:[2,45],37:[2,45],38:[2,45],39:[2,45],40:[2,45],41:[2,45],42:[2,45],43:[2,45],44:[2,45],45:[2,45],46:[2,45],47:[2,45],48:[2,45],52:[2,45],54:[2,45],56:[2,45],61:[2,45],63:[2,45],65:[2,45],66:[2,45],69:[2,45],71:[2,45],73:[2,45],78:[2,45],79:[2,45],80:[2,45]},{5:[2,46],17:[2,46],19:[2,46],22:[2,46],24:[2,46],27:[2,46],28:[2,46],30:[2,46],33:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],41:[2,46],42:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46],52:[2,46],54:[2,46],56:[2,46],61:[2,46],63:[2,46],65:[2,46],66:[2,46],69:[2,46],71:[2,46],73:[2,46],78:[2,46],79:[2,46],80:[2,46]},{5:[2,20],17:[2,20],19:[2,20],22:[2,20],24:[2,20],27:[2,20],28:[2,20],30:[2,20],33:[2,20],37:[2,20],38:[2,20],39:[2,20],40:[2,20],41:[2,20],42:[2,20],43:[2,20],44:[2,20],45:[2,20],46:[2,20],47:[2,20],48:[2,20],52:[2,20],54:[2,20],56:[2,20],61:[2,20],63:[2,20],65:[2,20],66:[2,20],69:[2,20],71:[2,20],73:[2,20],78:[2,20],79:[2,20],80:[2,20]},{30:[1,145],52:[1,124]},{17:[1,65],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64],52:[2,48],54:[2,48],73:[2,48]},{19:[1,146]},{19:[2,7]},{19:[2,8]},{5:[2,12],17:[2,12],19:[2,12],22:[2,12],24:[2,12],27:[2,12],28:[2,12],30:[2,12],33:[2,12],37:[2,12],38:[2,12],39:[2,12],40:[2,12],41:[2,12],42:[2,12],43:[2,12],44:[2,12],45:[2,12],46:[2,12],47:[2,12],48:[2,12],52:[2,12],54:[2,12],56:[2,12],61:[2,12],63:[2,12],65:[2,12],66:[2,12],69:[2,12],71:[2,12],73:[2,12],78:[2,12],79:[2,12],80:[2,12]},{5:[2,23],17:[2,23],19:[2,23],22:[2,23],24:[2,23],27:[2,23],28:[2,23],30:[2,23],33:[2,23],37:[2,23],38:[2,23],39:[2,23],40:[2,23],41:[2,23],42:[2,23],43:[2,23],44:[2,23],45:[2,23],46:[2,23],47:[2,23],48:[2,23],52:[2,23],54:[2,23],56:[2,23],61:[2,23],63:[2,23],65:[2,23],66:[2,23],69:[2,23],71:[2,23],73:[2,23],78:[2,23],79:[2,23],80:[2,23]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:147,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{17:[1,65],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64],52:[2,49],54:[2,49],73:[2,49]},{5:[2,30],17:[2,30],19:[2,30],22:[2,30],24:[2,30],27:[2,30],28:[2,30],30:[2,30],33:[2,30],37:[2,30],38:[2,30],39:[2,30],40:[2,30],41:[2,30],42:[2,30],43:[2,30],44:[2,30],45:[2,30],46:[2,30],47:[2,30],48:[2,30],52:[2,30],54:[2,30],56:[2,30],61:[2,30],63:[2,30],65:[2,30],66:[2,30],69:[2,30],71:[2,30],73:[2,30],78:[2,30],79:[2,30],80:[2,30]},{5:[2,52],17:[2,52],19:[2,52],22:[2,52],24:[2,52],27:[2,52],28:[2,52],30:[2,52],33:[2,52],37:[2,52],38:[2,52],39:[2,52],40:[2,52],41:[2,52],42:[2,52],43:[2,52],44:[2,52],45:[2,52],46:[2,52],47:[2,52],48:[2,52],52:[2,52],54:[2,52],56:[2,52],61:[2,52],63:[2,52],65:[2,52],66:[2,52],69:[2,52],71:[2,52],73:[2,52],78:[2,52],79:[2,52],80:[2,52]},{6:82,7:[1,28],8:[1,29],12:81,13:[1,26],49:148},{22:[1,132],27:[1,149],28:[1,150]},{5:[2,17],17:[2,17],19:[2,17],22:[2,17],24:[2,17],27:[2,17],28:[2,17],30:[2,17],33:[2,17],37:[2,17],38:[2,17],39:[2,17],40:[2,17],41:[2,17],42:[2,17],43:[2,17],44:[2,17],45:[2,17],46:[2,17],47:[2,17],48:[2,17],52:[2,17],54:[2,17],56:[2,17],61:[2,17],63:[2,17],65:[2,17],66:[2,17],69:[2,17],71:[2,17],73:[2,17],78:[2,17],79:[2,17],80:[2,17]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:151,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:152,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{17:[1,65],24:[1,153],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64]},{5:[2,89],30:[2,89],80:[2,89]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:92,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32],64:154},{5:[2,71],30:[2,71],52:[2,71],80:[2,71]},{5:[2,72],30:[2,72],52:[2,72],80:[2,72]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:155,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{62:[1,156]},{56:[1,96]},{56:[1,157]},{5:[2,65],30:[2,65],61:[2,65],62:[2,65],63:[2,65],69:[2,65],71:[2,65],78:[2,65],80:[2,65]},{5:[2,64],30:[2,64],56:[2,64],61:[2,64],63:[2,64],69:[2,64],71:[2,64],78:[2,64],80:[2,64]},{30:[1,158],52:[1,124]},{5:[2,21],17:[2,21],19:[2,21],22:[2,21],24:[2,21],27:[2,21],28:[2,21],30:[2,21],33:[2,21],37:[2,21],38:[2,21],39:[2,21],40:[2,21],41:[2,21],42:[2,21],43:[2,21],44:[2,21],45:[2,21],46:[2,21],47:[2,21],48:[2,21],52:[2,21],54:[2,21],56:[2,21],61:[2,21],63:[2,21],65:[2,21],66:[2,21],69:[2,21],71:[2,21],73:[2,21],78:[2,21],79:[2,21],80:[2,21]},{5:[2,11],17:[2,11],19:[2,11],20:[1,159],22:[2,11],24:[2,11],27:[2,11],28:[2,11],30:[2,11],33:[2,11],37:[2,11],38:[2,11],39:[2,11],40:[2,11],41:[2,11],42:[2,11],43:[2,11],44:[2,11],45:[2,11],46:[2,11],47:[2,11],48:[2,11],52:[2,11],54:[2,11],56:[2,11],61:[2,11],63:[2,11],65:[2,11],66:[2,11],69:[2,11],71:[2,11],73:[2,11],78:[2,11],79:[2,11],80:[2,11]},{5:[2,54],17:[1,65],19:[2,54],30:[2,54],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64],52:[2,54],69:[2,54],79:[2,54],80:[2,54]},{52:[2,51],54:[2,51]},{5:[2,16],17:[2,16],19:[2,16],22:[2,16],24:[2,16],27:[2,16],28:[2,16],30:[2,16],33:[2,16],37:[2,16],38:[2,16],39:[2,16],40:[2,16],41:[2,16],42:[2,16],43:[2,16],44:[2,16],45:[2,16],46:[2,16],47:[2,16],48:[2,16],52:[2,16],54:[2,16],56:[2,16],61:[2,16],63:[2,16],65:[2,16],66:[2,16],69:[2,16],71:[2,16],73:[2,16],78:[2,16],79:[2,16],80:[2,16]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:160,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{17:[1,65],27:[1,161],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64]},{17:[1,65],24:[1,162],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:163,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{5:[2,73],30:[2,73],52:[2,73],80:[2,73]},{5:[2,81],17:[1,65],30:[2,81],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64],69:[2,81],80:[2,81]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:164,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{13:[1,165]},{5:[2,34],17:[2,34],19:[2,34],22:[2,34],24:[2,34],27:[2,34],28:[2,34],30:[2,34],33:[2,34],37:[2,34],38:[2,34],39:[2,34],40:[2,34],41:[2,34],42:[2,34],43:[2,34],44:[2,34],45:[2,34],46:[2,34],47:[2,34],48:[2,34],52:[2,34],54:[2,34],56:[2,34],61:[2,34],63:[2,34],65:[2,34],66:[2,34],69:[2,34],71:[2,34],73:[2,34],78:[2,34],79:[2,34],80:[2,34]},{12:48,13:[1,26],16:166,17:[1,27]},{17:[1,65],27:[1,167],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64]},{5:[2,19],17:[2,19],19:[2,19],22:[2,19],24:[2,19],27:[2,19],28:[2,19],30:[2,19],33:[2,19],37:[2,19],38:[2,19],39:[2,19],40:[2,19],41:[2,19],42:[2,19],43:[2,19],44:[2,19],45:[2,19],46:[2,19],47:[2,19],48:[2,19],52:[2,19],54:[2,19],56:[2,19],61:[2,19],63:[2,19],65:[2,19],66:[2,19],69:[2,19],71:[2,19],73:[2,19],78:[2,19],79:[2,19],80:[2,19]},{6:74,7:[1,28],8:[1,29],9:19,10:[1,30],11:[1,31],12:73,13:[1,26],15:[1,22],16:17,17:[1,27],18:[1,16],23:168,25:21,26:[1,33],29:[1,23],32:20,36:[1,24],47:[1,25],53:[1,32]},{17:[1,65],22:[2,14],27:[2,14],28:[2,14],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64]},{5:[2,68],17:[1,65],30:[2,68],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64],61:[2,68],63:[2,68],69:[2,68],71:[2,68],78:[2,68],80:[2,68]},{5:[2,69],30:[2,69],61:[2,69],63:[2,69],69:[2,69],71:[2,69],78:[2,69],80:[2,69]},{5:[2,13],17:[2,13],19:[2,13],22:[2,13],24:[2,13],27:[2,13],28:[2,13],30:[2,13],33:[2,13],37:[2,13],38:[2,13],39:[2,13],40:[2,13],41:[2,13],42:[2,13],43:[2,13],44:[2,13],45:[2,13],46:[2,13],47:[2,13],48:[2,13],52:[2,13],54:[2,13],56:[2,13],61:[2,13],63:[2,13],65:[2,13],66:[2,13],69:[2,13],71:[2,13],73:[2,13],78:[2,13],79:[2,13],80:[2,13]},{5:[2,18],17:[2,18],19:[2,18],22:[2,18],24:[2,18],27:[2,18],28:[2,18],30:[2,18],33:[2,18],37:[2,18],38:[2,18],39:[2,18],40:[2,18],41:[2,18],42:[2,18],43:[2,18],44:[2,18],45:[2,18],46:[2,18],47:[2,18],48:[2,18],52:[2,18],54:[2,18],56:[2,18],61:[2,18],63:[2,18],65:[2,18],66:[2,18],69:[2,18],71:[2,18],73:[2,18],78:[2,18],79:[2,18],80:[2,18]},{17:[1,65],22:[2,15],27:[2,15],28:[2,15],33:[1,52],37:[1,53],38:[1,54],39:[1,55],40:[1,56],41:[1,57],42:[1,58],43:[1,59],44:[1,60],45:[1,61],46:[1,62],47:[1,63],48:[1,64]}],
defaultActions: {6:[2,1],120:[2,7],121:[2,8]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'TrailingDot'
break;
case 1:return 'FinalDot'
break;
case 2:/* ignore comment */
break;
case 3:return 20
break;
case 4:return 29
break;
case 5:return 30
break;
case 6:return 18
break;
case 7:return 19
break;
case 8:return 52
break;
case 9:return 44
break;
case 10:return 42
break;
case 11:return 45
break;
case 12:return 43
break;
case 13:return 41
break;
case 14:return 40
break;
case 15:return 46
break;
case 16:return 47
break;
case 17:return 17
break;
case 18:return 48
break;
case 19:return 53
break;
case 20:return 54
break;
case 21:return 50
break;
case 22:return 75
break;
case 23:return 76
break;
case 24:return 73
break;
case 25:return 71
break;
case 26:return 78
break;
case 27:return 79
break;
case 28:return 69
break;
case 29:return 65
break;
case 30:return 66
break;
case 31:return 56
break;
case 32:return 61
break;
case 33:return 62
break;
case 34:return 63
break;
case 35:return 38
break;
case 36:return 39
break;
case 37:return 33
break;
case 38:return 36
break;
case 39:return 37
break;
case 40:return 80
break;
case 41:return 26
break;
case 42:return 22
break;
case 43:return 24
break;
case 44:return 28
break;
case 45:return 27
break;
case 46:return 10
break;
case 47:return 11
break;
case 48:return 34
break;
case 49:return 35
break;
case 50:return 15
break;
case 51:return 13
break;
case 52:return 7
break;
case 53:return 8
break;
case 54:return 5
break;
case 55:/* ignore whitespace */
break;
case 56:return 'INVALID'
break;
}
},
rules: [/^(?:\.\s)/,/^(?:\.$)/,/^(?:--.*)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:\+)/,/^(?:\-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:SELECT TOP)/,/^(?:SELECT)/,/^(?:FROM)/,/^(?:WHERE)/,/^(?:GROUP BY)/,/^(?:HAVING)/,/^(?:ORDER BY)/,/^(?:ASC)/,/^(?:DESC)/,/^(?:AS)/,/^(?:JOIN)/,/^(?:ON)/,/^(?:OVER)/,/^(?:AND)/,/^(?:OR)/,/^(?:IS)/,/^(?:NOT)/,/^(?:IN)/,/^(?:UNION)/,/^(?:CASE)/,/^(?:WHEN)/,/^(?:THEN)/,/^(?:ELSE)/,/^(?:END)/,/^(?:true)/,/^(?:false)/,/^(?:NULL)/,/^(?:UNDEFINED)/,/^(?:[0-9.]+)/,/^(?:[@A-Za-z0-9_]+)/,/^(?:'[^']*')/,/^(?:"[^"]*")/,/^(?:$)/,/^(?:\s+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}