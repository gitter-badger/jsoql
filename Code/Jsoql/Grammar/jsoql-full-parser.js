/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"Stmt":4,"EOF":5,"Quoted":6,"Quotation":7,"Boolean":8,"True":9,"False":10,"Identifier":11,"PlainIdentifier":12,"Property":13,"[":14,"Number":15,"]":16,".":17,"Expression":18,"*":19,"(":20,")":21,"ExpressionList":22,"Object":23,"IS":24,"Null":25,"Undefined":26,"NOT":27,"AND":28,"OR":29,"=":30,"!=":31,"<":32,">":33,"<=":34,">=":35,"+":36,"-":37,"/":38,"KeyValue":39,":":40,"KeyValueList":41,",":42,"{":43,"}":44,"Selectable":45,"AS":46,"SelectList":47,"FromTarget":48,"AliasedFromTarget":49,"FromTargets":50,"JOIN":51,"ON":52,"OVER":53,"OrderByExpression":54,"ASC":55,"DESC":56,"OrderByList":57,"OrderByClause":58,"ORDERBY":59,"WhereClause":60,"WHERE":61,"FromClause":62,"FROM":63,"SelectClause":64,"SELECTTOP":65,"SELECT":66,"GroupByClause":67,"GROUPBY":68,"HAVING":69,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"Quotation",9:"True",10:"False",12:"PlainIdentifier",14:"[",15:"Number",16:"]",17:".",19:"*",20:"(",21:")",24:"IS",25:"Null",26:"Undefined",27:"NOT",28:"AND",29:"OR",30:"=",31:"!=",32:"<",33:">",34:"<=",35:">=",36:"+",37:"-",38:"/",40:":",42:",",43:"{",44:"}",46:"AS",51:"JOIN",52:"ON",53:"OVER",55:"ASC",56:"DESC",59:"ORDERBY",61:"WHERE",63:"FROM",65:"SELECTTOP",66:"SELECT",68:"GROUPBY",69:"HAVING"},
productions_: [0,[3,2],[6,1],[8,1],[8,1],[11,1],[13,1],[13,4],[13,3],[13,6],[18,1],[18,3],[18,4],[18,1],[18,1],[18,1],[18,1],[18,1],[18,3],[18,3],[18,3],[18,2],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[39,3],[41,1],[41,3],[23,3],[22,1],[22,3],[45,1],[45,3],[47,1],[47,3],[48,1],[48,1],[48,1],[49,3],[50,1],[50,1],[50,5],[50,5],[54,1],[54,2],[54,2],[57,3],[57,1],[58,2],[60,2],[62,2],[64,3],[64,2],[67,2],[67,4],[4,2],[4,3],[4,3],[4,4],[4,3],[4,4],[4,4],[4,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:this.$ = { Quoted: $$[$0].replace(/'/g, "")}
break;
case 3:this.$ = true
break;
case 4:this.$ = false
break;
case 6:this.$ = { Property: $$[$0]}
break;
case 7:this.$ = { Property: $$[$0-3], Index: $$[$0-1]}
break;
case 8:this.$ = { Property: $$[$0-2], Child: $$[$0]}
break;
case 9:this.$ = { Property: $$[$0-5], Index: $$[$0-3], Child: $$[$0]}
break;
case 10:this.$ = { Property : '*' }
break;
case 11:this.$ = { Call: $$[$0-2], Args: []}
break;
case 12:this.$ = { Call: $$[$0-3], Args: $$[$0-1]}
break;
case 17:this.$ = parseFloat($$[$0])
break;
case 18:this.$ = {SubQuery: $$[$0-1]}
break;
case 19:this.$ = { Call: "IsNull", Args: [$$[$0-2]] }
break;
case 20:this.$ = { Call: "IsUndefined", Args: [$$[$0-2]] }
break;
case 21:this.$ = { Call: "Not", Args: [$$[$0]] }
break;
case 22:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 23:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 24:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 25:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 26:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 27:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 28:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 29:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 30:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 31:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 32:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 33:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 34:this.$ = {Key: $$[$0-2], Value: $$[$0]}
break;
case 35:this.$ = [$$[$0]]
break;
case 36:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 37:this.$ = {KeyValues: $$[$0-1]}
break;
case 38:this.$ = [$$[$0]]
break;
case 39:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 40:this.$ = {Expression: $$[$0]}
break;
case 41:this.$ = { Expression: $$[$0-2], Alias: $$[$0]}
break;
case 42:this.$ = [$$[$0]]
break;
case 43:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 47:this.$ = {Target: $$[$0-2], Alias: $$[$0]}
break;
case 50:this.$ = { Left: $$[$0-4], Right: $$[$0-2], Expression: $$[$0]}
break;
case 51:this.$ = { Left: $$[$0-4], Over: $$[$0-2], Alias: $$[$0]}
break;
case 52: this.$ = {Expression: $$[$0], Asc: true}
break;
case 53:this.$ = {Expression: $$[$0-1], Asc: true}
break;
case 54:this.$ = {Expression: $$[$0-1], Asc: false}
break;
case 55:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 56:this.$ = [$$[$0]]
break;
case 57:this.$ = $$[$0]
break;
case 58:this.$ = $$[$0]
break;
case 59:this.$ = $$[$0]
break;
case 60:this.$ = { SelectList: $$[$0], Limit: $$[$0-1]}
break;
case 61:this.$ = { SelectList: $$[$0]}
break;
case 62:this.$ = { Groupings: $$[$0]}
break;
case 63:this.$ = { Groupings: $$[$0-2], Having: $$[$0]}
break;
case 64:this.$ = {Select:$$[$0-1],From:$$[$0],Positions:{Select:_$[$0-1],From:_$[$0]}}
break;
case 65:this.$ = {Select:$$[$0-2],From:$$[$0-1],Where:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],Where:_$[$0]}}
break;
case 66:this.$ = {Select:$$[$0-2],From:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],OrderBy:_$[$0]}}
break;
case 67:this.$ = {Select:$$[$0-3],From:$$[$0-2],Where:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-3],From:_$[$0-2],Where:_$[$0-1],OrderBy:_$[$0]}}
break;
case 68:this.$ = {Select:$$[$0-2],From:$$[$0-1],GroupBy:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],GroupBy:_$[$0]}}
break;
case 69:this.$ = {Select:$$[$0-3],From:$$[$0-2],Where:$$[$0-1],GroupBy:$$[$0],Positions:{Select:_$[$0-3],From:_$[$0-2],Where:_$[$0-1],GroupBy:_$[$0]}}
break;
case 70:this.$ = {Select:$$[$0-3],From:$$[$0-2],GroupBy:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-3],FromWhere:_$[$0-2],GroupBy:_$[$0-1],OrderBy:_$[$0]}}
break;
case 71:this.$ = {Select:$$[$0-4],From:$$[$0-3],Where:$$[$0-2],GroupBy:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-4],From:_$[$0-3],Where:_$[$0-2],GroupBy:_$[$0-1],OrderBy:_$[$0]}}
break;
}
},
table: [{3:1,4:2,64:3,65:[1,4],66:[1,5]},{1:[3]},{5:[1,6]},{62:7,63:[1,8]},{15:[1,9]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:12,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26],45:11,47:10},{1:[2,1]},{5:[2,64],21:[2,64],58:28,59:[1,31],60:27,61:[1,30],67:29,68:[1,32]},{6:37,7:[1,23],11:39,12:[1,22],13:36,23:38,43:[1,26],48:34,49:35,50:33},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:12,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26],45:11,47:40},{42:[1,41],63:[2,61]},{42:[2,42],63:[2,42]},{19:[1,55],24:[1,43],28:[1,44],29:[1,45],30:[1,46],31:[1,47],32:[1,48],33:[1,49],34:[1,50],35:[1,51],36:[1,52],37:[1,53],38:[1,54],42:[2,40],46:[1,42],63:[2,40]},{5:[2,10],19:[2,10],21:[2,10],24:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[2,10],33:[2,10],34:[2,10],35:[2,10],36:[2,10],37:[2,10],38:[2,10],42:[2,10],44:[2,10],46:[2,10],51:[2,10],53:[2,10],55:[2,10],56:[2,10],59:[2,10],61:[2,10],63:[2,10],68:[2,10],69:[2,10]},{5:[2,6],14:[1,57],17:[1,58],19:[2,6],20:[1,56],21:[2,6],24:[2,6],28:[2,6],29:[2,6],30:[2,6],31:[2,6],32:[2,6],33:[2,6],34:[2,6],35:[2,6],36:[2,6],37:[2,6],38:[2,6],42:[2,6],44:[2,6],46:[2,6],51:[2,6],53:[2,6],55:[2,6],56:[2,6],59:[2,6],61:[2,6],63:[2,6],68:[2,6],69:[2,6]},{5:[2,13],19:[2,13],21:[2,13],24:[2,13],28:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[2,13],33:[2,13],34:[2,13],35:[2,13],36:[2,13],37:[2,13],38:[2,13],42:[2,13],44:[2,13],46:[2,13],51:[2,13],53:[2,13],55:[2,13],56:[2,13],59:[2,13],61:[2,13],63:[2,13],68:[2,13],69:[2,13]},{5:[2,14],19:[2,14],21:[2,14],24:[2,14],28:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],33:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14],38:[2,14],42:[2,14],44:[2,14],46:[2,14],51:[2,14],53:[2,14],55:[2,14],56:[2,14],59:[2,14],61:[2,14],63:[2,14],68:[2,14],69:[2,14]},{5:[2,15],19:[2,15],21:[2,15],24:[2,15],28:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],33:[2,15],34:[2,15],35:[2,15],36:[2,15],37:[2,15],38:[2,15],42:[2,15],44:[2,15],46:[2,15],51:[2,15],53:[2,15],55:[2,15],56:[2,15],59:[2,15],61:[2,15],63:[2,15],68:[2,15],69:[2,15]},{5:[2,16],19:[2,16],21:[2,16],24:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16],33:[2,16],34:[2,16],35:[2,16],36:[2,16],37:[2,16],38:[2,16],42:[2,16],44:[2,16],46:[2,16],51:[2,16],53:[2,16],55:[2,16],56:[2,16],59:[2,16],61:[2,16],63:[2,16],68:[2,16],69:[2,16]},{5:[2,17],19:[2,17],21:[2,17],24:[2,17],28:[2,17],29:[2,17],30:[2,17],31:[2,17],32:[2,17],33:[2,17],34:[2,17],35:[2,17],36:[2,17],37:[2,17],38:[2,17],42:[2,17],44:[2,17],46:[2,17],51:[2,17],53:[2,17],55:[2,17],56:[2,17],59:[2,17],61:[2,17],63:[2,17],68:[2,17],69:[2,17]},{4:59,64:3,65:[1,4],66:[1,5]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:60,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{5:[2,5],14:[2,5],17:[2,5],19:[2,5],20:[2,5],21:[2,5],24:[2,5],28:[2,5],29:[2,5],30:[2,5],31:[2,5],32:[2,5],33:[2,5],34:[2,5],35:[2,5],36:[2,5],37:[2,5],38:[2,5],40:[2,5],42:[2,5],44:[2,5],46:[2,5],51:[2,5],52:[2,5],53:[2,5],55:[2,5],56:[2,5],59:[2,5],61:[2,5],63:[2,5],68:[2,5],69:[2,5]},{5:[2,2],19:[2,2],21:[2,2],24:[2,2],28:[2,2],29:[2,2],30:[2,2],31:[2,2],32:[2,2],33:[2,2],34:[2,2],35:[2,2],36:[2,2],37:[2,2],38:[2,2],42:[2,2],44:[2,2],46:[2,2],51:[2,2],53:[2,2],55:[2,2],56:[2,2],59:[2,2],61:[2,2],63:[2,2],68:[2,2],69:[2,2]},{5:[2,3],19:[2,3],21:[2,3],24:[2,3],28:[2,3],29:[2,3],30:[2,3],31:[2,3],32:[2,3],33:[2,3],34:[2,3],35:[2,3],36:[2,3],37:[2,3],38:[2,3],42:[2,3],44:[2,3],46:[2,3],51:[2,3],53:[2,3],55:[2,3],56:[2,3],59:[2,3],61:[2,3],63:[2,3],68:[2,3],69:[2,3]},{5:[2,4],19:[2,4],21:[2,4],24:[2,4],28:[2,4],29:[2,4],30:[2,4],31:[2,4],32:[2,4],33:[2,4],34:[2,4],35:[2,4],36:[2,4],37:[2,4],38:[2,4],42:[2,4],44:[2,4],46:[2,4],51:[2,4],53:[2,4],55:[2,4],56:[2,4],59:[2,4],61:[2,4],63:[2,4],68:[2,4],69:[2,4]},{11:63,12:[1,22],39:62,41:61},{5:[2,65],21:[2,65],58:64,59:[1,31],67:65,68:[1,32]},{5:[2,66],21:[2,66]},{5:[2,68],21:[2,68],58:66,59:[1,31]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:67,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:70,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26],54:69,57:68},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:72,19:[1,13],20:[1,20],22:71,23:18,27:[1,21],43:[1,26]},{5:[2,59],21:[2,59],51:[1,73],53:[1,74],59:[2,59],61:[2,59],68:[2,59]},{5:[2,48],21:[2,48],46:[1,75],51:[2,48],53:[2,48],59:[2,48],61:[2,48],68:[2,48]},{5:[2,49],21:[2,49],51:[2,49],53:[2,49],59:[2,49],61:[2,49],68:[2,49]},{5:[2,44],21:[2,44],46:[2,44],51:[2,44],53:[2,44],59:[2,44],61:[2,44],68:[2,44]},{5:[2,45],21:[2,45],46:[2,45],51:[2,45],53:[2,45],59:[2,45],61:[2,45],68:[2,45]},{5:[2,46],21:[2,46],46:[2,46],51:[2,46],53:[2,46],59:[2,46],61:[2,46],68:[2,46]},{5:[2,6],14:[1,57],17:[1,58],19:[2,6],21:[2,6],24:[2,6],28:[2,6],29:[2,6],30:[2,6],31:[2,6],32:[2,6],33:[2,6],34:[2,6],35:[2,6],36:[2,6],37:[2,6],38:[2,6],42:[2,6],44:[2,6],46:[2,6],51:[2,6],53:[2,6],55:[2,6],56:[2,6],59:[2,6],61:[2,6],63:[2,6],68:[2,6],69:[2,6]},{42:[1,41],63:[2,60]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:12,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26],45:76},{11:77,12:[1,22]},{25:[1,78],26:[1,79]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:80,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:81,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:82,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:83,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:84,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:85,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:86,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:87,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:88,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:89,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:90,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:91,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:72,19:[1,13],20:[1,20],21:[1,92],22:93,23:18,27:[1,21],43:[1,26]},{15:[1,94]},{11:39,12:[1,22],13:95},{21:[1,96]},{5:[2,21],19:[1,55],21:[2,21],24:[1,43],28:[1,44],29:[1,45],30:[1,46],31:[1,47],32:[1,48],33:[1,49],34:[1,50],35:[1,51],36:[1,52],37:[1,53],38:[1,54],42:[2,21],44:[2,21],46:[2,21],51:[2,21],53:[2,21],55:[2,21],56:[2,21],59:[2,21],61:[2,21],63:[2,21],68:[2,21],69:[2,21]},{42:[1,98],44:[1,97]},{42:[2,35],44:[2,35]},{40:[1,99]},{5:[2,67],21:[2,67]},{5:[2,69],21:[2,69],58:100,59:[1,31]},{5:[2,70],21:[2,70]},{5:[2,58],19:[1,55],21:[2,58],24:[1,43],28:[1,44],29:[1,45],30:[1,46],31:[1,47],32:[1,48],33:[1,49],34:[1,50],35:[1,51],36:[1,52],37:[1,53],38:[1,54],59:[2,58],68:[2,58]},{5:[2,57],21:[2,57],42:[1,101]},{5:[2,56],21:[2,56],42:[2,56]},{5:[2,52],19:[1,55],21:[2,52],24:[1,43],28:[1,44],29:[1,45],30:[1,46],31:[1,47],32:[1,48],33:[1,49],34:[1,50],35:[1,51],36:[1,52],37:[1,53],38:[1,54],42:[2,52],55:[1,102],56:[1,103]},{5:[2,62],21:[2,62],42:[1,105],59:[2,62],69:[1,104]},{5:[2,38],19:[1,55],21:[2,38],24:[1,43],28:[1,44],29:[1,45],30:[1,46],31:[1,47],32:[1,48],33:[1,49],34:[1,50],35:[1,51],36:[1,52],37:[1,53],38:[1,54],42:[2,38],59:[2,38],69:[2,38]},{6:37,7:[1,23],11:39,12:[1,22],13:36,23:38,43:[1,26],48:107,49:106},{11:39,12:[1,22],13:108},{11:109,12:[1,22]},{42:[2,43],63:[2,43]},{42:[2,41],63:[2,41]},{5:[2,19],19:[2,19],21:[2,19],24:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[2,19],33:[2,19],34:[2,19],35:[2,19],36:[2,19],37:[2,19],38:[2,19],42:[2,19],44:[2,19],46:[2,19],51:[2,19],53:[2,19],55:[2,19],56:[2,19],59:[2,19],61:[2,19],63:[2,19],68:[2,19],69:[2,19]},{5:[2,20],19:[2,20],21:[2,20],24:[2,20],28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[2,20],33:[2,20],34:[2,20],35:[2,20],36:[2,20],37:[2,20],38:[2,20],42:[2,20],44:[2,20],46:[2,20],51:[2,20],53:[2,20],55:[2,20],56:[2,20],59:[2,20],61:[2,20],63:[2,20],68:[2,20],69:[2,20]},{5:[2,22],19:[1,55],21:[2,22],24:[2,22],28:[2,22],29:[2,22],30:[1,46],31:[1,47],32:[1,48],33:[1,49],34:[1,50],35:[1,51],36:[1,52],37:[1,53],38:[1,54],42:[2,22],44:[2,22],46:[2,22],51:[2,22],53:[2,22],55:[2,22],56:[2,22],59:[2,22],61:[2,22],63:[2,22],68:[2,22],69:[2,22]},{5:[2,23],19:[1,55],21:[2,23],24:[2,23],28:[2,23],29:[2,23],30:[1,46],31:[1,47],32:[1,48],33:[1,49],34:[1,50],35:[1,51],36:[1,52],37:[1,53],38:[1,54],42:[2,23],44:[2,23],46:[2,23],51:[2,23],53:[2,23],55:[2,23],56:[2,23],59:[2,23],61:[2,23],63:[2,23],68:[2,23],69:[2,23]},{5:[2,24],19:[1,55],21:[2,24],24:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[2,24],32:[2,24],33:[2,24],34:[2,24],35:[2,24],36:[1,52],37:[1,53],38:[1,54],42:[2,24],44:[2,24],46:[2,24],51:[2,24],53:[2,24],55:[2,24],56:[2,24],59:[2,24],61:[2,24],63:[2,24],68:[2,24],69:[2,24]},{5:[2,25],19:[1,55],21:[2,25],24:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[2,25],32:[2,25],33:[2,25],34:[2,25],35:[2,25],36:[1,52],37:[1,53],38:[1,54],42:[2,25],44:[2,25],46:[2,25],51:[2,25],53:[2,25],55:[2,25],56:[2,25],59:[2,25],61:[2,25],63:[2,25],68:[2,25],69:[2,25]},{5:[2,26],19:[1,55],21:[2,26],24:[2,26],28:[2,26],29:[2,26],30:[2,26],31:[2,26],32:[2,26],33:[2,26],34:[2,26],35:[2,26],36:[1,52],37:[1,53],38:[1,54],42:[2,26],44:[2,26],46:[2,26],51:[2,26],53:[2,26],55:[2,26],56:[2,26],59:[2,26],61:[2,26],63:[2,26],68:[2,26],69:[2,26]},{5:[2,27],19:[1,55],21:[2,27],24:[2,27],28:[2,27],29:[2,27],30:[2,27],31:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],36:[1,52],37:[1,53],38:[1,54],42:[2,27],44:[2,27],46:[2,27],51:[2,27],53:[2,27],55:[2,27],56:[2,27],59:[2,27],61:[2,27],63:[2,27],68:[2,27],69:[2,27]},{5:[2,28],19:[1,55],21:[2,28],24:[2,28],28:[2,28],29:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[1,52],37:[1,53],38:[1,54],42:[2,28],44:[2,28],46:[2,28],51:[2,28],53:[2,28],55:[2,28],56:[2,28],59:[2,28],61:[2,28],63:[2,28],68:[2,28],69:[2,28]},{5:[2,29],19:[1,55],21:[2,29],24:[2,29],28:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[1,52],37:[1,53],38:[1,54],42:[2,29],44:[2,29],46:[2,29],51:[2,29],53:[2,29],55:[2,29],56:[2,29],59:[2,29],61:[2,29],63:[2,29],68:[2,29],69:[2,29]},{5:[2,30],19:[1,55],21:[2,30],24:[2,30],28:[2,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],36:[2,30],37:[2,30],38:[1,54],42:[2,30],44:[2,30],46:[2,30],51:[2,30],53:[2,30],55:[2,30],56:[2,30],59:[2,30],61:[2,30],63:[2,30],68:[2,30],69:[2,30]},{5:[2,31],19:[1,55],21:[2,31],24:[2,31],28:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],36:[2,31],37:[2,31],38:[1,54],42:[2,31],44:[2,31],46:[2,31],51:[2,31],53:[2,31],55:[2,31],56:[2,31],59:[2,31],61:[2,31],63:[2,31],68:[2,31],69:[2,31]},{5:[2,32],19:[2,32],21:[2,32],24:[2,32],28:[2,32],29:[2,32],30:[2,32],31:[2,32],32:[2,32],33:[2,32],34:[2,32],35:[2,32],36:[2,32],37:[2,32],38:[2,32],42:[2,32],44:[2,32],46:[2,32],51:[2,32],53:[2,32],55:[2,32],56:[2,32],59:[2,32],61:[2,32],63:[2,32],68:[2,32],69:[2,32]},{5:[2,33],19:[2,33],21:[2,33],24:[2,33],28:[2,33],29:[2,33],30:[2,33],31:[2,33],32:[2,33],33:[2,33],34:[2,33],35:[2,33],36:[2,33],37:[2,33],38:[2,33],42:[2,33],44:[2,33],46:[2,33],51:[2,33],53:[2,33],55:[2,33],56:[2,33],59:[2,33],61:[2,33],63:[2,33],68:[2,33],69:[2,33]},{5:[2,11],19:[2,11],21:[2,11],24:[2,11],28:[2,11],29:[2,11],30:[2,11],31:[2,11],32:[2,11],33:[2,11],34:[2,11],35:[2,11],36:[2,11],37:[2,11],38:[2,11],42:[2,11],44:[2,11],46:[2,11],51:[2,11],53:[2,11],55:[2,11],56:[2,11],59:[2,11],61:[2,11],63:[2,11],68:[2,11],69:[2,11]},{21:[1,110],42:[1,105]},{16:[1,111]},{5:[2,8],19:[2,8],21:[2,8],24:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],33:[2,8],34:[2,8],35:[2,8],36:[2,8],37:[2,8],38:[2,8],42:[2,8],44:[2,8],46:[2,8],51:[2,8],53:[2,8],55:[2,8],56:[2,8],59:[2,8],61:[2,8],63:[2,8],68:[2,8],69:[2,8]},{5:[2,18],19:[2,18],21:[2,18],24:[2,18],28:[2,18],29:[2,18],30:[2,18],31:[2,18],32:[2,18],33:[2,18],34:[2,18],35:[2,18],36:[2,18],37:[2,18],38:[2,18],42:[2,18],44:[2,18],46:[2,18],51:[2,18],53:[2,18],55:[2,18],56:[2,18],59:[2,18],61:[2,18],63:[2,18],68:[2,18],69:[2,18]},{5:[2,37],19:[2,37],21:[2,37],24:[2,37],28:[2,37],29:[2,37],30:[2,37],31:[2,37],32:[2,37],33:[2,37],34:[2,37],35:[2,37],36:[2,37],37:[2,37],38:[2,37],42:[2,37],44:[2,37],46:[2,37],51:[2,37],53:[2,37],55:[2,37],56:[2,37],59:[2,37],61:[2,37],63:[2,37],68:[2,37],69:[2,37]},{11:63,12:[1,22],39:112},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:113,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{5:[2,71],21:[2,71]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:70,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26],54:114},{5:[2,53],21:[2,53],42:[2,53]},{5:[2,54],21:[2,54],42:[2,54]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:115,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:116,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{52:[1,117]},{46:[1,75]},{46:[1,118]},{5:[2,47],21:[2,47],51:[2,47],52:[2,47],53:[2,47],59:[2,47],61:[2,47],68:[2,47]},{5:[2,12],19:[2,12],21:[2,12],24:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],32:[2,12],33:[2,12],34:[2,12],35:[2,12],36:[2,12],37:[2,12],38:[2,12],42:[2,12],44:[2,12],46:[2,12],51:[2,12],53:[2,12],55:[2,12],56:[2,12],59:[2,12],61:[2,12],63:[2,12],68:[2,12],69:[2,12]},{5:[2,7],17:[1,119],19:[2,7],21:[2,7],24:[2,7],28:[2,7],29:[2,7],30:[2,7],31:[2,7],32:[2,7],33:[2,7],34:[2,7],35:[2,7],36:[2,7],37:[2,7],38:[2,7],42:[2,7],44:[2,7],46:[2,7],51:[2,7],53:[2,7],55:[2,7],56:[2,7],59:[2,7],61:[2,7],63:[2,7],68:[2,7],69:[2,7]},{42:[2,36],44:[2,36]},{19:[1,55],24:[1,43],28:[1,44],29:[1,45],30:[1,46],31:[1,47],32:[1,48],33:[1,49],34:[1,50],35:[1,51],36:[1,52],37:[1,53],38:[1,54],42:[2,34],44:[2,34]},{5:[2,55],21:[2,55],42:[2,55]},{5:[2,63],19:[1,55],21:[2,63],24:[1,43],28:[1,44],29:[1,45],30:[1,46],31:[1,47],32:[1,48],33:[1,49],34:[1,50],35:[1,51],36:[1,52],37:[1,53],38:[1,54],59:[2,63]},{5:[2,39],19:[1,55],21:[2,39],24:[1,43],28:[1,44],29:[1,45],30:[1,46],31:[1,47],32:[1,48],33:[1,49],34:[1,50],35:[1,51],36:[1,52],37:[1,53],38:[1,54],42:[2,39],59:[2,39],69:[2,39]},{6:16,7:[1,23],8:17,9:[1,24],10:[1,25],11:14,12:[1,22],13:15,15:[1,19],18:120,19:[1,13],20:[1,20],23:18,27:[1,21],43:[1,26]},{12:[1,121]},{11:39,12:[1,22],13:122},{5:[2,50],19:[1,55],21:[2,50],24:[1,43],28:[1,44],29:[1,45],30:[1,46],31:[1,47],32:[1,48],33:[1,49],34:[1,50],35:[1,51],36:[1,52],37:[1,53],38:[1,54],51:[2,50],53:[2,50],59:[2,50],61:[2,50],68:[2,50]},{5:[2,51],21:[2,51],51:[2,51],53:[2,51],59:[2,51],61:[2,51],68:[2,51]},{5:[2,9],19:[2,9],21:[2,9],24:[2,9],28:[2,9],29:[2,9],30:[2,9],31:[2,9],32:[2,9],33:[2,9],34:[2,9],35:[2,9],36:[2,9],37:[2,9],38:[2,9],42:[2,9],44:[2,9],46:[2,9],51:[2,9],53:[2,9],55:[2,9],56:[2,9],59:[2,9],61:[2,9],63:[2,9],68:[2,9],69:[2,9]}],
defaultActions: {6:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'TrailingDot'
break;
case 1:return 'FinalDot'
break;
case 2:return 17
break;
case 3:return 20
break;
case 4:return 21
break;
case 5:return 14
break;
case 6:return 16
break;
case 7:return 42
break;
case 8:return 34
break;
case 9:return 32
break;
case 10:return 35
break;
case 11:return 33
break;
case 12:return 31
break;
case 13:return 30
break;
case 14:return 36
break;
case 15:return 19
break;
case 16:return 38
break;
case 17:return 43
break;
case 18:return 44
break;
case 19:return 40
break;
case 20:return 65
break;
case 21:return 66
break;
case 22:return 63
break;
case 23:return 61
break;
case 24:return 68
break;
case 25:return 69
break;
case 26:return 59
break;
case 27:return 55
break;
case 28:return 56
break;
case 29:return 46
break;
case 30:return 51
break;
case 31:return 52
break;
case 32:return 53
break;
case 33:return 28
break;
case 34:return 29
break;
case 35:return 24
break;
case 36:return 27
break;
case 37:return 9
break;
case 38:return 10
break;
case 39:return 25
break;
case 40:return 26
break;
case 41:return 15
break;
case 42:return 12
break;
case 43:return 7
break;
case 44:return 5
break;
case 45:/* ignore whitespace */
break;
case 46:return 'INVALID'
break;
}
},
rules: [/^(?:\.\s)/,/^(?:\.$)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:SELECT TOP)/,/^(?:SELECT)/,/^(?:FROM)/,/^(?:WHERE)/,/^(?:GROUP BY)/,/^(?:HAVING)/,/^(?:ORDER BY)/,/^(?:ASC)/,/^(?:DESC)/,/^(?:AS)/,/^(?:JOIN)/,/^(?:ON)/,/^(?:OVER)/,/^(?:AND)/,/^(?:OR)/,/^(?:IS)/,/^(?:NOT)/,/^(?:true)/,/^(?:false)/,/^(?:NULL)/,/^(?:UNDEFINED)/,/^(?:[0-9.-]+)/,/^(?:[@A-Za-z0-9_]+)/,/^(?:'[^']*')/,/^(?:$)/,/^(?:\s+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}