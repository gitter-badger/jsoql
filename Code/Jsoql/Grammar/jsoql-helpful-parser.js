/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"Stmt":4,"EOF":5,"Quoted":6,"Quotation":7,"Boolean":8,"True":9,"False":10,"Identifier":11,"PlainIdentifier":12,"Property":13,"*":14,"[":15,"Number":16,"]":17,".":18,"Expression":19,"(":20,")":21,"ExpressionList":22,"Object":23,"IS":24,"Null":25,"Undefined":26,"NOT":27,"IN":28,"AND":29,"OR":30,"=":31,"!=":32,"<":33,">":34,"<=":35,">=":36,"+":37,"-":38,"/":39,"KeyValue":40,":":41,"KeyValueList":42,",":43,"{":44,"}":45,"TrailingDot":46,"FinalDot":47,"Selectable":48,"AS":49,"SelectList":50,"FromTarget":51,"AliasedFromTarget":52,"FromTargets":53,"JOIN":54,"ON":55,"OVER":56,"OrderByExpression":57,"ASC":58,"DESC":59,"OrderByList":60,"OrderByClause":61,"ORDERBY":62,"WhereClause":63,"WHERE":64,"FromClause":65,"FROM":66,"SelectClause":67,"SELECTTOP":68,"SELECT":69,"GroupByClause":70,"GROUPBY":71,"HAVING":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"Quotation",9:"True",10:"False",12:"PlainIdentifier",14:"*",15:"[",16:"Number",17:"]",18:".",20:"(",21:")",24:"IS",25:"Null",26:"Undefined",27:"NOT",28:"IN",29:"AND",30:"OR",31:"=",32:"!=",33:"<",34:">",35:"<=",36:">=",37:"+",38:"-",39:"/",41:":",43:",",44:"{",45:"}",46:"TrailingDot",47:"FinalDot",49:"AS",54:"JOIN",55:"ON",56:"OVER",58:"ASC",59:"DESC",62:"ORDERBY",64:"WHERE",66:"FROM",68:"SELECTTOP",69:"SELECT",71:"GROUPBY",72:"HAVING"},
productions_: [0,[3,2],[6,1],[8,1],[8,1],[11,1],[13,1],[13,1],[13,4],[13,3],[13,6],[19,3],[19,4],[19,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,3],[19,3],[19,3],[19,2],[19,5],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[40,3],[42,1],[42,3],[23,3],[22,1],[22,3],[22,2],[22,2],[22,2],[48,1],[48,3],[50,1],[50,3],[50,2],[50,2],[51,1],[51,1],[51,1],[52,3],[53,1],[53,1],[53,5],[53,5],[53,4],[53,6],[53,6],[53,4],[53,4],[53,2],[57,1],[57,2],[57,2],[60,3],[60,1],[60,2],[60,2],[60,2],[61,2],[61,1],[63,2],[63,1],[63,3],[63,3],[65,2],[67,3],[67,2],[67,1],[70,2],[70,4],[70,1],[4,2],[4,3],[4,3],[4,4],[4,3],[4,4],[4,4],[4,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:this.$ = { Quoted: $$[$0].replace(/'/g, "")}
break;
case 3:this.$ = true
break;
case 4:this.$ = false
break;
case 6:this.$ = { Property : '*' }
break;
case 7:this.$ = { Property: $$[$0]}
break;
case 8:this.$ = { Property: $$[$0-3], Index: $$[$0-1]}
break;
case 9:this.$ = { Property: $$[$0-2], Child: $$[$0]}
break;
case 10:this.$ = { Property: $$[$0-5], Index: $$[$0-3], Child: $$[$0]}
break;
case 11:this.$ = { Call: $$[$0-2], Args: []}
break;
case 12:this.$ = { Call: $$[$0-3], Args: $$[$0-1]}
break;
case 13:this.$ = $$[$0-1]
break;
case 18:this.$ = parseFloat($$[$0])
break;
case 19:this.$ = {SubQuery: $$[$0-1]}
break;
case 20:this.$ = { Call: "IsNull", Args: [$$[$0-2]] }
break;
case 21:this.$ = { Call: "IsUndefined", Args: [$$[$0-2]] }
break;
case 22:this.$ = { Call: "Not", Args: [$$[$0]] }
break;
case 23:this.$ = { Call: "In", Args: [$$[$0-4], $$[$0-1]]}
break;
case 24:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 25:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 26:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 27:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 28:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 29:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 30:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 31:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 32:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 33:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 34:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 35:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 36:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 37:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 38:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 39:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 40:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 41:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 42:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 43:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 44:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 45:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 46:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 47:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 48:this.$ = {Key: $$[$0-2], Value: $$[$0]}
break;
case 49:this.$ = [$$[$0]]
break;
case 50:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 51:this.$ = {KeyValues: $$[$0-1]}
break;
case 52:this.$ = [$$[$0]]
break;
case 53:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 54:this.$ = $$[$0-1]
break;
case 55:this.$ = $$[$0-1]
break;
case 56:this.$ = $$[$0-1]
break;
case 57:this.$ = {Expression: $$[$0]}
break;
case 58:this.$ = { Expression: $$[$0-2], Alias: $$[$0]}
break;
case 59:this.$ = [$$[$0]]
break;
case 60:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 61:this.$ = $$[$0-1]
break;
case 62:this.$ = $$[$0-1]
break;
case 66:this.$ = {Target: $$[$0-2], Alias: $$[$0]}
break;
case 69:this.$ = { Left: $$[$0-4], Right: $$[$0-2], Expression: $$[$0]}
break;
case 70:this.$ = { Left: $$[$0-4], Over: $$[$0-2], Alias: $$[$0]}
break;
case 71:this.$ = { Left: $$[$0-3], Right: $$[$0-1], Expression: null}
break;
case 72:this.$ = { Left: $$[$0-5], Right: $$[$0-3], Expression: null}
break;
case 73:this.$ = { Left: $$[$0-5], Right: $$[$0-3], Expression: null}
break;
case 74:this.$ = $$[$0-3]
break;
case 75:this.$ = $$[$0-3]
break;
case 76:this.$ = $$[$0-1]
break;
case 77: this.$ = {Expression: $$[$0], Asc: true}
break;
case 78:this.$ = {Expression: $$[$0-1], Asc: true}
break;
case 79:this.$ = {Expression: $$[$0-1], Asc: false}
break;
case 80:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 81:this.$ = [$$[$0]]
break;
case 82:this.$ = $$[$0-1]
break;
case 83:this.$ = $$[$0-1]
break;
case 84:this.$ = $$[$0-1]
break;
case 85:this.$ = $$[$0]
break;
case 86:this.$ = []
break;
case 87:this.$ = $$[$0]
break;
case 88:this.$ = null
break;
case 89:this.$ = $$[$0-1]
break;
case 90:this.$ = $$[$0-1]
break;
case 91:this.$ = $$[$0]
break;
case 92:this.$ = { SelectList: $$[$0], Limit: $$[$0-1]}
break;
case 93:this.$ = { SelectList: $$[$0]}
break;
case 94:this.$ = { SelectList: []}
break;
case 95:this.$ = { Groupings: $$[$0]}
break;
case 96:this.$ = { Groupings: $$[$0-2], Having: $$[$0]}
break;
case 97:this.$ = { Groupings: []}
break;
case 98:this.$ = {Select:$$[$0-1],From:$$[$0],Positions:{Select:_$[$0-1],From:_$[$0]}}
break;
case 99:this.$ = {Select:$$[$0-2],From:$$[$0-1],Where:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],Where:_$[$0]}}
break;
case 100:this.$ = {Select:$$[$0-2],From:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],OrderBy:_$[$0]}}
break;
case 101:this.$ = {Select:$$[$0-3],From:$$[$0-2],Where:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-3],From:_$[$0-2],Where:_$[$0-1],OrderBy:_$[$0]}}
break;
case 102:this.$ = {Select:$$[$0-2],From:$$[$0-1],GroupBy:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],GroupBy:_$[$0]}}
break;
case 103:this.$ = {Select:$$[$0-3],From:$$[$0-2],Where:$$[$0-1],GroupBy:$$[$0],Positions:{Select:_$[$0-3],From:_$[$0-2],Where:_$[$0-1],GroupBy:_$[$0]}}
break;
case 104:this.$ = {Select:$$[$0-3],From:$$[$0-2],GroupBy:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-3],FromWhere:_$[$0-2],GroupBy:_$[$0-1],OrderBy:_$[$0]}}
break;
case 105:this.$ = {Select:$$[$0-4],From:$$[$0-3],Where:$$[$0-2],GroupBy:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-4],From:_$[$0-3],Where:_$[$0-2],GroupBy:_$[$0-1],OrderBy:_$[$0]}}
break;
}
},
table: [{3:1,4:2,67:3,68:[1,4],69:[1,5]},{1:[3]},{5:[1,6]},{65:7,66:[1,8]},{16:[1,9]},{6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:12,14:[1,14],15:[1,16],16:[1,20],19:13,20:[1,21],23:19,27:[1,22],44:[1,27],48:11,50:10,66:[2,94]},{1:[2,1]},{5:[2,98],21:[2,98],61:29,62:[1,32],63:28,64:[1,31],70:30,71:[1,33]},{6:38,7:[1,24],11:40,12:[1,23],13:37,14:[1,14],23:39,44:[1,27],51:35,52:36,53:34},{6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:12,14:[1,14],15:[1,16],16:[1,20],19:13,20:[1,21],23:19,27:[1,22],44:[1,27],48:11,50:41},{43:[1,42],66:[2,93]},{43:[2,59],66:[2,59]},{14:[2,14],24:[2,14],28:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],33:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14],38:[2,14],39:[2,14],43:[2,14],46:[1,43],49:[2,14],66:[2,14]},{14:[1,58],24:[1,45],28:[1,46],29:[1,47],30:[1,48],31:[1,49],32:[1,50],33:[1,51],34:[1,52],35:[1,53],36:[1,54],37:[1,55],38:[1,56],39:[1,57],43:[2,57],49:[1,44],66:[2,57]},{5:[2,6],14:[2,6],17:[2,6],21:[2,6],24:[2,6],28:[2,6],29:[2,6],30:[2,6],31:[2,6],32:[2,6],33:[2,6],34:[2,6],35:[2,6],36:[2,6],37:[2,6],38:[2,6],39:[2,6],43:[2,6],45:[2,6],46:[2,6],47:[2,6],49:[2,6],54:[2,6],56:[2,6],58:[2,6],59:[2,6],62:[2,6],64:[2,6],66:[2,6],71:[2,6],72:[2,6]},{5:[2,7],14:[2,7],15:[1,59],17:[2,7],18:[1,60],20:[1,61],21:[2,7],24:[2,7],28:[2,7],29:[2,7],30:[2,7],31:[2,7],32:[2,7],33:[2,7],34:[2,7],35:[2,7],36:[2,7],37:[2,7],38:[2,7],39:[2,7],43:[2,7],45:[2,7],46:[2,7],47:[2,7],49:[2,7],54:[2,7],56:[2,7],58:[2,7],59:[2,7],62:[2,7],64:[2,7],66:[2,7],71:[2,7],72:[2,7]},{6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],19:63,20:[1,21],22:62,23:19,27:[1,22],44:[1,27]},{5:[2,15],14:[2,15],17:[2,15],21:[2,15],24:[2,15],28:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],33:[2,15],34:[2,15],35:[2,15],36:[2,15],37:[2,15],38:[2,15],39:[2,15],43:[2,15],45:[2,15],46:[2,15],47:[2,15],49:[2,15],54:[2,15],56:[2,15],58:[2,15],59:[2,15],62:[2,15],64:[2,15],66:[2,15],71:[2,15],72:[2,15]},{5:[2,16],14:[2,16],17:[2,16],21:[2,16],24:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16],33:[2,16],34:[2,16],35:[2,16],36:[2,16],37:[2,16],38:[2,16],39:[2,16],43:[2,16],45:[2,16],46:[2,16],47:[2,16],49:[2,16],54:[2,16],56:[2,16],58:[2,16],59:[2,16],62:[2,16],64:[2,16],66:[2,16],71:[2,16],72:[2,16]},{5:[2,17],14:[2,17],17:[2,17],21:[2,17],24:[2,17],28:[2,17],29:[2,17],30:[2,17],31:[2,17],32:[2,17],33:[2,17],34:[2,17],35:[2,17],36:[2,17],37:[2,17],38:[2,17],39:[2,17],43:[2,17],45:[2,17],46:[2,17],47:[2,17],49:[2,17],54:[2,17],56:[2,17],58:[2,17],59:[2,17],62:[2,17],64:[2,17],66:[2,17],71:[2,17],72:[2,17]},{5:[2,18],14:[2,18],17:[2,18],21:[2,18],24:[2,18],28:[2,18],29:[2,18],30:[2,18],31:[2,18],32:[2,18],33:[2,18],34:[2,18],35:[2,18],36:[2,18],37:[2,18],38:[2,18],39:[2,18],43:[2,18],45:[2,18],46:[2,18],47:[2,18],49:[2,18],54:[2,18],56:[2,18],58:[2,18],59:[2,18],62:[2,18],64:[2,18],66:[2,18],71:[2,18],72:[2,18]},{4:65,67:3,68:[1,4],69:[1,5]},{6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],19:66,20:[1,21],23:19,27:[1,22],44:[1,27]},{5:[2,5],14:[2,5],15:[2,5],17:[2,5],18:[2,5],20:[2,5],21:[2,5],24:[2,5],28:[2,5],29:[2,5],30:[2,5],31:[2,5],32:[2,5],33:[2,5],34:[2,5],35:[2,5],36:[2,5],37:[2,5],38:[2,5],39:[2,5],41:[2,5],43:[2,5],45:[2,5],46:[2,5],47:[2,5],49:[2,5],54:[2,5],55:[2,5],56:[2,5],58:[2,5],59:[2,5],62:[2,5],64:[2,5],66:[2,5],71:[2,5],72:[2,5]},{5:[2,2],14:[2,2],17:[2,2],21:[2,2],24:[2,2],28:[2,2],29:[2,2],30:[2,2],31:[2,2],32:[2,2],33:[2,2],34:[2,2],35:[2,2],36:[2,2],37:[2,2],38:[2,2],39:[2,2],43:[2,2],45:[2,2],46:[2,2],47:[2,2],49:[2,2],54:[2,2],56:[2,2],58:[2,2],59:[2,2],62:[2,2],64:[2,2],66:[2,2],71:[2,2],72:[2,2]},{5:[2,3],14:[2,3],17:[2,3],21:[2,3],24:[2,3],28:[2,3],29:[2,3],30:[2,3],31:[2,3],32:[2,3],33:[2,3],34:[2,3],35:[2,3],36:[2,3],37:[2,3],38:[2,3],39:[2,3],43:[2,3],45:[2,3],46:[2,3],47:[2,3],49:[2,3],54:[2,3],56:[2,3],58:[2,3],59:[2,3],62:[2,3],64:[2,3],66:[2,3],71:[2,3],72:[2,3]},{5:[2,4],14:[2,4],17:[2,4],21:[2,4],24:[2,4],28:[2,4],29:[2,4],30:[2,4],31:[2,4],32:[2,4],33:[2,4],34:[2,4],35:[2,4],36:[2,4],37:[2,4],38:[2,4],39:[2,4],43:[2,4],45:[2,4],46:[2,4],47:[2,4],49:[2,4],54:[2,4],56:[2,4],58:[2,4],59:[2,4],62:[2,4],64:[2,4],66:[2,4],71:[2,4],72:[2,4]},{11:69,12:[1,23],40:68,42:67},{5:[2,99],21:[2,99],61:70,62:[1,32],70:71,71:[1,33]},{5:[2,100],21:[2,100]},{5:[2,102],21:[2,102],61:72,62:[1,32]},{5:[2,88],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],19:73,20:[1,21],21:[2,88],23:19,27:[1,22],44:[1,27],62:[2,88],71:[2,88]},{5:[2,86],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],19:76,20:[1,21],21:[2,86],23:19,27:[1,22],44:[1,27],57:75,60:74},{5:[2,97],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],19:63,20:[1,21],21:[2,97],22:77,23:19,27:[1,22],44:[1,27],62:[2,97]},{5:[2,91],21:[2,91],54:[1,78],56:[1,79],62:[2,91],64:[2,91],71:[2,91]},{5:[2,67],21:[2,67],49:[1,80],54:[2,67],56:[2,67],62:[2,67],64:[2,67],71:[2,67]},{5:[2,68],21:[2,68],54:[2,68],56:[2,68],62:[2,68],64:[2,68],71:[2,68]},{5:[2,63],21:[2,63],49:[2,63],54:[2,63],56:[2,63],62:[2,63],64:[2,63],71:[2,63]},{5:[2,64],21:[2,64],49:[2,64],54:[2,64],56:[2,64],62:[2,64],64:[2,64],71:[2,64]},{5:[2,65],21:[2,65],49:[2,65],54:[2,65],56:[2,65],62:[2,65],64:[2,65],71:[2,65]},{5:[2,7],14:[2,7],15:[1,59],17:[2,7],18:[1,60],21:[2,7],24:[2,7],28:[2,7],29:[2,7],30:[2,7],31:[2,7],32:[2,7],33:[2,7],34:[2,7],35:[2,7],36:[2,7],37:[2,7],38:[2,7],39:[2,7],43:[2,7],45:[2,7],46:[2,7],47:[2,7],49:[2,7],54:[2,7],56:[2,7],58:[2,7],59:[2,7],62:[2,7],64:[2,7],66:[2,7],71:[2,7],72:[2,7]},{43:[1,42],66:[2,92]},{6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],19:13,20:[1,21],23:19,27:[1,22],43:[2,62],44:[1,27],48:81,66:[2,62]},{43:[2,61],66:[2,61]},{11:82,12:[1,23]},{25:[1,83],26:[1,84]},{20:[1,85]},{5:[2,36],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],17:[2,36],19:86,20:[1,21],21:[2,36],23:19,24:[2,36],27:[1,22],28:[2,36],29:[2,36],30:[2,36],31:[2,36],32:[2,36],33:[2,36],34:[2,36],35:[2,36],36:[2,36],37:[2,36],38:[2,36],39:[2,36],43:[2,36],44:[1,27],45:[2,36],46:[2,36],47:[2,36],49:[2,36],54:[2,36],56:[2,36],58:[2,36],59:[2,36],62:[2,36],64:[2,36],66:[2,36],71:[2,36],72:[2,36]},{5:[2,37],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],17:[2,37],19:87,20:[1,21],21:[2,37],23:19,24:[2,37],27:[1,22],28:[2,37],29:[2,37],30:[2,37],31:[2,37],32:[2,37],33:[2,37],34:[2,37],35:[2,37],36:[2,37],37:[2,37],38:[2,37],39:[2,37],43:[2,37],44:[1,27],45:[2,37],46:[2,37],47:[2,37],49:[2,37],54:[2,37],56:[2,37],58:[2,37],59:[2,37],62:[2,37],64:[2,37],66:[2,37],71:[2,37],72:[2,37]},{5:[2,38],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],17:[2,38],19:88,20:[1,21],21:[2,38],23:19,24:[2,38],27:[1,22],28:[2,38],29:[2,38],30:[2,38],31:[2,38],32:[2,38],33:[2,38],34:[2,38],35:[2,38],36:[2,38],37:[2,38],38:[2,38],39:[2,38],43:[2,38],44:[1,27],45:[2,38],46:[2,38],47:[2,38],49:[2,38],54:[2,38],56:[2,38],58:[2,38],59:[2,38],62:[2,38],64:[2,38],66:[2,38],71:[2,38],72:[2,38]},{5:[2,39],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],17:[2,39],19:89,20:[1,21],21:[2,39],23:19,24:[2,39],27:[1,22],28:[2,39],29:[2,39],30:[2,39],31:[2,39],32:[2,39],33:[2,39],34:[2,39],35:[2,39],36:[2,39],37:[2,39],38:[2,39],39:[2,39],43:[2,39],44:[1,27],45:[2,39],46:[2,39],47:[2,39],49:[2,39],54:[2,39],56:[2,39],58:[2,39],59:[2,39],62:[2,39],64:[2,39],66:[2,39],71:[2,39],72:[2,39]},{5:[2,40],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],17:[2,40],19:90,20:[1,21],21:[2,40],23:19,24:[2,40],27:[1,22],28:[2,40],29:[2,40],30:[2,40],31:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],36:[2,40],37:[2,40],38:[2,40],39:[2,40],43:[2,40],44:[1,27],45:[2,40],46:[2,40],47:[2,40],49:[2,40],54:[2,40],56:[2,40],58:[2,40],59:[2,40],62:[2,40],64:[2,40],66:[2,40],71:[2,40],72:[2,40]},{5:[2,41],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],17:[2,41],19:91,20:[1,21],21:[2,41],23:19,24:[2,41],27:[1,22],28:[2,41],29:[2,41],30:[2,41],31:[2,41],32:[2,41],33:[2,41],34:[2,41],35:[2,41],36:[2,41],37:[2,41],38:[2,41],39:[2,41],43:[2,41],44:[1,27],45:[2,41],46:[2,41],47:[2,41],49:[2,41],54:[2,41],56:[2,41],58:[2,41],59:[2,41],62:[2,41],64:[2,41],66:[2,41],71:[2,41],72:[2,41]},{5:[2,42],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],17:[2,42],19:92,20:[1,21],21:[2,42],23:19,24:[2,42],27:[1,22],28:[2,42],29:[2,42],30:[2,42],31:[2,42],32:[2,42],33:[2,42],34:[2,42],35:[2,42],36:[2,42],37:[2,42],38:[2,42],39:[2,42],43:[2,42],44:[1,27],45:[2,42],46:[2,42],47:[2,42],49:[2,42],54:[2,42],56:[2,42],58:[2,42],59:[2,42],62:[2,42],64:[2,42],66:[2,42],71:[2,42],72:[2,42]},{5:[2,43],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],17:[2,43],19:93,20:[1,21],21:[2,43],23:19,24:[2,43],27:[1,22],28:[2,43],29:[2,43],30:[2,43],31:[2,43],32:[2,43],33:[2,43],34:[2,43],35:[2,43],36:[2,43],37:[2,43],38:[2,43],39:[2,43],43:[2,43],44:[1,27],45:[2,43],46:[2,43],47:[2,43],49:[2,43],54:[2,43],56:[2,43],58:[2,43],59:[2,43],62:[2,43],64:[2,43],66:[2,43],71:[2,43],72:[2,43]},{5:[2,44],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],17:[2,44],19:94,20:[1,21],21:[2,44],23:19,24:[2,44],27:[1,22],28:[2,44],29:[2,44],30:[2,44],31:[2,44],32:[2,44],33:[2,44],34:[2,44],35:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],43:[2,44],44:[1,27],45:[2,44],46:[2,44],47:[2,44],49:[2,44],54:[2,44],56:[2,44],58:[2,44],59:[2,44],62:[2,44],64:[2,44],66:[2,44],71:[2,44],72:[2,44]},{5:[2,45],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],17:[2,45],19:95,20:[1,21],21:[2,45],23:19,24:[2,45],27:[1,22],28:[2,45],29:[2,45],30:[2,45],31:[2,45],32:[2,45],33:[2,45],34:[2,45],35:[2,45],36:[2,45],37:[2,45],38:[2,45],39:[2,45],43:[2,45],44:[1,27],45:[2,45],46:[2,45],47:[2,45],49:[2,45],54:[2,45],56:[2,45],58:[2,45],59:[2,45],62:[2,45],64:[2,45],66:[2,45],71:[2,45],72:[2,45]},{5:[2,46],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[2,46],15:[1,16],16:[1,20],17:[2,46],19:96,20:[1,21],21:[2,46],23:19,24:[2,46],27:[1,22],28:[2,46],29:[2,46],30:[2,46],31:[2,46],32:[2,46],33:[2,46],34:[2,46],35:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],43:[2,46],44:[1,27],45:[2,46],46:[2,46],47:[2,46],49:[2,46],54:[2,46],56:[2,46],58:[2,46],59:[2,46],62:[2,46],64:[2,46],66:[2,46],71:[2,46],72:[2,46]},{5:[2,47],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[2,47],15:[1,16],16:[1,20],17:[2,47],19:97,20:[1,21],21:[2,47],23:19,24:[2,47],27:[1,22],28:[2,47],29:[2,47],30:[2,47],31:[2,47],32:[2,47],33:[2,47],34:[2,47],35:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],43:[2,47],44:[1,27],45:[2,47],46:[2,47],47:[2,47],49:[2,47],54:[2,47],56:[2,47],58:[2,47],59:[2,47],62:[2,47],64:[2,47],66:[2,47],71:[2,47],72:[2,47]},{16:[1,98]},{11:40,12:[1,23],13:99,14:[1,14]},{6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],19:63,20:[1,21],21:[1,100],22:101,23:19,27:[1,22],44:[1,27]},{17:[1,102],43:[1,103],46:[1,104],47:[1,105]},{5:[2,52],14:[1,58],17:[2,52],21:[2,52],24:[1,45],28:[1,46],29:[1,47],30:[1,48],31:[1,49],32:[1,50],33:[1,51],34:[1,52],35:[1,53],36:[1,54],37:[1,55],38:[1,56],39:[1,57],43:[2,52],46:[2,52],47:[2,52],62:[2,52],72:[2,52]},{5:[2,14],14:[2,14],17:[2,14],21:[2,14],24:[2,14],28:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],33:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14],38:[2,14],39:[2,14],43:[2,14],45:[2,14],46:[2,14],47:[2,14],49:[2,14],54:[2,14],56:[2,14],58:[2,14],59:[2,14],62:[2,14],64:[2,14],66:[2,14],71:[2,14],72:[2,14]},{21:[1,106]},{5:[2,22],14:[1,58],17:[2,22],21:[2,22],24:[1,45],28:[1,46],29:[1,47],30:[1,48],31:[1,49],32:[1,50],33:[1,51],34:[1,52],35:[1,53],36:[1,54],37:[1,55],38:[1,56],39:[1,57],43:[2,22],45:[2,22],46:[2,22],47:[2,22],49:[2,22],54:[2,22],56:[2,22],58:[2,22],59:[2,22],62:[2,22],64:[2,22],66:[2,22],71:[2,22],72:[2,22]},{43:[1,108],45:[1,107]},{43:[2,49],45:[2,49]},{41:[1,109]},{5:[2,101],21:[2,101]},{5:[2,103],21:[2,103],61:110,62:[1,32]},{5:[2,104],21:[2,104]},{5:[2,87],14:[1,58],21:[2,87],24:[1,45],28:[1,46],29:[1,47],30:[1,48],31:[1,49],32:[1,50],33:[1,51],34:[1,52],35:[1,53],36:[1,54],37:[1,55],38:[1,56],39:[1,57],46:[1,111],47:[1,112],62:[2,87],71:[2,87]},{5:[2,85],21:[2,85],43:[1,113],46:[1,114],47:[1,115]},{5:[2,81],21:[2,81],43:[2,81],46:[2,81],47:[2,81]},{5:[2,77],14:[1,58],21:[2,77],24:[1,45],28:[1,46],29:[1,47],30:[1,48],31:[1,49],32:[1,50],33:[1,51],34:[1,52],35:[1,53],36:[1,54],37:[1,55],38:[1,56],39:[1,57],43:[2,77],46:[2,77],47:[2,77],58:[1,116],59:[1,117]},{5:[2,95],21:[2,95],43:[1,103],46:[1,104],47:[1,105],62:[2,95],72:[1,118]},{6:38,7:[1,24],11:40,12:[1,23],13:37,14:[1,14],23:39,44:[1,27],51:120,52:119},{5:[2,76],11:40,12:[1,23],13:121,14:[1,14],21:[2,76],54:[2,76],56:[2,76],62:[2,76],64:[2,76],71:[2,76]},{11:122,12:[1,23]},{43:[2,60],66:[2,60]},{43:[2,58],66:[2,58]},{5:[2,20],14:[2,20],17:[2,20],21:[2,20],24:[2,20],28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[2,20],33:[2,20],34:[2,20],35:[2,20],36:[2,20],37:[2,20],38:[2,20],39:[2,20],43:[2,20],45:[2,20],46:[2,20],47:[2,20],49:[2,20],54:[2,20],56:[2,20],58:[2,20],59:[2,20],62:[2,20],64:[2,20],66:[2,20],71:[2,20],72:[2,20]},{5:[2,21],14:[2,21],17:[2,21],21:[2,21],24:[2,21],28:[2,21],29:[2,21],30:[2,21],31:[2,21],32:[2,21],33:[2,21],34:[2,21],35:[2,21],36:[2,21],37:[2,21],38:[2,21],39:[2,21],43:[2,21],45:[2,21],46:[2,21],47:[2,21],49:[2,21],54:[2,21],56:[2,21],58:[2,21],59:[2,21],62:[2,21],64:[2,21],66:[2,21],71:[2,21],72:[2,21]},{6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],19:63,20:[1,21],22:123,23:19,27:[1,22],44:[1,27]},{5:[2,24],14:[1,58],17:[2,24],21:[2,24],24:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[1,49],32:[1,50],33:[1,51],34:[1,52],35:[1,53],36:[1,54],37:[1,55],38:[1,56],39:[1,57],43:[2,24],45:[2,24],46:[2,24],47:[2,24],49:[2,24],54:[2,24],56:[2,24],58:[2,24],59:[2,24],62:[2,24],64:[2,24],66:[2,24],71:[2,24],72:[2,24]},{5:[2,25],14:[1,58],17:[2,25],21:[2,25],24:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[1,49],32:[1,50],33:[1,51],34:[1,52],35:[1,53],36:[1,54],37:[1,55],38:[1,56],39:[1,57],43:[2,25],45:[2,25],46:[2,25],47:[2,25],49:[2,25],54:[2,25],56:[2,25],58:[2,25],59:[2,25],62:[2,25],64:[2,25],66:[2,25],71:[2,25],72:[2,25]},{5:[2,26],14:[1,58],17:[2,26],21:[2,26],24:[2,26],28:[2,26],29:[2,26],30:[2,26],31:[2,26],32:[2,26],33:[2,26],34:[2,26],35:[2,26],36:[2,26],37:[1,55],38:[1,56],39:[1,57],43:[2,26],45:[2,26],46:[2,26],47:[2,26],49:[2,26],54:[2,26],56:[2,26],58:[2,26],59:[2,26],62:[2,26],64:[2,26],66:[2,26],71:[2,26],72:[2,26]},{5:[2,27],14:[1,58],17:[2,27],21:[2,27],24:[2,27],28:[2,27],29:[2,27],30:[2,27],31:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],36:[2,27],37:[1,55],38:[1,56],39:[1,57],43:[2,27],45:[2,27],46:[2,27],47:[2,27],49:[2,27],54:[2,27],56:[2,27],58:[2,27],59:[2,27],62:[2,27],64:[2,27],66:[2,27],71:[2,27],72:[2,27]},{5:[2,28],14:[1,58],17:[2,28],21:[2,28],24:[2,28],28:[2,28],29:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[2,28],37:[1,55],38:[1,56],39:[1,57],43:[2,28],45:[2,28],46:[2,28],47:[2,28],49:[2,28],54:[2,28],56:[2,28],58:[2,28],59:[2,28],62:[2,28],64:[2,28],66:[2,28],71:[2,28],72:[2,28]},{5:[2,29],14:[1,58],17:[2,29],21:[2,29],24:[2,29],28:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[2,29],37:[1,55],38:[1,56],39:[1,57],43:[2,29],45:[2,29],46:[2,29],47:[2,29],49:[2,29],54:[2,29],56:[2,29],58:[2,29],59:[2,29],62:[2,29],64:[2,29],66:[2,29],71:[2,29],72:[2,29]},{5:[2,30],14:[1,58],17:[2,30],21:[2,30],24:[2,30],28:[2,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],36:[2,30],37:[1,55],38:[1,56],39:[1,57],43:[2,30],45:[2,30],46:[2,30],47:[2,30],49:[2,30],54:[2,30],56:[2,30],58:[2,30],59:[2,30],62:[2,30],64:[2,30],66:[2,30],71:[2,30],72:[2,30]},{5:[2,31],14:[1,58],17:[2,31],21:[2,31],24:[2,31],28:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],36:[2,31],37:[1,55],38:[1,56],39:[1,57],43:[2,31],45:[2,31],46:[2,31],47:[2,31],49:[2,31],54:[2,31],56:[2,31],58:[2,31],59:[2,31],62:[2,31],64:[2,31],66:[2,31],71:[2,31],72:[2,31]},{5:[2,32],14:[1,58],17:[2,32],21:[2,32],24:[2,32],28:[2,32],29:[2,32],30:[2,32],31:[2,32],32:[2,32],33:[2,32],34:[2,32],35:[2,32],36:[2,32],37:[2,32],38:[2,32],39:[1,57],43:[2,32],45:[2,32],46:[2,32],47:[2,32],49:[2,32],54:[2,32],56:[2,32],58:[2,32],59:[2,32],62:[2,32],64:[2,32],66:[2,32],71:[2,32],72:[2,32]},{5:[2,33],14:[1,58],17:[2,33],21:[2,33],24:[2,33],28:[2,33],29:[2,33],30:[2,33],31:[2,33],32:[2,33],33:[2,33],34:[2,33],35:[2,33],36:[2,33],37:[2,33],38:[2,33],39:[1,57],43:[2,33],45:[2,33],46:[2,33],47:[2,33],49:[2,33],54:[2,33],56:[2,33],58:[2,33],59:[2,33],62:[2,33],64:[2,33],66:[2,33],71:[2,33],72:[2,33]},{5:[2,34],14:[2,34],17:[2,34],21:[2,34],24:[2,34],28:[2,34],29:[2,34],30:[2,34],31:[2,34],32:[2,34],33:[2,34],34:[2,34],35:[2,34],36:[2,34],37:[2,34],38:[2,34],39:[2,34],43:[2,34],45:[2,34],46:[2,34],47:[2,34],49:[2,34],54:[2,34],56:[2,34],58:[2,34],59:[2,34],62:[2,34],64:[2,34],66:[2,34],71:[2,34],72:[2,34]},{5:[2,35],14:[2,35],17:[2,35],21:[2,35],24:[2,35],28:[2,35],29:[2,35],30:[2,35],31:[2,35],32:[2,35],33:[2,35],34:[2,35],35:[2,35],36:[2,35],37:[2,35],38:[2,35],39:[2,35],43:[2,35],45:[2,35],46:[2,35],47:[2,35],49:[2,35],54:[2,35],56:[2,35],58:[2,35],59:[2,35],62:[2,35],64:[2,35],66:[2,35],71:[2,35],72:[2,35]},{17:[1,124]},{5:[2,9],14:[2,9],17:[2,9],21:[2,9],24:[2,9],28:[2,9],29:[2,9],30:[2,9],31:[2,9],32:[2,9],33:[2,9],34:[2,9],35:[2,9],36:[2,9],37:[2,9],38:[2,9],39:[2,9],43:[2,9],45:[2,9],46:[2,9],47:[2,9],49:[2,9],54:[2,9],56:[2,9],58:[2,9],59:[2,9],62:[2,9],64:[2,9],66:[2,9],71:[2,9],72:[2,9]},{5:[2,11],14:[2,11],17:[2,11],21:[2,11],24:[2,11],28:[2,11],29:[2,11],30:[2,11],31:[2,11],32:[2,11],33:[2,11],34:[2,11],35:[2,11],36:[2,11],37:[2,11],38:[2,11],39:[2,11],43:[2,11],45:[2,11],46:[2,11],47:[2,11],49:[2,11],54:[2,11],56:[2,11],58:[2,11],59:[2,11],62:[2,11],64:[2,11],66:[2,11],71:[2,11],72:[2,11]},{21:[1,125],43:[1,103],46:[1,104],47:[1,105]},{5:[2,13],14:[2,13],17:[2,13],21:[2,13],24:[2,13],28:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[2,13],33:[2,13],34:[2,13],35:[2,13],36:[2,13],37:[2,13],38:[2,13],39:[2,13],43:[2,13],45:[2,13],46:[2,13],47:[2,13],49:[2,13],54:[2,13],56:[2,13],58:[2,13],59:[2,13],62:[2,13],64:[2,13],66:[2,13],71:[2,13],72:[2,13]},{5:[2,56],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],17:[2,56],19:126,20:[1,21],21:[2,56],23:19,27:[1,22],43:[2,56],44:[1,27],46:[2,56],47:[2,56],62:[2,56],72:[2,56]},{5:[2,54],17:[2,54],21:[2,54],43:[2,54],46:[2,54],47:[2,54],62:[2,54],72:[2,54]},{5:[2,55],17:[2,55],21:[2,55],43:[2,55],46:[2,55],47:[2,55],62:[2,55],72:[2,55]},{5:[2,19],14:[2,19],17:[2,19],21:[2,19],24:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[2,19],33:[2,19],34:[2,19],35:[2,19],36:[2,19],37:[2,19],38:[2,19],39:[2,19],43:[2,19],45:[2,19],46:[2,19],47:[2,19],49:[2,19],54:[2,19],56:[2,19],58:[2,19],59:[2,19],62:[2,19],64:[2,19],66:[2,19],71:[2,19],72:[2,19]},{5:[2,51],14:[2,51],17:[2,51],21:[2,51],24:[2,51],28:[2,51],29:[2,51],30:[2,51],31:[2,51],32:[2,51],33:[2,51],34:[2,51],35:[2,51],36:[2,51],37:[2,51],38:[2,51],39:[2,51],43:[2,51],45:[2,51],46:[2,51],47:[2,51],49:[2,51],54:[2,51],56:[2,51],58:[2,51],59:[2,51],62:[2,51],64:[2,51],66:[2,51],71:[2,51],72:[2,51]},{11:69,12:[1,23],40:127},{6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],19:128,20:[1,21],23:19,27:[1,22],44:[1,27]},{5:[2,105],21:[2,105]},{5:[2,89],21:[2,89],62:[2,89],71:[2,89]},{5:[2,90],21:[2,90],62:[2,90],71:[2,90]},{5:[2,84],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],19:76,20:[1,21],21:[2,84],23:19,27:[1,22],43:[2,84],44:[1,27],46:[2,84],47:[2,84],57:129},{5:[2,82],21:[2,82],43:[2,82],46:[2,82],47:[2,82]},{5:[2,83],21:[2,83],43:[2,83],46:[2,83],47:[2,83]},{5:[2,78],21:[2,78],43:[2,78],46:[2,78],47:[2,78]},{5:[2,79],21:[2,79],43:[2,79],46:[2,79],47:[2,79]},{6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],19:130,20:[1,21],23:19,27:[1,22],44:[1,27]},{55:[1,131]},{49:[1,80]},{46:[1,134],47:[1,133],49:[1,132]},{5:[2,66],21:[2,66],54:[2,66],55:[2,66],56:[2,66],62:[2,66],64:[2,66],71:[2,66]},{21:[1,135],43:[1,103],46:[1,104],47:[1,105]},{5:[2,8],14:[2,8],17:[2,8],18:[1,136],21:[2,8],24:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],33:[2,8],34:[2,8],35:[2,8],36:[2,8],37:[2,8],38:[2,8],39:[2,8],43:[2,8],45:[2,8],46:[2,8],47:[2,8],49:[2,8],54:[2,8],56:[2,8],58:[2,8],59:[2,8],62:[2,8],64:[2,8],66:[2,8],71:[2,8],72:[2,8]},{5:[2,12],14:[2,12],17:[2,12],21:[2,12],24:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],32:[2,12],33:[2,12],34:[2,12],35:[2,12],36:[2,12],37:[2,12],38:[2,12],39:[2,12],43:[2,12],45:[2,12],46:[2,12],47:[2,12],49:[2,12],54:[2,12],56:[2,12],58:[2,12],59:[2,12],62:[2,12],64:[2,12],66:[2,12],71:[2,12],72:[2,12]},{5:[2,53],14:[1,58],17:[2,53],21:[2,53],24:[1,45],28:[1,46],29:[1,47],30:[1,48],31:[1,49],32:[1,50],33:[1,51],34:[1,52],35:[1,53],36:[1,54],37:[1,55],38:[1,56],39:[1,57],43:[2,53],46:[2,53],47:[2,53],62:[2,53],72:[2,53]},{43:[2,50],45:[2,50]},{14:[1,58],24:[1,45],28:[1,46],29:[1,47],30:[1,48],31:[1,49],32:[1,50],33:[1,51],34:[1,52],35:[1,53],36:[1,54],37:[1,55],38:[1,56],39:[1,57],43:[2,48],45:[2,48]},{5:[2,80],21:[2,80],43:[2,80],46:[2,80],47:[2,80]},{5:[2,96],14:[1,58],21:[2,96],24:[1,45],28:[1,46],29:[1,47],30:[1,48],31:[1,49],32:[1,50],33:[1,51],34:[1,52],35:[1,53],36:[1,54],37:[1,55],38:[1,56],39:[1,57],62:[2,96]},{5:[2,71],6:17,7:[1,24],8:18,9:[1,25],10:[1,26],11:15,12:[1,23],13:64,14:[1,14],15:[1,16],16:[1,20],19:137,20:[1,21],21:[2,71],23:19,27:[1,22],44:[1,27],54:[2,71],56:[2,71],62:[2,71],64:[2,71],71:[2,71]},{12:[1,138]},{5:[2,74],21:[2,74],54:[2,74],56:[2,74],62:[2,74],64:[2,74],71:[2,74]},{5:[2,75],21:[2,75],54:[2,75],56:[2,75],62:[2,75],64:[2,75],71:[2,75]},{5:[2,23],14:[2,23],17:[2,23],21:[2,23],24:[2,23],28:[2,23],29:[2,23],30:[2,23],31:[2,23],32:[2,23],33:[2,23],34:[2,23],35:[2,23],36:[2,23],37:[2,23],38:[2,23],39:[2,23],43:[2,23],45:[2,23],46:[2,23],47:[2,23],49:[2,23],54:[2,23],56:[2,23],58:[2,23],59:[2,23],62:[2,23],64:[2,23],66:[2,23],71:[2,23],72:[2,23]},{11:40,12:[1,23],13:139,14:[1,14]},{5:[2,69],14:[1,58],21:[2,69],24:[1,45],28:[1,46],29:[1,47],30:[1,48],31:[1,49],32:[1,50],33:[1,51],34:[1,52],35:[1,53],36:[1,54],37:[1,55],38:[1,56],39:[1,57],46:[1,140],47:[1,141],54:[2,69],56:[2,69],62:[2,69],64:[2,69],71:[2,69]},{5:[2,70],21:[2,70],54:[2,70],56:[2,70],62:[2,70],64:[2,70],71:[2,70]},{5:[2,10],14:[2,10],17:[2,10],21:[2,10],24:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[2,10],33:[2,10],34:[2,10],35:[2,10],36:[2,10],37:[2,10],38:[2,10],39:[2,10],43:[2,10],45:[2,10],46:[2,10],47:[2,10],49:[2,10],54:[2,10],56:[2,10],58:[2,10],59:[2,10],62:[2,10],64:[2,10],66:[2,10],71:[2,10],72:[2,10]},{5:[2,72],21:[2,72],54:[2,72],56:[2,72],62:[2,72],64:[2,72],71:[2,72]},{5:[2,73],21:[2,73],54:[2,73],56:[2,73],62:[2,73],64:[2,73],71:[2,73]}],
defaultActions: {6:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 46
break;
case 1:return 47
break;
case 2:return 18
break;
case 3:return 20
break;
case 4:return 21
break;
case 5:return 15
break;
case 6:return 17
break;
case 7:return 43
break;
case 8:return 35
break;
case 9:return 33
break;
case 10:return 36
break;
case 11:return 34
break;
case 12:return 32
break;
case 13:return 31
break;
case 14:return 37
break;
case 15:return 14
break;
case 16:return 39
break;
case 17:return 44
break;
case 18:return 45
break;
case 19:return 41
break;
case 20:return 68
break;
case 21:return 69
break;
case 22:return 66
break;
case 23:return 64
break;
case 24:return 71
break;
case 25:return 72
break;
case 26:return 62
break;
case 27:return 58
break;
case 28:return 59
break;
case 29:return 49
break;
case 30:return 54
break;
case 31:return 55
break;
case 32:return 56
break;
case 33:return 29
break;
case 34:return 30
break;
case 35:return 24
break;
case 36:return 27
break;
case 37:return 28
break;
case 38:return 9
break;
case 39:return 10
break;
case 40:return 25
break;
case 41:return 26
break;
case 42:return 16
break;
case 43:return 12
break;
case 44:return 7
break;
case 45:return 5
break;
case 46:/* ignore whitespace */
break;
case 47:return 'INVALID'
break;
}
},
rules: [/^(?:\.\s)/,/^(?:\.$)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:SELECT TOP)/,/^(?:SELECT)/,/^(?:FROM)/,/^(?:WHERE)/,/^(?:GROUP BY)/,/^(?:HAVING)/,/^(?:ORDER BY)/,/^(?:ASC)/,/^(?:DESC)/,/^(?:AS)/,/^(?:JOIN)/,/^(?:ON)/,/^(?:OVER)/,/^(?:AND)/,/^(?:OR)/,/^(?:IS)/,/^(?:NOT)/,/^(?:IN)/,/^(?:true)/,/^(?:false)/,/^(?:NULL)/,/^(?:UNDEFINED)/,/^(?:[0-9.-]+)/,/^(?:[@A-Za-z0-9_]+)/,/^(?:'[^']*')/,/^(?:$)/,/^(?:\s+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}