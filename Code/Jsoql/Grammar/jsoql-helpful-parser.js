/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"Stmt":4,"EOF":5,"Quoted":6,"Quotation":7,"Boolean":8,"True":9,"False":10,"Identifier":11,"PlainIdentifier":12,"Property":13,"[":14,"Number":15,"]":16,".":17,"Operator":18,"AND":19,"OR":20,"=":21,"!=":22,"<":23,">":24,"<=":25,">=":26,"+":27,"-":28,"/":29,"*":30,"Expression":31,"(":32,")":33,"ExpressionList":34,"Object":35,"IS":36,"Null":37,"Undefined":38,"NOT":39,"KeyValue":40,":":41,"KeyValueList":42,",":43,"{":44,"}":45,"TrailingDot":46,"FinalDot":47,"Selectable":48,"AS":49,"SelectList":50,"FromTarget":51,"AliasedFromTarget":52,"FromTargets":53,"JOIN":54,"ON":55,"OVER":56,"OrderByExpression":57,"ASC":58,"DESC":59,"OrderByList":60,"OrderByClause":61,"ORDERBY":62,"WhereClause":63,"WHERE":64,"FromClause":65,"FROM":66,"SelectClause":67,"SELECTTOP":68,"SELECT":69,"GroupByClause":70,"GROUPBY":71,"HAVING":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"Quotation",9:"True",10:"False",12:"PlainIdentifier",14:"[",15:"Number",16:"]",17:".",19:"AND",20:"OR",21:"=",22:"!=",23:"<",24:">",25:"<=",26:">=",27:"+",28:"-",29:"/",30:"*",32:"(",33:")",36:"IS",37:"Null",38:"Undefined",39:"NOT",41:":",43:",",44:"{",45:"}",46:"TrailingDot",47:"FinalDot",49:"AS",54:"JOIN",55:"ON",56:"OVER",58:"ASC",59:"DESC",62:"ORDERBY",64:"WHERE",66:"FROM",68:"SELECTTOP",69:"SELECT",71:"GROUPBY",72:"HAVING"},
productions_: [0,[3,2],[6,1],[8,1],[8,1],[11,1],[13,1],[13,4],[13,3],[13,6],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[31,3],[31,4],[31,1],[31,1],[31,1],[31,1],[31,1],[31,3],[31,3],[31,3],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[40,3],[42,1],[42,3],[35,3],[34,1],[34,3],[34,2],[34,2],[34,2],[48,1],[48,3],[50,1],[50,3],[50,2],[50,2],[51,1],[51,1],[51,1],[52,3],[53,1],[53,1],[53,5],[53,5],[53,4],[53,6],[53,6],[53,4],[53,4],[53,2],[57,1],[57,2],[57,2],[60,3],[60,1],[60,2],[60,2],[60,2],[61,2],[61,1],[63,2],[63,1],[63,3],[63,3],[65,2],[67,3],[67,2],[67,1],[70,2],[70,4],[70,1],[4,2],[4,3],[4,3],[4,4],[4,3],[4,4],[4,4],[4,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:this.$ = { Quoted: $$[$0].replace(/'/g, "")}
break;
case 3:this.$ = true
break;
case 4:this.$ = false
break;
case 6:this.$ = { Property: $$[$0]}
break;
case 7:this.$ = { Property: $$[$0-3], Index: $$[$0-1]}
break;
case 8:this.$ = { Property: $$[$0-2], Child: $$[$0]}
break;
case 9:this.$ = { Property: $$[$0-5], Index: $$[$0-3], Child: $$[$0]}
break;
case 22:this.$ = { Call: $$[$0-2], Args: []}
break;
case 23:this.$ = { Call: $$[$0-3], Args: $$[$0-1]}
break;
case 28:this.$ = parseFloat($$[$0])
break;
case 29:this.$ = {SubQuery: $$[$0-1]}
break;
case 30:this.$ = { Call: "IsNull", Args: [$$[$0-2]] }
break;
case 31:this.$ = { Call: "IsUndefined", Args: [$$[$0-2]] }
break;
case 32:this.$ = { Call: "Not", Args: [$$[$0]] }
break;
case 33:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 34:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 35:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 36:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 37:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 38:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 39:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 40:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 41:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 42:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 43:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 44:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 45:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 46:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 47:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 48:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 49:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 50:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 51:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 52:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 53:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 54:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 55:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 56:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 57:this.$ = {Key: $$[$0-2], Value: $$[$0]}
break;
case 58:this.$ = [$$[$0]]
break;
case 59:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 60:this.$ = {KeyValues: $$[$0-1]}
break;
case 61:this.$ = [$$[$0]]
break;
case 62:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 63:this.$ = $$[$0-1]
break;
case 64:this.$ = $$[$0-1]
break;
case 65:this.$ = $$[$0-1]
break;
case 66:this.$ = {Expression: $$[$0]}
break;
case 67:this.$ = { Expression: $$[$0-2], Alias: $$[$0]}
break;
case 68:this.$ = [$$[$0]]
break;
case 69:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 70:this.$ = $$[$0-1]
break;
case 71:this.$ = $$[$0-1]
break;
case 75:this.$ = {Target: $$[$0-2], Alias: $$[$0]}
break;
case 78:this.$ = { Left: $$[$0-4], Right: $$[$0-2], Expression: $$[$0]}
break;
case 79:this.$ = { Left: $$[$0-4], Over: $$[$0-2], Alias: $$[$0]}
break;
case 80:this.$ = { Left: $$[$0-3], Right: $$[$0-1], Expression: null}
break;
case 81:this.$ = { Left: $$[$0-5], Right: $$[$0-3], Expression: null}
break;
case 82:this.$ = { Left: $$[$0-5], Right: $$[$0-3], Expression: null}
break;
case 83:this.$ = $$[$0-3]
break;
case 84:this.$ = $$[$0-3]
break;
case 85:this.$ = $$[$0-1]
break;
case 86: this.$ = {Expression: $$[$0], Asc: true}
break;
case 87:this.$ = {Expression: $$[$0-1], Asc: true}
break;
case 88:this.$ = {Expression: $$[$0-1], Asc: false}
break;
case 89:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 90:this.$ = [$$[$0]]
break;
case 91:this.$ = $$[$0-1]
break;
case 92:this.$ = $$[$0-1]
break;
case 93:this.$ = $$[$0-1]
break;
case 94:this.$ = $$[$0]
break;
case 95:this.$ = []
break;
case 96:this.$ = $$[$0]
break;
case 97:this.$ = null
break;
case 98:this.$ = $$[$0-1]
break;
case 99:this.$ = $$[$0-1]
break;
case 100:this.$ = $$[$0]
break;
case 101:this.$ = { SelectList: $$[$0], Limit: $$[$0-1]}
break;
case 102:this.$ = { SelectList: $$[$0]}
break;
case 103:this.$ = { SelectList: []}
break;
case 104:this.$ = { Groupings: $$[$0]}
break;
case 105:this.$ = { Groupings: $$[$0-2], Having: $$[$0]}
break;
case 106:this.$ = { Groupings: []}
break;
case 107:this.$ = {Select:$$[$0-1],From:$$[$0],Positions:{Select:_$[$0-1],From:_$[$0]}}
break;
case 108:this.$ = {Select:$$[$0-2],From:$$[$0-1],Where:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],Where:_$[$0]}}
break;
case 109:this.$ = {Select:$$[$0-2],From:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],OrderBy:_$[$0]}}
break;
case 110:this.$ = {Select:$$[$0-3],From:$$[$0-2],Where:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-3],From:_$[$0-2],Where:_$[$0-1],OrderBy:_$[$0]}}
break;
case 111:this.$ = {Select:$$[$0-2],From:$$[$0-1],GroupBy:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],GroupBy:_$[$0]}}
break;
case 112:this.$ = {Select:$$[$0-3],From:$$[$0-2],Where:$$[$0-1],GroupBy:$$[$0],Positions:{Select:_$[$0-3],From:_$[$0-2],Where:_$[$0-1],GroupBy:_$[$0]}}
break;
case 113:this.$ = {Select:$$[$0-3],From:$$[$0-2],GroupBy:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-3],FromWhere:_$[$0-2],GroupBy:_$[$0-1],OrderBy:_$[$0]}}
break;
case 114:this.$ = {Select:$$[$0-4],From:$$[$0-3],Where:$$[$0-2],GroupBy:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-4],From:_$[$0-3],Where:_$[$0-2],GroupBy:_$[$0-1],OrderBy:_$[$0]}}
break;
}
},
table: [{3:1,4:2,67:3,68:[1,4],69:[1,5]},{1:[3]},{5:[1,6]},{65:7,66:[1,8]},{15:[1,9]},{6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:12,15:[1,18],31:13,32:[1,19],35:17,39:[1,20],44:[1,25],48:11,50:10,66:[2,103]},{1:[2,1]},{5:[2,107],33:[2,107],61:27,62:[1,30],63:26,64:[1,29],70:28,71:[1,31]},{6:36,7:[1,22],11:38,12:[1,21],13:35,35:37,44:[1,25],51:33,52:34,53:32},{6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:12,15:[1,18],31:13,32:[1,19],35:17,39:[1,20],44:[1,25],48:11,50:39},{43:[1,40],66:[2,102]},{43:[2,68],66:[2,68]},{19:[2,24],20:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[2,24],30:[2,24],36:[2,24],43:[2,24],46:[1,41],49:[2,24],66:[2,24]},{19:[1,44],20:[1,45],21:[1,46],22:[1,47],23:[1,48],24:[1,49],25:[1,50],26:[1,51],27:[1,52],28:[1,53],29:[1,54],30:[1,55],36:[1,43],43:[2,66],49:[1,42],66:[2,66]},{5:[2,6],14:[1,56],17:[1,57],19:[2,6],20:[2,6],21:[2,6],22:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],27:[2,6],28:[2,6],29:[2,6],30:[2,6],32:[1,58],33:[2,6],36:[2,6],43:[2,6],45:[2,6],46:[2,6],47:[2,6],49:[2,6],54:[2,6],56:[2,6],58:[2,6],59:[2,6],62:[2,6],64:[2,6],66:[2,6],71:[2,6],72:[2,6]},{5:[2,25],19:[2,25],20:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],25:[2,25],26:[2,25],27:[2,25],28:[2,25],29:[2,25],30:[2,25],33:[2,25],36:[2,25],43:[2,25],45:[2,25],46:[2,25],47:[2,25],49:[2,25],54:[2,25],56:[2,25],58:[2,25],59:[2,25],62:[2,25],64:[2,25],66:[2,25],71:[2,25],72:[2,25]},{5:[2,26],19:[2,26],20:[2,26],21:[2,26],22:[2,26],23:[2,26],24:[2,26],25:[2,26],26:[2,26],27:[2,26],28:[2,26],29:[2,26],30:[2,26],33:[2,26],36:[2,26],43:[2,26],45:[2,26],46:[2,26],47:[2,26],49:[2,26],54:[2,26],56:[2,26],58:[2,26],59:[2,26],62:[2,26],64:[2,26],66:[2,26],71:[2,26],72:[2,26]},{5:[2,27],19:[2,27],20:[2,27],21:[2,27],22:[2,27],23:[2,27],24:[2,27],25:[2,27],26:[2,27],27:[2,27],28:[2,27],29:[2,27],30:[2,27],33:[2,27],36:[2,27],43:[2,27],45:[2,27],46:[2,27],47:[2,27],49:[2,27],54:[2,27],56:[2,27],58:[2,27],59:[2,27],62:[2,27],64:[2,27],66:[2,27],71:[2,27],72:[2,27]},{5:[2,28],19:[2,28],20:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],25:[2,28],26:[2,28],27:[2,28],28:[2,28],29:[2,28],30:[2,28],33:[2,28],36:[2,28],43:[2,28],45:[2,28],46:[2,28],47:[2,28],49:[2,28],54:[2,28],56:[2,28],58:[2,28],59:[2,28],62:[2,28],64:[2,28],66:[2,28],71:[2,28],72:[2,28]},{4:59,67:3,68:[1,4],69:[1,5]},{6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],31:60,32:[1,19],35:17,39:[1,20],44:[1,25]},{5:[2,5],14:[2,5],17:[2,5],19:[2,5],20:[2,5],21:[2,5],22:[2,5],23:[2,5],24:[2,5],25:[2,5],26:[2,5],27:[2,5],28:[2,5],29:[2,5],30:[2,5],32:[2,5],33:[2,5],36:[2,5],41:[2,5],43:[2,5],45:[2,5],46:[2,5],47:[2,5],49:[2,5],54:[2,5],55:[2,5],56:[2,5],58:[2,5],59:[2,5],62:[2,5],64:[2,5],66:[2,5],71:[2,5],72:[2,5]},{5:[2,2],19:[2,2],20:[2,2],21:[2,2],22:[2,2],23:[2,2],24:[2,2],25:[2,2],26:[2,2],27:[2,2],28:[2,2],29:[2,2],30:[2,2],33:[2,2],36:[2,2],43:[2,2],45:[2,2],46:[2,2],47:[2,2],49:[2,2],54:[2,2],56:[2,2],58:[2,2],59:[2,2],62:[2,2],64:[2,2],66:[2,2],71:[2,2],72:[2,2]},{5:[2,3],19:[2,3],20:[2,3],21:[2,3],22:[2,3],23:[2,3],24:[2,3],25:[2,3],26:[2,3],27:[2,3],28:[2,3],29:[2,3],30:[2,3],33:[2,3],36:[2,3],43:[2,3],45:[2,3],46:[2,3],47:[2,3],49:[2,3],54:[2,3],56:[2,3],58:[2,3],59:[2,3],62:[2,3],64:[2,3],66:[2,3],71:[2,3],72:[2,3]},{5:[2,4],19:[2,4],20:[2,4],21:[2,4],22:[2,4],23:[2,4],24:[2,4],25:[2,4],26:[2,4],27:[2,4],28:[2,4],29:[2,4],30:[2,4],33:[2,4],36:[2,4],43:[2,4],45:[2,4],46:[2,4],47:[2,4],49:[2,4],54:[2,4],56:[2,4],58:[2,4],59:[2,4],62:[2,4],64:[2,4],66:[2,4],71:[2,4],72:[2,4]},{11:64,12:[1,21],40:63,42:62},{5:[2,108],33:[2,108],61:65,62:[1,30],70:66,71:[1,31]},{5:[2,109],33:[2,109]},{5:[2,111],33:[2,111],61:67,62:[1,30]},{5:[2,97],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],31:68,32:[1,19],33:[2,97],35:17,39:[1,20],44:[1,25],62:[2,97],71:[2,97]},{5:[2,95],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],31:71,32:[1,19],33:[2,95],35:17,39:[1,20],44:[1,25],57:70,60:69},{5:[2,106],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],31:73,32:[1,19],33:[2,106],34:72,35:17,39:[1,20],44:[1,25],62:[2,106]},{5:[2,100],33:[2,100],54:[1,74],56:[1,75],62:[2,100],64:[2,100],71:[2,100]},{5:[2,76],33:[2,76],49:[1,76],54:[2,76],56:[2,76],62:[2,76],64:[2,76],71:[2,76]},{5:[2,77],33:[2,77],54:[2,77],56:[2,77],62:[2,77],64:[2,77],71:[2,77]},{5:[2,72],33:[2,72],49:[2,72],54:[2,72],56:[2,72],62:[2,72],64:[2,72],71:[2,72]},{5:[2,73],33:[2,73],49:[2,73],54:[2,73],56:[2,73],62:[2,73],64:[2,73],71:[2,73]},{5:[2,74],33:[2,74],49:[2,74],54:[2,74],56:[2,74],62:[2,74],64:[2,74],71:[2,74]},{5:[2,6],14:[1,56],17:[1,57],19:[2,6],20:[2,6],21:[2,6],22:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],27:[2,6],28:[2,6],29:[2,6],30:[2,6],33:[2,6],36:[2,6],43:[2,6],45:[2,6],46:[2,6],47:[2,6],49:[2,6],54:[2,6],56:[2,6],58:[2,6],59:[2,6],62:[2,6],64:[2,6],66:[2,6],71:[2,6],72:[2,6]},{43:[1,40],66:[2,101]},{6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],31:13,32:[1,19],35:17,39:[1,20],43:[2,71],44:[1,25],48:77,66:[2,71]},{43:[2,70],66:[2,70]},{11:78,12:[1,21]},{37:[1,79],38:[1,80]},{5:[2,45],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],19:[2,45],20:[2,45],21:[2,45],22:[2,45],23:[2,45],24:[2,45],25:[2,45],26:[2,45],27:[2,45],28:[2,45],29:[2,45],30:[2,45],31:81,32:[1,19],33:[2,45],35:17,36:[2,45],39:[1,20],43:[2,45],44:[1,25],45:[2,45],46:[2,45],47:[2,45],49:[2,45],54:[2,45],56:[2,45],58:[2,45],59:[2,45],62:[2,45],64:[2,45],66:[2,45],71:[2,45],72:[2,45]},{5:[2,46],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],19:[2,46],20:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],27:[2,46],28:[2,46],29:[2,46],30:[2,46],31:82,32:[1,19],33:[2,46],35:17,36:[2,46],39:[1,20],43:[2,46],44:[1,25],45:[2,46],46:[2,46],47:[2,46],49:[2,46],54:[2,46],56:[2,46],58:[2,46],59:[2,46],62:[2,46],64:[2,46],66:[2,46],71:[2,46],72:[2,46]},{5:[2,47],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],19:[2,47],20:[2,47],21:[2,47],22:[2,47],23:[2,47],24:[2,47],25:[2,47],26:[2,47],27:[2,47],28:[2,47],29:[2,47],30:[2,47],31:83,32:[1,19],33:[2,47],35:17,36:[2,47],39:[1,20],43:[2,47],44:[1,25],45:[2,47],46:[2,47],47:[2,47],49:[2,47],54:[2,47],56:[2,47],58:[2,47],59:[2,47],62:[2,47],64:[2,47],66:[2,47],71:[2,47],72:[2,47]},{5:[2,48],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],19:[2,48],20:[2,48],21:[2,48],22:[2,48],23:[2,48],24:[2,48],25:[2,48],26:[2,48],27:[2,48],28:[2,48],29:[2,48],30:[2,48],31:84,32:[1,19],33:[2,48],35:17,36:[2,48],39:[1,20],43:[2,48],44:[1,25],45:[2,48],46:[2,48],47:[2,48],49:[2,48],54:[2,48],56:[2,48],58:[2,48],59:[2,48],62:[2,48],64:[2,48],66:[2,48],71:[2,48],72:[2,48]},{5:[2,49],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],19:[2,49],20:[2,49],21:[2,49],22:[2,49],23:[2,49],24:[2,49],25:[2,49],26:[2,49],27:[2,49],28:[2,49],29:[2,49],30:[2,49],31:85,32:[1,19],33:[2,49],35:17,36:[2,49],39:[1,20],43:[2,49],44:[1,25],45:[2,49],46:[2,49],47:[2,49],49:[2,49],54:[2,49],56:[2,49],58:[2,49],59:[2,49],62:[2,49],64:[2,49],66:[2,49],71:[2,49],72:[2,49]},{5:[2,50],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],19:[2,50],20:[2,50],21:[2,50],22:[2,50],23:[2,50],24:[2,50],25:[2,50],26:[2,50],27:[2,50],28:[2,50],29:[2,50],30:[2,50],31:86,32:[1,19],33:[2,50],35:17,36:[2,50],39:[1,20],43:[2,50],44:[1,25],45:[2,50],46:[2,50],47:[2,50],49:[2,50],54:[2,50],56:[2,50],58:[2,50],59:[2,50],62:[2,50],64:[2,50],66:[2,50],71:[2,50],72:[2,50]},{5:[2,51],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],19:[2,51],20:[2,51],21:[2,51],22:[2,51],23:[2,51],24:[2,51],25:[2,51],26:[2,51],27:[2,51],28:[2,51],29:[2,51],30:[2,51],31:87,32:[1,19],33:[2,51],35:17,36:[2,51],39:[1,20],43:[2,51],44:[1,25],45:[2,51],46:[2,51],47:[2,51],49:[2,51],54:[2,51],56:[2,51],58:[2,51],59:[2,51],62:[2,51],64:[2,51],66:[2,51],71:[2,51],72:[2,51]},{5:[2,52],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],19:[2,52],20:[2,52],21:[2,52],22:[2,52],23:[2,52],24:[2,52],25:[2,52],26:[2,52],27:[2,52],28:[2,52],29:[2,52],30:[2,52],31:88,32:[1,19],33:[2,52],35:17,36:[2,52],39:[1,20],43:[2,52],44:[1,25],45:[2,52],46:[2,52],47:[2,52],49:[2,52],54:[2,52],56:[2,52],58:[2,52],59:[2,52],62:[2,52],64:[2,52],66:[2,52],71:[2,52],72:[2,52]},{5:[2,53],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],19:[2,53],20:[2,53],21:[2,53],22:[2,53],23:[2,53],24:[2,53],25:[2,53],26:[2,53],27:[2,53],28:[2,53],29:[2,53],30:[2,53],31:89,32:[1,19],33:[2,53],35:17,36:[2,53],39:[1,20],43:[2,53],44:[1,25],45:[2,53],46:[2,53],47:[2,53],49:[2,53],54:[2,53],56:[2,53],58:[2,53],59:[2,53],62:[2,53],64:[2,53],66:[2,53],71:[2,53],72:[2,53]},{5:[2,54],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],19:[2,54],20:[2,54],21:[2,54],22:[2,54],23:[2,54],24:[2,54],25:[2,54],26:[2,54],27:[2,54],28:[2,54],29:[2,54],30:[2,54],31:90,32:[1,19],33:[2,54],35:17,36:[2,54],39:[1,20],43:[2,54],44:[1,25],45:[2,54],46:[2,54],47:[2,54],49:[2,54],54:[2,54],56:[2,54],58:[2,54],59:[2,54],62:[2,54],64:[2,54],66:[2,54],71:[2,54],72:[2,54]},{5:[2,55],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],19:[2,55],20:[2,55],21:[2,55],22:[2,55],23:[2,55],24:[2,55],25:[2,55],26:[2,55],27:[2,55],28:[2,55],29:[2,55],30:[2,55],31:91,32:[1,19],33:[2,55],35:17,36:[2,55],39:[1,20],43:[2,55],44:[1,25],45:[2,55],46:[2,55],47:[2,55],49:[2,55],54:[2,55],56:[2,55],58:[2,55],59:[2,55],62:[2,55],64:[2,55],66:[2,55],71:[2,55],72:[2,55]},{5:[2,56],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],19:[2,56],20:[2,56],21:[2,56],22:[2,56],23:[2,56],24:[2,56],25:[2,56],26:[2,56],27:[2,56],28:[2,56],29:[2,56],30:[2,56],31:92,32:[1,19],33:[2,56],35:17,36:[2,56],39:[1,20],43:[2,56],44:[1,25],45:[2,56],46:[2,56],47:[2,56],49:[2,56],54:[2,56],56:[2,56],58:[2,56],59:[2,56],62:[2,56],64:[2,56],66:[2,56],71:[2,56],72:[2,56]},{15:[1,93]},{11:38,12:[1,21],13:94},{6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],31:73,32:[1,19],33:[1,95],34:96,35:17,39:[1,20],44:[1,25]},{33:[1,97]},{5:[2,32],19:[1,44],20:[1,45],21:[1,46],22:[1,47],23:[1,48],24:[1,49],25:[1,50],26:[1,51],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,32],36:[1,43],43:[2,32],45:[2,32],46:[2,32],47:[2,32],49:[2,32],54:[2,32],56:[2,32],58:[2,32],59:[2,32],62:[2,32],64:[2,32],66:[2,32],71:[2,32],72:[2,32]},{5:[2,24],19:[2,24],20:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[2,24],30:[2,24],33:[2,24],36:[2,24],43:[2,24],45:[2,24],46:[2,24],47:[2,24],49:[2,24],54:[2,24],56:[2,24],58:[2,24],59:[2,24],62:[2,24],64:[2,24],66:[2,24],71:[2,24],72:[2,24]},{43:[1,99],45:[1,98]},{43:[2,58],45:[2,58]},{41:[1,100]},{5:[2,110],33:[2,110]},{5:[2,112],33:[2,112],61:101,62:[1,30]},{5:[2,113],33:[2,113]},{5:[2,96],19:[1,44],20:[1,45],21:[1,46],22:[1,47],23:[1,48],24:[1,49],25:[1,50],26:[1,51],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,96],36:[1,43],46:[1,102],47:[1,103],62:[2,96],71:[2,96]},{5:[2,94],33:[2,94],43:[1,104],46:[1,105],47:[1,106]},{5:[2,90],33:[2,90],43:[2,90],46:[2,90],47:[2,90]},{5:[2,86],19:[1,44],20:[1,45],21:[1,46],22:[1,47],23:[1,48],24:[1,49],25:[1,50],26:[1,51],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,86],36:[1,43],43:[2,86],46:[2,86],47:[2,86],58:[1,107],59:[1,108]},{5:[2,104],33:[2,104],43:[1,110],46:[1,111],47:[1,112],62:[2,104],72:[1,109]},{5:[2,61],19:[1,44],20:[1,45],21:[1,46],22:[1,47],23:[1,48],24:[1,49],25:[1,50],26:[1,51],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,61],36:[1,43],43:[2,61],46:[2,61],47:[2,61],62:[2,61],72:[2,61]},{6:36,7:[1,22],11:38,12:[1,21],13:35,35:37,44:[1,25],51:114,52:113},{5:[2,85],11:38,12:[1,21],13:115,33:[2,85],54:[2,85],56:[2,85],62:[2,85],64:[2,85],71:[2,85]},{11:116,12:[1,21]},{43:[2,69],66:[2,69]},{43:[2,67],66:[2,67]},{5:[2,30],19:[2,30],20:[2,30],21:[2,30],22:[2,30],23:[2,30],24:[2,30],25:[2,30],26:[2,30],27:[2,30],28:[2,30],29:[2,30],30:[2,30],33:[2,30],36:[2,30],43:[2,30],45:[2,30],46:[2,30],47:[2,30],49:[2,30],54:[2,30],56:[2,30],58:[2,30],59:[2,30],62:[2,30],64:[2,30],66:[2,30],71:[2,30],72:[2,30]},{5:[2,31],19:[2,31],20:[2,31],21:[2,31],22:[2,31],23:[2,31],24:[2,31],25:[2,31],26:[2,31],27:[2,31],28:[2,31],29:[2,31],30:[2,31],33:[2,31],36:[2,31],43:[2,31],45:[2,31],46:[2,31],47:[2,31],49:[2,31],54:[2,31],56:[2,31],58:[2,31],59:[2,31],62:[2,31],64:[2,31],66:[2,31],71:[2,31],72:[2,31]},{5:[2,33],19:[2,33],20:[2,33],21:[1,46],22:[1,47],23:[1,48],24:[1,49],25:[1,50],26:[1,51],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,33],36:[2,33],43:[2,33],45:[2,33],46:[2,33],47:[2,33],49:[2,33],54:[2,33],56:[2,33],58:[2,33],59:[2,33],62:[2,33],64:[2,33],66:[2,33],71:[2,33],72:[2,33]},{5:[2,34],19:[2,34],20:[2,34],21:[1,46],22:[1,47],23:[1,48],24:[1,49],25:[1,50],26:[1,51],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,34],36:[2,34],43:[2,34],45:[2,34],46:[2,34],47:[2,34],49:[2,34],54:[2,34],56:[2,34],58:[2,34],59:[2,34],62:[2,34],64:[2,34],66:[2,34],71:[2,34],72:[2,34]},{5:[2,35],19:[2,35],20:[2,35],21:[2,35],22:[2,35],23:[2,35],24:[2,35],25:[2,35],26:[2,35],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,35],36:[2,35],43:[2,35],45:[2,35],46:[2,35],47:[2,35],49:[2,35],54:[2,35],56:[2,35],58:[2,35],59:[2,35],62:[2,35],64:[2,35],66:[2,35],71:[2,35],72:[2,35]},{5:[2,36],19:[2,36],20:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],25:[2,36],26:[2,36],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,36],36:[2,36],43:[2,36],45:[2,36],46:[2,36],47:[2,36],49:[2,36],54:[2,36],56:[2,36],58:[2,36],59:[2,36],62:[2,36],64:[2,36],66:[2,36],71:[2,36],72:[2,36]},{5:[2,37],19:[2,37],20:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],25:[2,37],26:[2,37],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,37],36:[2,37],43:[2,37],45:[2,37],46:[2,37],47:[2,37],49:[2,37],54:[2,37],56:[2,37],58:[2,37],59:[2,37],62:[2,37],64:[2,37],66:[2,37],71:[2,37],72:[2,37]},{5:[2,38],19:[2,38],20:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],25:[2,38],26:[2,38],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,38],36:[2,38],43:[2,38],45:[2,38],46:[2,38],47:[2,38],49:[2,38],54:[2,38],56:[2,38],58:[2,38],59:[2,38],62:[2,38],64:[2,38],66:[2,38],71:[2,38],72:[2,38]},{5:[2,39],19:[2,39],20:[2,39],21:[2,39],22:[2,39],23:[2,39],24:[2,39],25:[2,39],26:[2,39],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,39],36:[2,39],43:[2,39],45:[2,39],46:[2,39],47:[2,39],49:[2,39],54:[2,39],56:[2,39],58:[2,39],59:[2,39],62:[2,39],64:[2,39],66:[2,39],71:[2,39],72:[2,39]},{5:[2,40],19:[2,40],20:[2,40],21:[2,40],22:[2,40],23:[2,40],24:[2,40],25:[2,40],26:[2,40],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,40],36:[2,40],43:[2,40],45:[2,40],46:[2,40],47:[2,40],49:[2,40],54:[2,40],56:[2,40],58:[2,40],59:[2,40],62:[2,40],64:[2,40],66:[2,40],71:[2,40],72:[2,40]},{5:[2,41],19:[2,41],20:[2,41],21:[2,41],22:[2,41],23:[2,41],24:[2,41],25:[2,41],26:[2,41],27:[2,41],28:[2,41],29:[1,54],30:[1,55],33:[2,41],36:[2,41],43:[2,41],45:[2,41],46:[2,41],47:[2,41],49:[2,41],54:[2,41],56:[2,41],58:[2,41],59:[2,41],62:[2,41],64:[2,41],66:[2,41],71:[2,41],72:[2,41]},{5:[2,42],19:[2,42],20:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],27:[2,42],28:[2,42],29:[1,54],30:[1,55],33:[2,42],36:[2,42],43:[2,42],45:[2,42],46:[2,42],47:[2,42],49:[2,42],54:[2,42],56:[2,42],58:[2,42],59:[2,42],62:[2,42],64:[2,42],66:[2,42],71:[2,42],72:[2,42]},{5:[2,43],19:[2,43],20:[2,43],21:[2,43],22:[2,43],23:[2,43],24:[2,43],25:[2,43],26:[2,43],27:[2,43],28:[2,43],29:[2,43],30:[2,43],33:[2,43],36:[2,43],43:[2,43],45:[2,43],46:[2,43],47:[2,43],49:[2,43],54:[2,43],56:[2,43],58:[2,43],59:[2,43],62:[2,43],64:[2,43],66:[2,43],71:[2,43],72:[2,43]},{5:[2,44],19:[2,44],20:[2,44],21:[2,44],22:[2,44],23:[2,44],24:[2,44],25:[2,44],26:[2,44],27:[2,44],28:[2,44],29:[2,44],30:[2,44],33:[2,44],36:[2,44],43:[2,44],45:[2,44],46:[2,44],47:[2,44],49:[2,44],54:[2,44],56:[2,44],58:[2,44],59:[2,44],62:[2,44],64:[2,44],66:[2,44],71:[2,44],72:[2,44]},{16:[1,117]},{5:[2,8],19:[2,8],20:[2,8],21:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],27:[2,8],28:[2,8],29:[2,8],30:[2,8],33:[2,8],36:[2,8],43:[2,8],45:[2,8],46:[2,8],47:[2,8],49:[2,8],54:[2,8],56:[2,8],58:[2,8],59:[2,8],62:[2,8],64:[2,8],66:[2,8],71:[2,8],72:[2,8]},{5:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],27:[2,22],28:[2,22],29:[2,22],30:[2,22],33:[2,22],36:[2,22],43:[2,22],45:[2,22],46:[2,22],47:[2,22],49:[2,22],54:[2,22],56:[2,22],58:[2,22],59:[2,22],62:[2,22],64:[2,22],66:[2,22],71:[2,22],72:[2,22]},{33:[1,118],43:[1,110],46:[1,111],47:[1,112]},{5:[2,29],19:[2,29],20:[2,29],21:[2,29],22:[2,29],23:[2,29],24:[2,29],25:[2,29],26:[2,29],27:[2,29],28:[2,29],29:[2,29],30:[2,29],33:[2,29],36:[2,29],43:[2,29],45:[2,29],46:[2,29],47:[2,29],49:[2,29],54:[2,29],56:[2,29],58:[2,29],59:[2,29],62:[2,29],64:[2,29],66:[2,29],71:[2,29],72:[2,29]},{5:[2,60],19:[2,60],20:[2,60],21:[2,60],22:[2,60],23:[2,60],24:[2,60],25:[2,60],26:[2,60],27:[2,60],28:[2,60],29:[2,60],30:[2,60],33:[2,60],36:[2,60],43:[2,60],45:[2,60],46:[2,60],47:[2,60],49:[2,60],54:[2,60],56:[2,60],58:[2,60],59:[2,60],62:[2,60],64:[2,60],66:[2,60],71:[2,60],72:[2,60]},{11:64,12:[1,21],40:119},{6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],31:120,32:[1,19],35:17,39:[1,20],44:[1,25]},{5:[2,114],33:[2,114]},{5:[2,98],33:[2,98],62:[2,98],71:[2,98]},{5:[2,99],33:[2,99],62:[2,99],71:[2,99]},{5:[2,93],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],31:71,32:[1,19],33:[2,93],35:17,39:[1,20],43:[2,93],44:[1,25],46:[2,93],47:[2,93],57:121},{5:[2,91],33:[2,91],43:[2,91],46:[2,91],47:[2,91]},{5:[2,92],33:[2,92],43:[2,92],46:[2,92],47:[2,92]},{5:[2,87],33:[2,87],43:[2,87],46:[2,87],47:[2,87]},{5:[2,88],33:[2,88],43:[2,88],46:[2,88],47:[2,88]},{6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],31:122,32:[1,19],35:17,39:[1,20],44:[1,25]},{5:[2,65],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],31:123,32:[1,19],33:[2,65],35:17,39:[1,20],43:[2,65],44:[1,25],46:[2,65],47:[2,65],62:[2,65],72:[2,65]},{5:[2,63],33:[2,63],43:[2,63],46:[2,63],47:[2,63],62:[2,63],72:[2,63]},{5:[2,64],33:[2,64],43:[2,64],46:[2,64],47:[2,64],62:[2,64],72:[2,64]},{55:[1,124]},{49:[1,76]},{46:[1,127],47:[1,126],49:[1,125]},{5:[2,75],33:[2,75],54:[2,75],55:[2,75],56:[2,75],62:[2,75],64:[2,75],71:[2,75]},{5:[2,7],17:[1,128],19:[2,7],20:[2,7],21:[2,7],22:[2,7],23:[2,7],24:[2,7],25:[2,7],26:[2,7],27:[2,7],28:[2,7],29:[2,7],30:[2,7],33:[2,7],36:[2,7],43:[2,7],45:[2,7],46:[2,7],47:[2,7],49:[2,7],54:[2,7],56:[2,7],58:[2,7],59:[2,7],62:[2,7],64:[2,7],66:[2,7],71:[2,7],72:[2,7]},{5:[2,23],19:[2,23],20:[2,23],21:[2,23],22:[2,23],23:[2,23],24:[2,23],25:[2,23],26:[2,23],27:[2,23],28:[2,23],29:[2,23],30:[2,23],33:[2,23],36:[2,23],43:[2,23],45:[2,23],46:[2,23],47:[2,23],49:[2,23],54:[2,23],56:[2,23],58:[2,23],59:[2,23],62:[2,23],64:[2,23],66:[2,23],71:[2,23],72:[2,23]},{43:[2,59],45:[2,59]},{19:[1,44],20:[1,45],21:[1,46],22:[1,47],23:[1,48],24:[1,49],25:[1,50],26:[1,51],27:[1,52],28:[1,53],29:[1,54],30:[1,55],36:[1,43],43:[2,57],45:[2,57]},{5:[2,89],33:[2,89],43:[2,89],46:[2,89],47:[2,89]},{5:[2,105],19:[1,44],20:[1,45],21:[1,46],22:[1,47],23:[1,48],24:[1,49],25:[1,50],26:[1,51],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,105],36:[1,43],62:[2,105]},{5:[2,62],19:[1,44],20:[1,45],21:[1,46],22:[1,47],23:[1,48],24:[1,49],25:[1,50],26:[1,51],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,62],36:[1,43],43:[2,62],46:[2,62],47:[2,62],62:[2,62],72:[2,62]},{5:[2,80],6:15,7:[1,22],8:16,9:[1,23],10:[1,24],11:14,12:[1,21],13:61,15:[1,18],31:129,32:[1,19],33:[2,80],35:17,39:[1,20],44:[1,25],54:[2,80],56:[2,80],62:[2,80],64:[2,80],71:[2,80]},{12:[1,130]},{5:[2,83],33:[2,83],54:[2,83],56:[2,83],62:[2,83],64:[2,83],71:[2,83]},{5:[2,84],33:[2,84],54:[2,84],56:[2,84],62:[2,84],64:[2,84],71:[2,84]},{11:38,12:[1,21],13:131},{5:[2,78],19:[1,44],20:[1,45],21:[1,46],22:[1,47],23:[1,48],24:[1,49],25:[1,50],26:[1,51],27:[1,52],28:[1,53],29:[1,54],30:[1,55],33:[2,78],36:[1,43],46:[1,132],47:[1,133],54:[2,78],56:[2,78],62:[2,78],64:[2,78],71:[2,78]},{5:[2,79],33:[2,79],54:[2,79],56:[2,79],62:[2,79],64:[2,79],71:[2,79]},{5:[2,9],19:[2,9],20:[2,9],21:[2,9],22:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],27:[2,9],28:[2,9],29:[2,9],30:[2,9],33:[2,9],36:[2,9],43:[2,9],45:[2,9],46:[2,9],47:[2,9],49:[2,9],54:[2,9],56:[2,9],58:[2,9],59:[2,9],62:[2,9],64:[2,9],66:[2,9],71:[2,9],72:[2,9]},{5:[2,81],33:[2,81],54:[2,81],56:[2,81],62:[2,81],64:[2,81],71:[2,81]},{5:[2,82],33:[2,82],54:[2,82],56:[2,82],62:[2,82],64:[2,82],71:[2,82]}],
defaultActions: {6:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 46
break;
case 1:return 47
break;
case 2:return 17
break;
case 3:return 32
break;
case 4:return 33
break;
case 5:return 14
break;
case 6:return 16
break;
case 7:return 43
break;
case 8:return 25
break;
case 9:return 23
break;
case 10:return 26
break;
case 11:return 24
break;
case 12:return 22
break;
case 13:return 21
break;
case 14:return 27
break;
case 15:return 44
break;
case 16:return 45
break;
case 17:return 41
break;
case 18:return 68
break;
case 19:return 69
break;
case 20:return 66
break;
case 21:return 64
break;
case 22:return 71
break;
case 23:return 72
break;
case 24:return 62
break;
case 25:return 58
break;
case 26:return 59
break;
case 27:return 49
break;
case 28:return 54
break;
case 29:return 55
break;
case 30:return 56
break;
case 31:return 19
break;
case 32:return 20
break;
case 33:return 36
break;
case 34:return 39
break;
case 35:return 9
break;
case 36:return 10
break;
case 37:return 37
break;
case 38:return 38
break;
case 39:return 15
break;
case 40:return 12
break;
case 41:return 7
break;
case 42:return 5
break;
case 43:/* ignore whitespace */
break;
case 44:return 'INVALID'
break;
}
},
rules: [/^(?:\.\s)/,/^(?:\.$)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:\+)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:SELECT TOP)/,/^(?:SELECT)/,/^(?:FROM)/,/^(?:WHERE)/,/^(?:GROUP BY)/,/^(?:HAVING)/,/^(?:ORDER BY)/,/^(?:ASC)/,/^(?:DESC)/,/^(?:AS)/,/^(?:JOIN)/,/^(?:ON)/,/^(?:OVER)/,/^(?:AND)/,/^(?:OR)/,/^(?:IS)/,/^(?:NOT)/,/^(?:true)/,/^(?:false)/,/^(?:NULL)/,/^(?:UNDEFINED)/,/^(?:[0-9.-]+)/,/^(?:[@A-Za-z0-9_*]+)/,/^(?:'[^']*')/,/^(?:$)/,/^(?:\s+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}