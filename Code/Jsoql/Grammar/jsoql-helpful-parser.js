/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"Stmt":4,"EOF":5,"Quoted":6,"Quotation":7,"Boolean":8,"True":9,"False":10,"Identifier":11,"PlainIdentifier":12,"Property":13,"*":14,"[":15,"Number":16,"]":17,".":18,"Expression":19,"(":20,")":21,"ExpressionList":22,"Object":23,"IS":24,"Null":25,"Undefined":26,"NOT":27,"IN":28,"AND":29,"OR":30,"=":31,"!=":32,"<":33,">":34,"<=":35,">=":36,"+":37,"-":38,"/":39,"%prec":40,"UMINUS":41,"KeyValue":42,":":43,"KeyValueList":44,",":45,"{":46,"}":47,"TrailingDot":48,"FinalDot":49,"Selectable":50,"AS":51,"SelectList":52,"FromTarget":53,"AliasedFromTarget":54,"FromTargets":55,"JOIN":56,"ON":57,"OVER":58,"OrderByExpression":59,"ASC":60,"DESC":61,"OrderByList":62,"OrderByClause":63,"ORDERBY":64,"WhereClause":65,"WHERE":66,"FromClause":67,"FROM":68,"SelectClause":69,"SELECTTOP":70,"SELECT":71,"GroupByClause":72,"GROUPBY":73,"HAVING":74,"UNION":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"Quotation",9:"True",10:"False",12:"PlainIdentifier",14:"*",15:"[",16:"Number",17:"]",18:".",20:"(",21:")",24:"IS",25:"Null",26:"Undefined",27:"NOT",28:"IN",29:"AND",30:"OR",31:"=",32:"!=",33:"<",34:">",35:"<=",36:">=",37:"+",38:"-",39:"/",40:"%prec",41:"UMINUS",43:":",45:",",46:"{",47:"}",48:"TrailingDot",49:"FinalDot",51:"AS",56:"JOIN",57:"ON",58:"OVER",60:"ASC",61:"DESC",64:"ORDERBY",66:"WHERE",68:"FROM",70:"SELECTTOP",71:"SELECT",73:"GROUPBY",74:"HAVING",75:"UNION"},
productions_: [0,[3,2],[6,1],[8,1],[8,1],[11,1],[13,1],[13,1],[13,4],[13,3],[13,6],[19,3],[19,4],[19,2],[19,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,3],[19,3],[19,3],[19,2],[19,5],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,4],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[42,3],[44,1],[44,3],[23,3],[22,1],[22,3],[22,2],[22,2],[22,2],[50,1],[50,3],[52,1],[52,3],[52,2],[52,2],[53,1],[53,1],[53,1],[53,3],[54,3],[55,1],[55,1],[55,5],[55,5],[55,4],[55,6],[55,6],[55,4],[55,4],[55,2],[59,1],[59,2],[59,2],[62,3],[62,1],[62,2],[62,2],[62,2],[63,2],[63,1],[65,2],[65,1],[65,3],[65,3],[67,2],[69,3],[69,2],[69,1],[72,2],[72,4],[72,1],[4,2],[4,3],[4,3],[4,4],[4,3],[4,4],[4,4],[4,5],[4,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:this.$ = { Quoted: $$[$0].replace(/'/g, "")}
break;
case 3:this.$ = true
break;
case 4:this.$ = false
break;
case 6:this.$ = { Property : '*' }
break;
case 7:this.$ = { Property: $$[$0]}
break;
case 8:this.$ = { Property: $$[$0-3], Index: $$[$0-1]}
break;
case 9:this.$ = { Property: $$[$0-2], Child: $$[$0]}
break;
case 10:this.$ = { Property: $$[$0-5], Index: $$[$0-3], Child: $$[$0]}
break;
case 11:this.$ = { Call: $$[$0-2], Args: []}
break;
case 12:this.$ = { Call: $$[$0-3], Args: $$[$0-1]}
break;
case 13:this.$ = []
break;
case 14:this.$ = $$[$0-1]
break;
case 19:this.$ = parseFloat($$[$0])
break;
case 20:this.$ = {SubQuery: $$[$0-1]}
break;
case 21:this.$ = { Call: "IsNull", Args: [$$[$0-2]] }
break;
case 22:this.$ = { Call: "IsUndefined", Args: [$$[$0-2]] }
break;
case 23:this.$ = { Call: "Not", Args: [$$[$0]] }
break;
case 24:this.$ = { Call: "In", Args: [$$[$0-4], $$[$0-1]]}
break;
case 25:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 26:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 27:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 28:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 29:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 30:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 31:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 32:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 33:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 34:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 35:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 36:this.$ = {Operator:$$[$0-1],Args:[$$[$0-2],$$[$0]]}
break;
case 37:this.$ = -$$[$0-2]
break;
case 38:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 39:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 40:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 41:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 42:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 43:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 44:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 45:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 46:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 47:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 48:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 49:this.$ = { Operator: $$[$0], Args: [$$[$0-1]] }
break;
case 50:this.$ = {Key: $$[$0-2], Value: $$[$0]}
break;
case 51:this.$ = [$$[$0]]
break;
case 52:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 53:this.$ = {KeyValues: $$[$0-1]}
break;
case 54:this.$ = [$$[$0]]
break;
case 55:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 56:this.$ = $$[$0-1]
break;
case 57:this.$ = $$[$0-1]
break;
case 58:this.$ = $$[$0-1]
break;
case 59:this.$ = {Expression: $$[$0]}
break;
case 60:this.$ = { Expression: $$[$0-2], Alias: $$[$0]}
break;
case 61:this.$ = [$$[$0]]
break;
case 62:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 63:this.$ = $$[$0-1]
break;
case 64:this.$ = $$[$0-1]
break;
case 68:this.$ = { SubQuery: $$[$0-1] }
break;
case 69:this.$ = {Target: $$[$0-2], Alias: $$[$0]}
break;
case 72:this.$ = { Left: $$[$0-4], Right: $$[$0-2], Expression: $$[$0]}
break;
case 73:this.$ = { Left: $$[$0-4], Over: $$[$0-2], Alias: $$[$0]}
break;
case 74:this.$ = { Left: $$[$0-3], Right: $$[$0-1], Expression: null}
break;
case 75:this.$ = { Left: $$[$0-5], Right: $$[$0-3], Expression: null}
break;
case 76:this.$ = { Left: $$[$0-5], Right: $$[$0-3], Expression: null}
break;
case 77:this.$ = $$[$0-3]
break;
case 78:this.$ = $$[$0-3]
break;
case 79:this.$ = $$[$0-1]
break;
case 80: this.$ = {Expression: $$[$0], Asc: true}
break;
case 81:this.$ = {Expression: $$[$0-1], Asc: true}
break;
case 82:this.$ = {Expression: $$[$0-1], Asc: false}
break;
case 83:this.$ = $$[$0-2].concat([$$[$0]])
break;
case 84:this.$ = [$$[$0]]
break;
case 85:this.$ = $$[$0-1]
break;
case 86:this.$ = $$[$0-1]
break;
case 87:this.$ = $$[$0-1]
break;
case 88:this.$ = $$[$0]
break;
case 89:this.$ = []
break;
case 90:this.$ = $$[$0]
break;
case 91:this.$ = null
break;
case 92:this.$ = $$[$0-1]
break;
case 93:this.$ = $$[$0-1]
break;
case 94:this.$ = $$[$0]
break;
case 95:this.$ = { SelectList: $$[$0], Limit: $$[$0-1]}
break;
case 96:this.$ = { SelectList: $$[$0]}
break;
case 97:this.$ = { SelectList: []}
break;
case 98:this.$ = { Groupings: $$[$0]}
break;
case 99:this.$ = { Groupings: $$[$0-2], Having: $$[$0]}
break;
case 100:this.$ = { Groupings: []}
break;
case 101:this.$ = {Select:$$[$0-1],From:$$[$0],Positions:{Select:_$[$0-1],From:_$[$0]}}
break;
case 102:this.$ = {Select:$$[$0-2],From:$$[$0-1],Where:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],Where:_$[$0]}}
break;
case 103:this.$ = {Select:$$[$0-2],From:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],OrderBy:_$[$0]}}
break;
case 104:this.$ = {Select:$$[$0-3],From:$$[$0-2],Where:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-3],From:_$[$0-2],Where:_$[$0-1],OrderBy:_$[$0]}}
break;
case 105:this.$ = {Select:$$[$0-2],From:$$[$0-1],GroupBy:$$[$0],Positions:{Select:_$[$0-2],From:_$[$0-1],GroupBy:_$[$0]}}
break;
case 106:this.$ = {Select:$$[$0-3],From:$$[$0-2],Where:$$[$0-1],GroupBy:$$[$0],Positions:{Select:_$[$0-3],From:_$[$0-2],Where:_$[$0-1],GroupBy:_$[$0]}}
break;
case 107:this.$ = {Select:$$[$0-3],From:$$[$0-2],GroupBy:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-3],FromWhere:_$[$0-2],GroupBy:_$[$0-1],OrderBy:_$[$0]}}
break;
case 108:this.$ = {Select:$$[$0-4],From:$$[$0-3],Where:$$[$0-2],GroupBy:$$[$0-1],OrderBy:$$[$0],Positions:{Select:_$[$0-4],From:_$[$0-3],Where:_$[$0-2],GroupBy:_$[$0-1],OrderBy:_$[$0]}}
break;
case 109:{ $$[$0-2].Union = $$[$0]; this.$ = $$[$0-2] }
break;
}
},
table: [{3:1,4:2,69:3,70:[1,4],71:[1,5]},{1:[3]},{5:[1,6],75:[1,7]},{67:8,68:[1,9]},{16:[1,10]},{6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:13,14:[1,15],15:[1,17],16:[1,21],19:14,20:[1,22],23:20,27:[1,23],38:[1,24],46:[1,29],50:12,52:11,68:[2,97]},{1:[2,1]},{4:30,69:3,70:[1,4],71:[1,5]},{5:[2,101],21:[2,101],63:32,64:[1,35],65:31,66:[1,34],72:33,73:[1,36],75:[2,101]},{6:41,7:[1,26],11:44,12:[1,25],13:40,14:[1,15],20:[1,43],23:42,46:[1,29],53:38,54:39,55:37},{6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:13,14:[1,15],15:[1,17],16:[1,21],19:14,20:[1,22],23:20,27:[1,23],38:[1,24],46:[1,29],50:12,52:45},{45:[1,46],68:[2,96]},{45:[2,61],68:[2,61]},{14:[2,15],24:[2,15],28:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],33:[2,15],34:[2,15],35:[2,15],36:[2,15],37:[2,15],38:[2,15],39:[2,15],45:[2,15],48:[1,47],51:[2,15],68:[2,15]},{14:[1,62],24:[1,49],28:[1,50],29:[1,51],30:[1,52],31:[1,53],32:[1,54],33:[1,55],34:[1,56],35:[1,57],36:[1,58],37:[1,59],38:[1,60],39:[1,61],45:[2,59],51:[1,48],68:[2,59]},{5:[2,6],14:[2,6],17:[2,6],21:[2,6],24:[2,6],28:[2,6],29:[2,6],30:[2,6],31:[2,6],32:[2,6],33:[2,6],34:[2,6],35:[2,6],36:[2,6],37:[2,6],38:[2,6],39:[2,6],40:[2,6],45:[2,6],47:[2,6],48:[2,6],49:[2,6],51:[2,6],56:[2,6],58:[2,6],60:[2,6],61:[2,6],64:[2,6],66:[2,6],68:[2,6],73:[2,6],74:[2,6],75:[2,6]},{5:[2,7],14:[2,7],15:[1,63],17:[2,7],18:[1,64],20:[1,65],21:[2,7],24:[2,7],28:[2,7],29:[2,7],30:[2,7],31:[2,7],32:[2,7],33:[2,7],34:[2,7],35:[2,7],36:[2,7],37:[2,7],38:[2,7],39:[2,7],40:[2,7],45:[2,7],47:[2,7],48:[2,7],49:[2,7],51:[2,7],56:[2,7],58:[2,7],60:[2,7],61:[2,7],64:[2,7],66:[2,7],68:[2,7],73:[2,7],74:[2,7],75:[2,7]},{6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],17:[1,66],19:68,20:[1,22],22:67,23:20,27:[1,23],38:[1,24],46:[1,29]},{5:[2,16],14:[2,16],17:[2,16],21:[2,16],24:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16],33:[2,16],34:[2,16],35:[2,16],36:[2,16],37:[2,16],38:[2,16],39:[2,16],40:[2,16],45:[2,16],47:[2,16],48:[2,16],49:[2,16],51:[2,16],56:[2,16],58:[2,16],60:[2,16],61:[2,16],64:[2,16],66:[2,16],68:[2,16],73:[2,16],74:[2,16],75:[2,16]},{5:[2,17],14:[2,17],17:[2,17],21:[2,17],24:[2,17],28:[2,17],29:[2,17],30:[2,17],31:[2,17],32:[2,17],33:[2,17],34:[2,17],35:[2,17],36:[2,17],37:[2,17],38:[2,17],39:[2,17],40:[2,17],45:[2,17],47:[2,17],48:[2,17],49:[2,17],51:[2,17],56:[2,17],58:[2,17],60:[2,17],61:[2,17],64:[2,17],66:[2,17],68:[2,17],73:[2,17],74:[2,17],75:[2,17]},{5:[2,18],14:[2,18],17:[2,18],21:[2,18],24:[2,18],28:[2,18],29:[2,18],30:[2,18],31:[2,18],32:[2,18],33:[2,18],34:[2,18],35:[2,18],36:[2,18],37:[2,18],38:[2,18],39:[2,18],40:[2,18],45:[2,18],47:[2,18],48:[2,18],49:[2,18],51:[2,18],56:[2,18],58:[2,18],60:[2,18],61:[2,18],64:[2,18],66:[2,18],68:[2,18],73:[2,18],74:[2,18],75:[2,18]},{5:[2,19],14:[2,19],17:[2,19],21:[2,19],24:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[2,19],33:[2,19],34:[2,19],35:[2,19],36:[2,19],37:[2,19],38:[2,19],39:[2,19],40:[2,19],45:[2,19],47:[2,19],48:[2,19],49:[2,19],51:[2,19],56:[2,19],58:[2,19],60:[2,19],61:[2,19],64:[2,19],66:[2,19],68:[2,19],73:[2,19],74:[2,19],75:[2,19]},{4:70,69:3,70:[1,4],71:[1,5]},{6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],19:71,20:[1,22],23:20,27:[1,23],38:[1,24],46:[1,29]},{6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],19:72,20:[1,22],23:20,27:[1,23],38:[1,24],46:[1,29]},{5:[2,5],14:[2,5],15:[2,5],17:[2,5],18:[2,5],20:[2,5],21:[2,5],24:[2,5],28:[2,5],29:[2,5],30:[2,5],31:[2,5],32:[2,5],33:[2,5],34:[2,5],35:[2,5],36:[2,5],37:[2,5],38:[2,5],39:[2,5],40:[2,5],43:[2,5],45:[2,5],47:[2,5],48:[2,5],49:[2,5],51:[2,5],56:[2,5],57:[2,5],58:[2,5],60:[2,5],61:[2,5],64:[2,5],66:[2,5],68:[2,5],73:[2,5],74:[2,5],75:[2,5]},{5:[2,2],14:[2,2],17:[2,2],21:[2,2],24:[2,2],28:[2,2],29:[2,2],30:[2,2],31:[2,2],32:[2,2],33:[2,2],34:[2,2],35:[2,2],36:[2,2],37:[2,2],38:[2,2],39:[2,2],40:[2,2],45:[2,2],47:[2,2],48:[2,2],49:[2,2],51:[2,2],56:[2,2],58:[2,2],60:[2,2],61:[2,2],64:[2,2],66:[2,2],68:[2,2],73:[2,2],74:[2,2],75:[2,2]},{5:[2,3],14:[2,3],17:[2,3],21:[2,3],24:[2,3],28:[2,3],29:[2,3],30:[2,3],31:[2,3],32:[2,3],33:[2,3],34:[2,3],35:[2,3],36:[2,3],37:[2,3],38:[2,3],39:[2,3],40:[2,3],45:[2,3],47:[2,3],48:[2,3],49:[2,3],51:[2,3],56:[2,3],58:[2,3],60:[2,3],61:[2,3],64:[2,3],66:[2,3],68:[2,3],73:[2,3],74:[2,3],75:[2,3]},{5:[2,4],14:[2,4],17:[2,4],21:[2,4],24:[2,4],28:[2,4],29:[2,4],30:[2,4],31:[2,4],32:[2,4],33:[2,4],34:[2,4],35:[2,4],36:[2,4],37:[2,4],38:[2,4],39:[2,4],40:[2,4],45:[2,4],47:[2,4],48:[2,4],49:[2,4],51:[2,4],56:[2,4],58:[2,4],60:[2,4],61:[2,4],64:[2,4],66:[2,4],68:[2,4],73:[2,4],74:[2,4],75:[2,4]},{11:75,12:[1,25],42:74,44:73},{5:[2,109],21:[2,109],75:[2,109]},{5:[2,102],21:[2,102],63:76,64:[1,35],72:77,73:[1,36],75:[2,102]},{5:[2,103],21:[2,103],75:[2,103]},{5:[2,105],21:[2,105],63:78,64:[1,35],75:[2,105]},{5:[2,91],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],19:79,20:[1,22],21:[2,91],23:20,27:[1,23],38:[1,24],46:[1,29],64:[2,91],73:[2,91],75:[2,91]},{5:[2,89],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],19:82,20:[1,22],21:[2,89],23:20,27:[1,23],38:[1,24],46:[1,29],59:81,62:80,75:[2,89]},{5:[2,100],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],19:68,20:[1,22],21:[2,100],22:83,23:20,27:[1,23],38:[1,24],46:[1,29],64:[2,100],75:[2,100]},{5:[2,94],21:[2,94],56:[1,84],58:[1,85],64:[2,94],66:[2,94],73:[2,94],75:[2,94]},{5:[2,70],21:[2,70],51:[1,86],56:[2,70],58:[2,70],64:[2,70],66:[2,70],73:[2,70],75:[2,70]},{5:[2,71],21:[2,71],56:[2,71],58:[2,71],64:[2,71],66:[2,71],73:[2,71],75:[2,71]},{5:[2,65],21:[2,65],51:[2,65],56:[2,65],58:[2,65],64:[2,65],66:[2,65],73:[2,65],75:[2,65]},{5:[2,66],21:[2,66],51:[2,66],56:[2,66],58:[2,66],64:[2,66],66:[2,66],73:[2,66],75:[2,66]},{5:[2,67],21:[2,67],51:[2,67],56:[2,67],58:[2,67],64:[2,67],66:[2,67],73:[2,67],75:[2,67]},{4:87,69:3,70:[1,4],71:[1,5]},{5:[2,7],14:[2,7],15:[1,63],17:[2,7],18:[1,64],21:[2,7],24:[2,7],28:[2,7],29:[2,7],30:[2,7],31:[2,7],32:[2,7],33:[2,7],34:[2,7],35:[2,7],36:[2,7],37:[2,7],38:[2,7],39:[2,7],40:[2,7],45:[2,7],47:[2,7],48:[2,7],49:[2,7],51:[2,7],56:[2,7],58:[2,7],60:[2,7],61:[2,7],64:[2,7],66:[2,7],68:[2,7],73:[2,7],74:[2,7],75:[2,7]},{45:[1,46],68:[2,95]},{6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],19:14,20:[1,22],23:20,27:[1,23],38:[1,24],45:[2,64],46:[1,29],50:88,68:[2,64]},{45:[2,63],68:[2,63]},{11:89,12:[1,25]},{25:[1,90],26:[1,91]},{20:[1,92]},{5:[2,38],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],17:[2,38],19:93,20:[1,22],21:[2,38],23:20,24:[2,38],27:[1,23],28:[2,38],29:[2,38],30:[2,38],31:[2,38],32:[2,38],33:[2,38],34:[2,38],35:[2,38],36:[2,38],37:[2,38],38:[1,24],39:[2,38],40:[2,38],45:[2,38],46:[1,29],47:[2,38],48:[2,38],49:[2,38],51:[2,38],56:[2,38],58:[2,38],60:[2,38],61:[2,38],64:[2,38],66:[2,38],68:[2,38],73:[2,38],74:[2,38],75:[2,38]},{5:[2,39],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],17:[2,39],19:94,20:[1,22],21:[2,39],23:20,24:[2,39],27:[1,23],28:[2,39],29:[2,39],30:[2,39],31:[2,39],32:[2,39],33:[2,39],34:[2,39],35:[2,39],36:[2,39],37:[2,39],38:[1,24],39:[2,39],40:[2,39],45:[2,39],46:[1,29],47:[2,39],48:[2,39],49:[2,39],51:[2,39],56:[2,39],58:[2,39],60:[2,39],61:[2,39],64:[2,39],66:[2,39],68:[2,39],73:[2,39],74:[2,39],75:[2,39]},{5:[2,40],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],17:[2,40],19:95,20:[1,22],21:[2,40],23:20,24:[2,40],27:[1,23],28:[2,40],29:[2,40],30:[2,40],31:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],36:[2,40],37:[2,40],38:[1,24],39:[2,40],40:[2,40],45:[2,40],46:[1,29],47:[2,40],48:[2,40],49:[2,40],51:[2,40],56:[2,40],58:[2,40],60:[2,40],61:[2,40],64:[2,40],66:[2,40],68:[2,40],73:[2,40],74:[2,40],75:[2,40]},{5:[2,41],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],17:[2,41],19:96,20:[1,22],21:[2,41],23:20,24:[2,41],27:[1,23],28:[2,41],29:[2,41],30:[2,41],31:[2,41],32:[2,41],33:[2,41],34:[2,41],35:[2,41],36:[2,41],37:[2,41],38:[1,24],39:[2,41],40:[2,41],45:[2,41],46:[1,29],47:[2,41],48:[2,41],49:[2,41],51:[2,41],56:[2,41],58:[2,41],60:[2,41],61:[2,41],64:[2,41],66:[2,41],68:[2,41],73:[2,41],74:[2,41],75:[2,41]},{5:[2,42],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],17:[2,42],19:97,20:[1,22],21:[2,42],23:20,24:[2,42],27:[1,23],28:[2,42],29:[2,42],30:[2,42],31:[2,42],32:[2,42],33:[2,42],34:[2,42],35:[2,42],36:[2,42],37:[2,42],38:[1,24],39:[2,42],40:[2,42],45:[2,42],46:[1,29],47:[2,42],48:[2,42],49:[2,42],51:[2,42],56:[2,42],58:[2,42],60:[2,42],61:[2,42],64:[2,42],66:[2,42],68:[2,42],73:[2,42],74:[2,42],75:[2,42]},{5:[2,43],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],17:[2,43],19:98,20:[1,22],21:[2,43],23:20,24:[2,43],27:[1,23],28:[2,43],29:[2,43],30:[2,43],31:[2,43],32:[2,43],33:[2,43],34:[2,43],35:[2,43],36:[2,43],37:[2,43],38:[1,24],39:[2,43],40:[2,43],45:[2,43],46:[1,29],47:[2,43],48:[2,43],49:[2,43],51:[2,43],56:[2,43],58:[2,43],60:[2,43],61:[2,43],64:[2,43],66:[2,43],68:[2,43],73:[2,43],74:[2,43],75:[2,43]},{5:[2,44],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],17:[2,44],19:99,20:[1,22],21:[2,44],23:20,24:[2,44],27:[1,23],28:[2,44],29:[2,44],30:[2,44],31:[2,44],32:[2,44],33:[2,44],34:[2,44],35:[2,44],36:[2,44],37:[2,44],38:[1,24],39:[2,44],40:[2,44],45:[2,44],46:[1,29],47:[2,44],48:[2,44],49:[2,44],51:[2,44],56:[2,44],58:[2,44],60:[2,44],61:[2,44],64:[2,44],66:[2,44],68:[2,44],73:[2,44],74:[2,44],75:[2,44]},{5:[2,45],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],17:[2,45],19:100,20:[1,22],21:[2,45],23:20,24:[2,45],27:[1,23],28:[2,45],29:[2,45],30:[2,45],31:[2,45],32:[2,45],33:[2,45],34:[2,45],35:[2,45],36:[2,45],37:[2,45],38:[1,24],39:[2,45],40:[2,45],45:[2,45],46:[1,29],47:[2,45],48:[2,45],49:[2,45],51:[2,45],56:[2,45],58:[2,45],60:[2,45],61:[2,45],64:[2,45],66:[2,45],68:[2,45],73:[2,45],74:[2,45],75:[2,45]},{5:[2,46],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],17:[2,46],19:101,20:[1,22],21:[2,46],23:20,24:[2,46],27:[1,23],28:[2,46],29:[2,46],30:[2,46],31:[2,46],32:[2,46],33:[2,46],34:[2,46],35:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],45:[2,46],46:[1,29],47:[2,46],48:[2,46],49:[2,46],51:[2,46],56:[2,46],58:[2,46],60:[2,46],61:[2,46],64:[2,46],66:[2,46],68:[2,46],73:[2,46],74:[2,46],75:[2,46]},{5:[2,47],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],17:[2,47],19:102,20:[1,22],21:[2,47],23:20,24:[2,47],27:[1,23],28:[2,47],29:[2,47],30:[2,47],31:[2,47],32:[2,47],33:[2,47],34:[2,47],35:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],45:[2,47],46:[1,29],47:[2,47],48:[2,47],49:[2,47],51:[2,47],56:[2,47],58:[2,47],60:[2,47],61:[2,47],64:[2,47],66:[2,47],68:[2,47],73:[2,47],74:[2,47],75:[2,47]},{5:[2,48],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[2,48],15:[1,17],16:[1,21],17:[2,48],19:103,20:[1,22],21:[2,48],23:20,24:[2,48],27:[1,23],28:[2,48],29:[2,48],30:[2,48],31:[2,48],32:[2,48],33:[2,48],34:[2,48],35:[2,48],36:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],45:[2,48],46:[1,29],47:[2,48],48:[2,48],49:[2,48],51:[2,48],56:[2,48],58:[2,48],60:[2,48],61:[2,48],64:[2,48],66:[2,48],68:[2,48],73:[2,48],74:[2,48],75:[2,48]},{5:[2,49],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[2,49],15:[1,17],16:[1,21],17:[2,49],19:104,20:[1,22],21:[2,49],23:20,24:[2,49],27:[1,23],28:[2,49],29:[2,49],30:[2,49],31:[2,49],32:[2,49],33:[2,49],34:[2,49],35:[2,49],36:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],45:[2,49],46:[1,29],47:[2,49],48:[2,49],49:[2,49],51:[2,49],56:[2,49],58:[2,49],60:[2,49],61:[2,49],64:[2,49],66:[2,49],68:[2,49],73:[2,49],74:[2,49],75:[2,49]},{16:[1,105]},{11:44,12:[1,25],13:106,14:[1,15]},{6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],19:68,20:[1,22],21:[1,107],22:108,23:20,27:[1,23],38:[1,24],46:[1,29]},{5:[2,13],14:[2,13],17:[2,13],21:[2,13],24:[2,13],28:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[2,13],33:[2,13],34:[2,13],35:[2,13],36:[2,13],37:[2,13],38:[2,13],39:[2,13],40:[2,13],45:[2,13],47:[2,13],48:[2,13],49:[2,13],51:[2,13],56:[2,13],58:[2,13],60:[2,13],61:[2,13],64:[2,13],66:[2,13],68:[2,13],73:[2,13],74:[2,13],75:[2,13]},{17:[1,109],45:[1,110],48:[1,111],49:[1,112]},{5:[2,54],14:[1,62],17:[2,54],21:[2,54],24:[1,49],28:[1,50],29:[1,51],30:[1,52],31:[1,53],32:[1,54],33:[1,55],34:[1,56],35:[1,57],36:[1,58],37:[1,59],38:[1,60],39:[1,61],45:[2,54],48:[2,54],49:[2,54],64:[2,54],74:[2,54],75:[2,54]},{5:[2,15],14:[2,15],17:[2,15],21:[2,15],24:[2,15],28:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],33:[2,15],34:[2,15],35:[2,15],36:[2,15],37:[2,15],38:[2,15],39:[2,15],40:[2,15],45:[2,15],47:[2,15],48:[2,15],49:[2,15],51:[2,15],56:[2,15],58:[2,15],60:[2,15],61:[2,15],64:[2,15],66:[2,15],68:[2,15],73:[2,15],74:[2,15],75:[2,15]},{21:[1,113],75:[1,7]},{5:[2,23],14:[1,62],17:[2,23],21:[2,23],24:[1,49],28:[1,50],29:[1,51],30:[1,52],31:[1,53],32:[1,54],33:[1,55],34:[1,56],35:[1,57],36:[1,58],37:[1,59],38:[1,60],39:[1,61],40:[2,23],45:[2,23],47:[2,23],48:[2,23],49:[2,23],51:[2,23],56:[2,23],58:[2,23],60:[2,23],61:[2,23],64:[2,23],66:[2,23],68:[2,23],73:[2,23],74:[2,23],75:[2,23]},{14:[1,62],24:[1,49],28:[1,50],29:[1,51],30:[1,52],31:[1,53],32:[1,54],33:[1,55],34:[1,56],35:[1,57],36:[1,58],37:[1,59],38:[1,60],39:[1,61],40:[1,114]},{45:[1,116],47:[1,115]},{45:[2,51],47:[2,51]},{43:[1,117]},{5:[2,104],21:[2,104],75:[2,104]},{5:[2,106],21:[2,106],63:118,64:[1,35],75:[2,106]},{5:[2,107],21:[2,107],75:[2,107]},{5:[2,90],14:[1,62],21:[2,90],24:[1,49],28:[1,50],29:[1,51],30:[1,52],31:[1,53],32:[1,54],33:[1,55],34:[1,56],35:[1,57],36:[1,58],37:[1,59],38:[1,60],39:[1,61],48:[1,119],49:[1,120],64:[2,90],73:[2,90],75:[2,90]},{5:[2,88],21:[2,88],45:[1,121],48:[1,122],49:[1,123],75:[2,88]},{5:[2,84],21:[2,84],45:[2,84],48:[2,84],49:[2,84],75:[2,84]},{5:[2,80],14:[1,62],21:[2,80],24:[1,49],28:[1,50],29:[1,51],30:[1,52],31:[1,53],32:[1,54],33:[1,55],34:[1,56],35:[1,57],36:[1,58],37:[1,59],38:[1,60],39:[1,61],45:[2,80],48:[2,80],49:[2,80],60:[1,124],61:[1,125],75:[2,80]},{5:[2,98],21:[2,98],45:[1,110],48:[1,111],49:[1,112],64:[2,98],74:[1,126],75:[2,98]},{6:41,7:[1,26],11:44,12:[1,25],13:40,14:[1,15],20:[1,43],23:42,46:[1,29],53:128,54:127},{5:[2,79],11:44,12:[1,25],13:129,14:[1,15],21:[2,79],56:[2,79],58:[2,79],64:[2,79],66:[2,79],73:[2,79],75:[2,79]},{11:130,12:[1,25]},{21:[1,131],75:[1,7]},{45:[2,62],68:[2,62]},{45:[2,60],68:[2,60]},{5:[2,21],14:[2,21],17:[2,21],21:[2,21],24:[2,21],28:[2,21],29:[2,21],30:[2,21],31:[2,21],32:[2,21],33:[2,21],34:[2,21],35:[2,21],36:[2,21],37:[2,21],38:[2,21],39:[2,21],40:[2,21],45:[2,21],47:[2,21],48:[2,21],49:[2,21],51:[2,21],56:[2,21],58:[2,21],60:[2,21],61:[2,21],64:[2,21],66:[2,21],68:[2,21],73:[2,21],74:[2,21],75:[2,21]},{5:[2,22],14:[2,22],17:[2,22],21:[2,22],24:[2,22],28:[2,22],29:[2,22],30:[2,22],31:[2,22],32:[2,22],33:[2,22],34:[2,22],35:[2,22],36:[2,22],37:[2,22],38:[2,22],39:[2,22],40:[2,22],45:[2,22],47:[2,22],48:[2,22],49:[2,22],51:[2,22],56:[2,22],58:[2,22],60:[2,22],61:[2,22],64:[2,22],66:[2,22],68:[2,22],73:[2,22],74:[2,22],75:[2,22]},{6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],19:68,20:[1,22],22:132,23:20,27:[1,23],38:[1,24],46:[1,29]},{5:[2,25],14:[1,62],17:[2,25],21:[2,25],24:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[1,53],32:[1,54],33:[1,55],34:[1,56],35:[1,57],36:[1,58],37:[1,59],38:[1,60],39:[1,61],40:[2,25],45:[2,25],47:[2,25],48:[2,25],49:[2,25],51:[2,25],56:[2,25],58:[2,25],60:[2,25],61:[2,25],64:[2,25],66:[2,25],68:[2,25],73:[2,25],74:[2,25],75:[2,25]},{5:[2,26],14:[1,62],17:[2,26],21:[2,26],24:[2,26],28:[2,26],29:[2,26],30:[2,26],31:[1,53],32:[1,54],33:[1,55],34:[1,56],35:[1,57],36:[1,58],37:[1,59],38:[1,60],39:[1,61],40:[2,26],45:[2,26],47:[2,26],48:[2,26],49:[2,26],51:[2,26],56:[2,26],58:[2,26],60:[2,26],61:[2,26],64:[2,26],66:[2,26],68:[2,26],73:[2,26],74:[2,26],75:[2,26]},{5:[2,27],14:[1,62],17:[2,27],21:[2,27],24:[2,27],28:[2,27],29:[2,27],30:[2,27],31:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],36:[2,27],37:[1,59],38:[1,60],39:[1,61],40:[2,27],45:[2,27],47:[2,27],48:[2,27],49:[2,27],51:[2,27],56:[2,27],58:[2,27],60:[2,27],61:[2,27],64:[2,27],66:[2,27],68:[2,27],73:[2,27],74:[2,27],75:[2,27]},{5:[2,28],14:[1,62],17:[2,28],21:[2,28],24:[2,28],28:[2,28],29:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[2,28],37:[1,59],38:[1,60],39:[1,61],40:[2,28],45:[2,28],47:[2,28],48:[2,28],49:[2,28],51:[2,28],56:[2,28],58:[2,28],60:[2,28],61:[2,28],64:[2,28],66:[2,28],68:[2,28],73:[2,28],74:[2,28],75:[2,28]},{5:[2,29],14:[1,62],17:[2,29],21:[2,29],24:[2,29],28:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[2,29],37:[1,59],38:[1,60],39:[1,61],40:[2,29],45:[2,29],47:[2,29],48:[2,29],49:[2,29],51:[2,29],56:[2,29],58:[2,29],60:[2,29],61:[2,29],64:[2,29],66:[2,29],68:[2,29],73:[2,29],74:[2,29],75:[2,29]},{5:[2,30],14:[1,62],17:[2,30],21:[2,30],24:[2,30],28:[2,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],36:[2,30],37:[1,59],38:[1,60],39:[1,61],40:[2,30],45:[2,30],47:[2,30],48:[2,30],49:[2,30],51:[2,30],56:[2,30],58:[2,30],60:[2,30],61:[2,30],64:[2,30],66:[2,30],68:[2,30],73:[2,30],74:[2,30],75:[2,30]},{5:[2,31],14:[1,62],17:[2,31],21:[2,31],24:[2,31],28:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],36:[2,31],37:[1,59],38:[1,60],39:[1,61],40:[2,31],45:[2,31],47:[2,31],48:[2,31],49:[2,31],51:[2,31],56:[2,31],58:[2,31],60:[2,31],61:[2,31],64:[2,31],66:[2,31],68:[2,31],73:[2,31],74:[2,31],75:[2,31]},{5:[2,32],14:[1,62],17:[2,32],21:[2,32],24:[2,32],28:[2,32],29:[2,32],30:[2,32],31:[2,32],32:[2,32],33:[2,32],34:[2,32],35:[2,32],36:[2,32],37:[1,59],38:[1,60],39:[1,61],40:[2,32],45:[2,32],47:[2,32],48:[2,32],49:[2,32],51:[2,32],56:[2,32],58:[2,32],60:[2,32],61:[2,32],64:[2,32],66:[2,32],68:[2,32],73:[2,32],74:[2,32],75:[2,32]},{5:[2,33],14:[1,62],17:[2,33],21:[2,33],24:[2,33],28:[2,33],29:[2,33],30:[2,33],31:[2,33],32:[2,33],33:[2,33],34:[2,33],35:[2,33],36:[2,33],37:[2,33],38:[2,33],39:[1,61],40:[2,33],45:[2,33],47:[2,33],48:[2,33],49:[2,33],51:[2,33],56:[2,33],58:[2,33],60:[2,33],61:[2,33],64:[2,33],66:[2,33],68:[2,33],73:[2,33],74:[2,33],75:[2,33]},{5:[2,34],14:[1,62],17:[2,34],21:[2,34],24:[2,34],28:[2,34],29:[2,34],30:[2,34],31:[2,34],32:[2,34],33:[2,34],34:[2,34],35:[2,34],36:[2,34],37:[2,34],38:[2,34],39:[1,61],40:[2,34],45:[2,34],47:[2,34],48:[2,34],49:[2,34],51:[2,34],56:[2,34],58:[2,34],60:[2,34],61:[2,34],64:[2,34],66:[2,34],68:[2,34],73:[2,34],74:[2,34],75:[2,34]},{5:[2,35],14:[2,35],17:[2,35],21:[2,35],24:[2,35],28:[2,35],29:[2,35],30:[2,35],31:[2,35],32:[2,35],33:[2,35],34:[2,35],35:[2,35],36:[2,35],37:[2,35],38:[2,35],39:[2,35],40:[2,35],45:[2,35],47:[2,35],48:[2,35],49:[2,35],51:[2,35],56:[2,35],58:[2,35],60:[2,35],61:[2,35],64:[2,35],66:[2,35],68:[2,35],73:[2,35],74:[2,35],75:[2,35]},{5:[2,36],14:[2,36],17:[2,36],21:[2,36],24:[2,36],28:[2,36],29:[2,36],30:[2,36],31:[2,36],32:[2,36],33:[2,36],34:[2,36],35:[2,36],36:[2,36],37:[2,36],38:[2,36],39:[2,36],40:[2,36],45:[2,36],47:[2,36],48:[2,36],49:[2,36],51:[2,36],56:[2,36],58:[2,36],60:[2,36],61:[2,36],64:[2,36],66:[2,36],68:[2,36],73:[2,36],74:[2,36],75:[2,36]},{17:[1,133]},{5:[2,9],14:[2,9],17:[2,9],21:[2,9],24:[2,9],28:[2,9],29:[2,9],30:[2,9],31:[2,9],32:[2,9],33:[2,9],34:[2,9],35:[2,9],36:[2,9],37:[2,9],38:[2,9],39:[2,9],40:[2,9],45:[2,9],47:[2,9],48:[2,9],49:[2,9],51:[2,9],56:[2,9],58:[2,9],60:[2,9],61:[2,9],64:[2,9],66:[2,9],68:[2,9],73:[2,9],74:[2,9],75:[2,9]},{5:[2,11],14:[2,11],17:[2,11],21:[2,11],24:[2,11],28:[2,11],29:[2,11],30:[2,11],31:[2,11],32:[2,11],33:[2,11],34:[2,11],35:[2,11],36:[2,11],37:[2,11],38:[2,11],39:[2,11],40:[2,11],45:[2,11],47:[2,11],48:[2,11],49:[2,11],51:[2,11],56:[2,11],58:[2,11],60:[2,11],61:[2,11],64:[2,11],66:[2,11],68:[2,11],73:[2,11],74:[2,11],75:[2,11]},{21:[1,134],45:[1,110],48:[1,111],49:[1,112]},{5:[2,14],14:[2,14],17:[2,14],21:[2,14],24:[2,14],28:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],33:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14],38:[2,14],39:[2,14],40:[2,14],45:[2,14],47:[2,14],48:[2,14],49:[2,14],51:[2,14],56:[2,14],58:[2,14],60:[2,14],61:[2,14],64:[2,14],66:[2,14],68:[2,14],73:[2,14],74:[2,14],75:[2,14]},{5:[2,58],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],17:[2,58],19:135,20:[1,22],21:[2,58],23:20,27:[1,23],38:[1,24],45:[2,58],46:[1,29],48:[2,58],49:[2,58],64:[2,58],74:[2,58],75:[2,58]},{5:[2,56],17:[2,56],21:[2,56],45:[2,56],48:[2,56],49:[2,56],64:[2,56],74:[2,56],75:[2,56]},{5:[2,57],17:[2,57],21:[2,57],45:[2,57],48:[2,57],49:[2,57],64:[2,57],74:[2,57],75:[2,57]},{5:[2,20],14:[2,20],17:[2,20],21:[2,20],24:[2,20],28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[2,20],33:[2,20],34:[2,20],35:[2,20],36:[2,20],37:[2,20],38:[2,20],39:[2,20],40:[2,20],45:[2,20],47:[2,20],48:[2,20],49:[2,20],51:[2,20],56:[2,20],58:[2,20],60:[2,20],61:[2,20],64:[2,20],66:[2,20],68:[2,20],73:[2,20],74:[2,20],75:[2,20]},{41:[1,136]},{5:[2,53],14:[2,53],17:[2,53],21:[2,53],24:[2,53],28:[2,53],29:[2,53],30:[2,53],31:[2,53],32:[2,53],33:[2,53],34:[2,53],35:[2,53],36:[2,53],37:[2,53],38:[2,53],39:[2,53],40:[2,53],45:[2,53],47:[2,53],48:[2,53],49:[2,53],51:[2,53],56:[2,53],58:[2,53],60:[2,53],61:[2,53],64:[2,53],66:[2,53],68:[2,53],73:[2,53],74:[2,53],75:[2,53]},{11:75,12:[1,25],42:137},{6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],19:138,20:[1,22],23:20,27:[1,23],38:[1,24],46:[1,29]},{5:[2,108],21:[2,108],75:[2,108]},{5:[2,92],21:[2,92],64:[2,92],73:[2,92],75:[2,92]},{5:[2,93],21:[2,93],64:[2,93],73:[2,93],75:[2,93]},{5:[2,87],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],19:82,20:[1,22],21:[2,87],23:20,27:[1,23],38:[1,24],45:[2,87],46:[1,29],48:[2,87],49:[2,87],59:139,75:[2,87]},{5:[2,85],21:[2,85],45:[2,85],48:[2,85],49:[2,85],75:[2,85]},{5:[2,86],21:[2,86],45:[2,86],48:[2,86],49:[2,86],75:[2,86]},{5:[2,81],21:[2,81],45:[2,81],48:[2,81],49:[2,81],75:[2,81]},{5:[2,82],21:[2,82],45:[2,82],48:[2,82],49:[2,82],75:[2,82]},{6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],19:140,20:[1,22],23:20,27:[1,23],38:[1,24],46:[1,29]},{57:[1,141]},{51:[1,86]},{48:[1,144],49:[1,143],51:[1,142]},{5:[2,69],21:[2,69],56:[2,69],57:[2,69],58:[2,69],64:[2,69],66:[2,69],73:[2,69],75:[2,69]},{5:[2,68],21:[2,68],51:[2,68],56:[2,68],58:[2,68],64:[2,68],66:[2,68],73:[2,68],75:[2,68]},{21:[1,145],45:[1,110],48:[1,111],49:[1,112]},{5:[2,8],14:[2,8],17:[2,8],18:[1,146],21:[2,8],24:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],33:[2,8],34:[2,8],35:[2,8],36:[2,8],37:[2,8],38:[2,8],39:[2,8],40:[2,8],45:[2,8],47:[2,8],48:[2,8],49:[2,8],51:[2,8],56:[2,8],58:[2,8],60:[2,8],61:[2,8],64:[2,8],66:[2,8],68:[2,8],73:[2,8],74:[2,8],75:[2,8]},{5:[2,12],14:[2,12],17:[2,12],21:[2,12],24:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],32:[2,12],33:[2,12],34:[2,12],35:[2,12],36:[2,12],37:[2,12],38:[2,12],39:[2,12],40:[2,12],45:[2,12],47:[2,12],48:[2,12],49:[2,12],51:[2,12],56:[2,12],58:[2,12],60:[2,12],61:[2,12],64:[2,12],66:[2,12],68:[2,12],73:[2,12],74:[2,12],75:[2,12]},{5:[2,55],14:[1,62],17:[2,55],21:[2,55],24:[1,49],28:[1,50],29:[1,51],30:[1,52],31:[1,53],32:[1,54],33:[1,55],34:[1,56],35:[1,57],36:[1,58],37:[1,59],38:[1,60],39:[1,61],45:[2,55],48:[2,55],49:[2,55],64:[2,55],74:[2,55],75:[2,55]},{5:[2,37],14:[2,37],17:[2,37],21:[2,37],24:[2,37],28:[2,37],29:[2,37],30:[2,37],31:[2,37],32:[2,37],33:[2,37],34:[2,37],35:[2,37],36:[2,37],37:[2,37],38:[2,37],39:[2,37],40:[2,37],45:[2,37],47:[2,37],48:[2,37],49:[2,37],51:[2,37],56:[2,37],58:[2,37],60:[2,37],61:[2,37],64:[2,37],66:[2,37],68:[2,37],73:[2,37],74:[2,37],75:[2,37]},{45:[2,52],47:[2,52]},{14:[1,62],24:[1,49],28:[1,50],29:[1,51],30:[1,52],31:[1,53],32:[1,54],33:[1,55],34:[1,56],35:[1,57],36:[1,58],37:[1,59],38:[1,60],39:[1,61],45:[2,50],47:[2,50]},{5:[2,83],21:[2,83],45:[2,83],48:[2,83],49:[2,83],75:[2,83]},{5:[2,99],14:[1,62],21:[2,99],24:[1,49],28:[1,50],29:[1,51],30:[1,52],31:[1,53],32:[1,54],33:[1,55],34:[1,56],35:[1,57],36:[1,58],37:[1,59],38:[1,60],39:[1,61],64:[2,99],75:[2,99]},{5:[2,74],6:18,7:[1,26],8:19,9:[1,27],10:[1,28],11:16,12:[1,25],13:69,14:[1,15],15:[1,17],16:[1,21],19:147,20:[1,22],21:[2,74],23:20,27:[1,23],38:[1,24],46:[1,29],56:[2,74],58:[2,74],64:[2,74],66:[2,74],73:[2,74],75:[2,74]},{12:[1,148]},{5:[2,77],21:[2,77],56:[2,77],58:[2,77],64:[2,77],66:[2,77],73:[2,77],75:[2,77]},{5:[2,78],21:[2,78],56:[2,78],58:[2,78],64:[2,78],66:[2,78],73:[2,78],75:[2,78]},{5:[2,24],14:[2,24],17:[2,24],21:[2,24],24:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[2,24],32:[2,24],33:[2,24],34:[2,24],35:[2,24],36:[2,24],37:[2,24],38:[2,24],39:[2,24],40:[2,24],45:[2,24],47:[2,24],48:[2,24],49:[2,24],51:[2,24],56:[2,24],58:[2,24],60:[2,24],61:[2,24],64:[2,24],66:[2,24],68:[2,24],73:[2,24],74:[2,24],75:[2,24]},{11:44,12:[1,25],13:149,14:[1,15]},{5:[2,72],14:[1,62],21:[2,72],24:[1,49],28:[1,50],29:[1,51],30:[1,52],31:[1,53],32:[1,54],33:[1,55],34:[1,56],35:[1,57],36:[1,58],37:[1,59],38:[1,60],39:[1,61],48:[1,150],49:[1,151],56:[2,72],58:[2,72],64:[2,72],66:[2,72],73:[2,72],75:[2,72]},{5:[2,73],21:[2,73],56:[2,73],58:[2,73],64:[2,73],66:[2,73],73:[2,73],75:[2,73]},{5:[2,10],14:[2,10],17:[2,10],21:[2,10],24:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[2,10],33:[2,10],34:[2,10],35:[2,10],36:[2,10],37:[2,10],38:[2,10],39:[2,10],40:[2,10],45:[2,10],47:[2,10],48:[2,10],49:[2,10],51:[2,10],56:[2,10],58:[2,10],60:[2,10],61:[2,10],64:[2,10],66:[2,10],68:[2,10],73:[2,10],74:[2,10],75:[2,10]},{5:[2,75],21:[2,75],56:[2,75],58:[2,75],64:[2,75],66:[2,75],73:[2,75],75:[2,75]},{5:[2,76],21:[2,76],56:[2,76],58:[2,76],64:[2,76],66:[2,76],73:[2,76],75:[2,76]}],
defaultActions: {6:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 48
break;
case 1:return 49
break;
case 2:return 18
break;
case 3:return 20
break;
case 4:return 21
break;
case 5:return 15
break;
case 6:return 17
break;
case 7:return 45
break;
case 8:return 35
break;
case 9:return 33
break;
case 10:return 36
break;
case 11:return 34
break;
case 12:return 32
break;
case 13:return 31
break;
case 14:return 37
break;
case 15:return 38
break;
case 16:return 14
break;
case 17:return 39
break;
case 18:return 46
break;
case 19:return 47
break;
case 20:return 43
break;
case 21:return 70
break;
case 22:return 71
break;
case 23:return 68
break;
case 24:return 66
break;
case 25:return 73
break;
case 26:return 74
break;
case 27:return 64
break;
case 28:return 60
break;
case 29:return 61
break;
case 30:return 51
break;
case 31:return 56
break;
case 32:return 57
break;
case 33:return 58
break;
case 34:return 29
break;
case 35:return 30
break;
case 36:return 24
break;
case 37:return 27
break;
case 38:return 28
break;
case 39:return 75
break;
case 40:return 9
break;
case 41:return 10
break;
case 42:return 25
break;
case 43:return 26
break;
case 44:return 16
break;
case 45:return 12
break;
case 46:return 7
break;
case 47:return 5
break;
case 48:/* ignore whitespace */
break;
case 49:return 'INVALID'
break;
}
},
rules: [/^(?:\.\s)/,/^(?:\.$)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:\+)/,/^(?:\-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:SELECT TOP)/,/^(?:SELECT)/,/^(?:FROM)/,/^(?:WHERE)/,/^(?:GROUP BY)/,/^(?:HAVING)/,/^(?:ORDER BY)/,/^(?:ASC)/,/^(?:DESC)/,/^(?:AS)/,/^(?:JOIN)/,/^(?:ON)/,/^(?:OVER)/,/^(?:AND)/,/^(?:OR)/,/^(?:IS)/,/^(?:NOT)/,/^(?:IN)/,/^(?:UNION)/,/^(?:true)/,/^(?:false)/,/^(?:NULL)/,/^(?:UNDEFINED)/,/^(?:[0-9.]+)/,/^(?:[@A-Za-z0-9_]+)/,/^(?:'[^']*')/,/^(?:$)/,/^(?:\s+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}